# rustfmt.toml

# Maximum width of each line
max_width = 100 # Maximum width of each line

# Use spaces instead of tabs
hard_tabs = false # Use spaces instead of tabs

# Indent with 4 spaces
tab_spaces = 4 # Number of spaces per tab

# Edition to use
edition = "2024" # Rust edition to use

# Max width of array literals before vertical formatting
array_width = 60

# Max width of function-like attribute args before vertical formatting
attr_fn_like_width = 70

# Max width of a method/field chain to fit on one line
chain_width = 60

# Disable all formatting if true
disable_all_formatting = false

# Max width of function call args before vertical formatting
fn_call_width = 60

# Layout for function parameters in signatures
fn_params_layout = "Tall"

# Always print ABI for extern items
force_explicit_abi = true

# Leading pipes on match arms: Always, Never, Preserve
match_arm_leading_pipes = "Never"

# Trailing comma after block-based match arms
match_block_trailing_comma = false

# Merge multiple derives into a single one
merge_derives = true

# Line ending style: Auto, Native, Unix, Windows
newline_style = "Auto"

# Remove nested parentheses
remove_nested_parens = true

# Reorder import and extern crate statements alphabetically
reorder_imports = true

# Reorder mod declarations alphabetically
reorder_modules = true

# Max width for array elements to be considered short
short_array_element_width_threshold = 10

# Max width for single-line if-else expressions
single_line_if_else_max_width = 50

# Max width for single-line let-else statements
single_line_let_else_max_width = 50

# Max width in struct literal body before vertical formatting
struct_lit_width = 18

# Max width in struct variant body before vertical formatting
struct_variant_width = 35

# Use field init shorthand if possible
use_field_init_shorthand = false

# Heuristic for width-based formatting: Default, Off, Max
use_small_heuristics = "Default"

# Replace try! macro with ? shorthand if possible
use_try_shorthand = false

# Only available in nightly
unstable_features = true
group_imports = "StdExternalCrate" # or "One" / "Preserve"
imports_granularity = "Crate"      # optional, plays nicely with grouping
