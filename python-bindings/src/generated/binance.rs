# ! [doc = " Python bindings for binance venue"] # ! [doc = ""] # ! [doc = " This module is automatically generated from the Rust source code."] # ! [doc = " Do not edit this file directly."] use pyo3 :: prelude ::*; use pyo3_asyncio ; use venues ; # [pyclass] # [derive (Clone)] pub enum OptionsContractType { Call , Put , } # [pyclass] # [derive (Clone)] pub enum OptionsPositionSide { Long , Short , } # [pyclass] # [derive (Clone)] pub enum OptionsOrderType { Limit , } # [pyclass] # [derive (Clone)] pub enum OptionsOrderStatus { Accepted , Rejected , PartiallyFilled , Filled , Cancelled , } # [pyclass] # [derive (Clone)] pub enum RateLimitType { RequestWeight , Orders , } # [pyclass] # [derive (Clone)] pub enum RateLimitInterval { Minute , } # [pyclass] # [derive (Clone)] pub enum OptionsOrderSide { Buy , Sell , } # [pyclass] # [derive (Clone)] pub enum OptionsTimeInForce { Gtc , Ioc , Fok , } # [pyclass] # [derive (Clone)] pub enum OptionsOrderResponseType { Ack , Result , } # [pyclass] # [derive (Clone)] pub enum OptionsRiskLevel { Normal , Medium , High , } # [pyclass] # [derive (Clone)] pub enum OptionsBillType { Fee , Contract , Transfer , } # [pyclass] # [derive (Clone)] pub enum OptionsLiquidity { Taker , Maker , } # [pyclass] # [derive (Clone)] pub enum OptionsBlockTradeStatus { Received , Accepted , Cancelled , Expired , } # [pyclass] # [derive (Clone)] pub struct RestResponse { inner : venues :: RestResponse , } # [pymethods] impl RestResponse { # [staticmethod] fn from_inner (inner : RestResponse) -> Self { Self { inner } } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } # [getter] fn request_duration (& self) -> PyResult < PyObject > { Ok (self . inner . request_duration . clone () . into ()) } # [getter] fn headers (& self) -> PyResult < PyObject > { Ok (self . inner . headers . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OpenInterestRequest { inner : venues :: OpenInterestRequest , } # [pymethods] impl OpenInterestRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn underlying_asset (& self) -> PyResult < String > { Ok (self . inner . underlying_asset . clone () . into ()) } # [getter] fn expiration (& self) -> PyResult < String > { Ok (self . inner . expiration . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OpenInterestResponse { inner : venues :: OpenInterestResponse , } # [pymethods] impl OpenInterestResponse { # [staticmethod] fn from_inner (inner : OpenInterestResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn sum_open_interest (& self) -> PyResult < String > { Ok (self . inner . sum_open_interest . clone () . into ()) } # [getter] fn sum_open_interest_usd (& self) -> PyResult < String > { Ok (self . inner . sum_open_interest_usd . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < String > { Ok (self . inner . timestamp . clone () . into ()) } } # [pymethods] impl RestClient { fn get_open_interest <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_open_interest () . await }) } } # [pyclass] # [derive (Clone)] pub struct ExchangeInfoResponse { inner : venues :: ExchangeInfoResponse , } # [pymethods] impl ExchangeInfoResponse { # [staticmethod] fn from_inner (inner : ExchangeInfoResponse) -> Self { Self { inner } } # [getter] fn timezone (& self) -> PyResult < String > { Ok (self . inner . timezone . clone () . into ()) } # [getter] fn server_time (& self) -> PyResult < u64 > { Ok (self . inner . server_time . clone () . into ()) } # [getter] fn option_contracts (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . option_contracts . clone () . into ()) } # [getter] fn option_assets (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . option_assets . clone () . into ()) } # [getter] fn option_symbols (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . option_symbols . clone () . into ()) } # [getter] fn rate_limits (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . rate_limits . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OptionSymbol { inner : venues :: OptionSymbol , } # [pymethods] impl OptionSymbol { # [staticmethod] fn from_inner (inner : OptionSymbol) -> Self { Self { inner } } # [getter] fn expiry_date (& self) -> PyResult < u64 > { Ok (self . inner . expiry_date . clone () . into ()) } # [getter] fn filters (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . filters . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn strike_price (& self) -> PyResult < String > { Ok (self . inner . strike_price . clone () . into ()) } # [getter] fn underlying (& self) -> PyResult < String > { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn unit (& self) -> PyResult < u64 > { Ok (self . inner . unit . clone () . into ()) } # [getter] fn maker_fee_rate (& self) -> PyResult < String > { Ok (self . inner . maker_fee_rate . clone () . into ()) } # [getter] fn taker_fee_rate (& self) -> PyResult < String > { Ok (self . inner . taker_fee_rate . clone () . into ()) } # [getter] fn min_qty (& self) -> PyResult < String > { Ok (self . inner . min_qty . clone () . into ()) } # [getter] fn max_qty (& self) -> PyResult < String > { Ok (self . inner . max_qty . clone () . into ()) } # [getter] fn initial_margin (& self) -> PyResult < String > { Ok (self . inner . initial_margin . clone () . into ()) } # [getter] fn maintenance_margin (& self) -> PyResult < String > { Ok (self . inner . maintenance_margin . clone () . into ()) } # [getter] fn min_initial_margin (& self) -> PyResult < String > { Ok (self . inner . min_initial_margin . clone () . into ()) } # [getter] fn min_maintenance_margin (& self) -> PyResult < String > { Ok (self . inner . min_maintenance_margin . clone () . into ()) } # [getter] fn price_scale (& self) -> PyResult < u64 > { Ok (self . inner . price_scale . clone () . into ()) } # [getter] fn quantity_scale (& self) -> PyResult < u64 > { Ok (self . inner . quantity_scale . clone () . into ()) } # [getter] fn quote_asset (& self) -> PyResult < String > { Ok (self . inner . quote_asset . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum Filter { PriceFilter , LotSize , } # [pyclass] # [derive (Clone)] pub struct RateLimit { inner : venues :: RateLimit , } # [pymethods] impl RateLimit { # [staticmethod] fn from_inner (inner : RateLimit) -> Self { Self { inner } } # [getter] fn rate_limit_type (& self) -> PyResult < String > { Ok (self . inner . rate_limit_type . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < String > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn interval_num (& self) -> PyResult < u64 > { Ok (self . inner . interval_num . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < u64 > { Ok (self . inner . limit . clone () . into ()) } } # [pymethods] impl RestClient { fn get_exchange_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_exchange_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn base_url (& self) -> PyResult < PyObject > { Ok (self . inner . base_url . clone () . into ()) } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn rate_limiter (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limiter . clone () . into ()) } } # [pymethods] impl RestClient { fn send_request <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . send_request () . await }) } } # [pyclass] # [derive (Clone)] pub struct KlinesRequest { inner : venues :: KlinesRequest , } # [pymethods] impl KlinesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < String > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct KlineResponse { inner : venues :: KlineResponse , } # [pymethods] impl KlineResponse { # [staticmethod] fn from_inner (inner : KlineResponse) -> Self { Self { inner } } # [getter] fn open (& self) -> PyResult < String > { Ok (self . inner . open . clone () . into ()) } # [getter] fn high (& self) -> PyResult < String > { Ok (self . inner . high . clone () . into ()) } # [getter] fn low (& self) -> PyResult < String > { Ok (self . inner . low . clone () . into ()) } # [getter] fn close (& self) -> PyResult < String > { Ok (self . inner . close . clone () . into ()) } # [getter] fn volume (& self) -> PyResult < String > { Ok (self . inner . volume . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < String > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn trade_count (& self) -> PyResult < u64 > { Ok (self . inner . trade_count . clone () . into ()) } # [getter] fn taker_volume (& self) -> PyResult < String > { Ok (self . inner . taker_volume . clone () . into ()) } # [getter] fn taker_amount (& self) -> PyResult < String > { Ok (self . inner . taker_amount . clone () . into ()) } # [getter] fn open_time (& self) -> PyResult < u64 > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn close_time (& self) -> PyResult < u64 > { Ok (self . inner . close_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_klines <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_klines () . await }) } } # [pyclass] # [derive (Clone)] pub struct HistoricalTradesRequest { inner : venues :: HistoricalTradesRequest , } # [pymethods] impl HistoricalTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn from_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_id . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct HistoricalTrade { inner : venues :: HistoricalTrade , } # [pymethods] impl HistoricalTrade { # [staticmethod] fn from_inner (inner : HistoricalTrade) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < String > { Ok (self . inner . id . clone () . into ()) } # [getter] fn trade_id (& self) -> PyResult < String > { Ok (self . inner . trade_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < String > { Ok (self . inner . qty . clone () . into ()) } # [getter] fn quote_qty (& self) -> PyResult < String > { Ok (self . inner . quote_qty . clone () . into ()) } # [getter] fn side (& self) -> PyResult < i64 > { Ok (self . inner . side . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_historical_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_historical_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct PingResponse { inner : venues :: PingResponse , } # [pymethods] impl PingResponse { # [staticmethod] fn from_inner (inner : PingResponse) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn ping <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . ping () . await }) } } # [pyclass] # [derive (Clone)] pub struct ExerciseHistoryRequest { inner : venues :: ExerciseHistoryRequest , } # [pymethods] impl ExerciseHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn underlying (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum StrikeResult { RealisticValueStricken , ExtrinsicValueExpired , } # [pyclass] # [derive (Clone)] pub struct ExerciseHistoryRecord { inner : venues :: ExerciseHistoryRecord , } # [pymethods] impl ExerciseHistoryRecord { # [staticmethod] fn from_inner (inner : ExerciseHistoryRecord) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn strike_price (& self) -> PyResult < String > { Ok (self . inner . strike_price . clone () . into ()) } # [getter] fn real_strike_price (& self) -> PyResult < String > { Ok (self . inner . real_strike_price . clone () . into ()) } # [getter] fn expiry_date (& self) -> PyResult < u64 > { Ok (self . inner . expiry_date . clone () . into ()) } # [getter] fn strike_result (& self) -> PyResult < PyObject > { Ok (self . inner . strike_result . clone () . into ()) } } # [pymethods] impl RestClient { fn get_exercise_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_exercise_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct TickerRequest { inner : venues :: TickerRequest , } # [pymethods] impl TickerRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TickerResponse { inner : venues :: TickerResponse , } # [pymethods] impl TickerResponse { # [staticmethod] fn from_inner (inner : TickerResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price_change (& self) -> PyResult < String > { Ok (self . inner . price_change . clone () . into ()) } # [getter] fn price_change_percent (& self) -> PyResult < String > { Ok (self . inner . price_change_percent . clone () . into ()) } # [getter] fn last_price (& self) -> PyResult < String > { Ok (self . inner . last_price . clone () . into ()) } # [getter] fn last_qty (& self) -> PyResult < String > { Ok (self . inner . last_qty . clone () . into ()) } # [getter] fn open (& self) -> PyResult < String > { Ok (self . inner . open . clone () . into ()) } # [getter] fn high (& self) -> PyResult < String > { Ok (self . inner . high . clone () . into ()) } # [getter] fn low (& self) -> PyResult < String > { Ok (self . inner . low . clone () . into ()) } # [getter] fn volume (& self) -> PyResult < String > { Ok (self . inner . volume . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn bid_price (& self) -> PyResult < String > { Ok (self . inner . bid_price . clone () . into ()) } # [getter] fn ask_price (& self) -> PyResult < String > { Ok (self . inner . ask_price . clone () . into ()) } # [getter] fn open_time (& self) -> PyResult < u64 > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn close_time (& self) -> PyResult < u64 > { Ok (self . inner . close_time . clone () . into ()) } # [getter] fn first_trade_id (& self) -> PyResult < u64 > { Ok (self . inner . first_trade_id . clone () . into ()) } # [getter] fn trade_count (& self) -> PyResult < u64 > { Ok (self . inner . trade_count . clone () . into ()) } # [getter] fn strike_price (& self) -> PyResult < String > { Ok (self . inner . strike_price . clone () . into ()) } # [getter] fn exercise_price (& self) -> PyResult < String > { Ok (self . inner . exercise_price . clone () . into ()) } } # [pymethods] impl RestClient { fn get_ticker <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_ticker () . await }) } } # [pyclass] # [derive (Clone)] pub struct MarkPriceRequest { inner : venues :: MarkPriceRequest , } # [pymethods] impl MarkPriceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MarkPriceResponse { inner : venues :: MarkPriceResponse , } # [pymethods] impl MarkPriceResponse { # [staticmethod] fn from_inner (inner : MarkPriceResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn mark_price (& self) -> PyResult < String > { Ok (self . inner . mark_price . clone () . into ()) } # [getter] fn bid_iv (& self) -> PyResult < String > { Ok (self . inner . bid_iv . clone () . into ()) } # [getter] fn ask_iv (& self) -> PyResult < String > { Ok (self . inner . ask_iv . clone () . into ()) } # [getter] fn mark_iv (& self) -> PyResult < String > { Ok (self . inner . mark_iv . clone () . into ()) } # [getter] fn delta (& self) -> PyResult < String > { Ok (self . inner . delta . clone () . into ()) } # [getter] fn theta (& self) -> PyResult < String > { Ok (self . inner . theta . clone () . into ()) } # [getter] fn gamma (& self) -> PyResult < String > { Ok (self . inner . gamma . clone () . into ()) } # [getter] fn vega (& self) -> PyResult < String > { Ok (self . inner . vega . clone () . into ()) } # [getter] fn high_price_limit (& self) -> PyResult < String > { Ok (self . inner . high_price_limit . clone () . into ()) } # [getter] fn low_price_limit (& self) -> PyResult < String > { Ok (self . inner . low_price_limit . clone () . into ()) } # [getter] fn risk_free_interest (& self) -> PyResult < String > { Ok (self . inner . risk_free_interest . clone () . into ()) } } # [pymethods] impl RestClient { fn get_mark_price <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_mark_price () . await }) } } # [pyclass] # [derive (Clone)] pub struct ServerTimeResponse { inner : venues :: ServerTimeResponse , } # [pymethods] impl ServerTimeResponse { # [staticmethod] fn from_inner (inner : ServerTimeResponse) -> Self { Self { inner } } # [getter] fn server_time (& self) -> PyResult < u64 > { Ok (self . inner . server_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_server_time <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_server_time () . await }) } } # [pyclass] # [derive (Clone)] pub struct RecentTradesRequest { inner : venues :: RecentTradesRequest , } # [pymethods] impl RecentTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RecentTrade { inner : venues :: RecentTrade , } # [pymethods] impl RecentTrade { # [staticmethod] fn from_inner (inner : RecentTrade) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < String > { Ok (self . inner . id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < String > { Ok (self . inner . qty . clone () . into ()) } # [getter] fn quote_qty (& self) -> PyResult < String > { Ok (self . inner . quote_qty . clone () . into ()) } # [getter] fn side (& self) -> PyResult < i64 > { Ok (self . inner . side . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_recent_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_recent_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct OrderBookRequest { inner : venues :: OrderBookRequest , } # [pymethods] impl OrderBookRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderBookResponse { inner : venues :: OrderBookResponse , } # [pymethods] impl OrderBookResponse { # [staticmethod] fn from_inner (inner : OrderBookResponse) -> Self { Self { inner } } # [getter] fn transaction_time (& self) -> PyResult < u64 > { Ok (self . inner . transaction_time . clone () . into ()) } # [getter] fn update_id (& self) -> PyResult < u64 > { Ok (self . inner . update_id . clone () . into ()) } # [getter] fn bids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . bids . clone () . into ()) } # [getter] fn asks (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . asks . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderBookLevel { inner : venues :: OrderBookLevel , } # [pymethods] impl OrderBookLevel { # [staticmethod] fn from_inner (inner : OrderBookLevel) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn get_order_book <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_order_book () . await }) } } # [pyclass] # [derive (Clone)] pub struct BlockTradesRequest { inner : venues :: BlockTradesRequest , } # [pymethods] impl BlockTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BlockTrade { inner : venues :: BlockTrade , } # [pymethods] impl BlockTrade { # [staticmethod] fn from_inner (inner : BlockTrade) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < u64 > { Ok (self . inner . id . clone () . into ()) } # [getter] fn trade_id (& self) -> PyResult < u64 > { Ok (self . inner . trade_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < String > { Ok (self . inner . qty . clone () . into ()) } # [getter] fn quote_qty (& self) -> PyResult < String > { Ok (self . inner . quote_qty . clone () . into ()) } # [getter] fn side (& self) -> PyResult < i64 > { Ok (self . inner . side . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_block_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_block_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct SymbolPriceTickerRequest { inner : venues :: SymbolPriceTickerRequest , } # [pymethods] impl SymbolPriceTickerRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn underlying (& self) -> PyResult < String > { Ok (self . inner . underlying . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SymbolPriceTickerResponse { inner : venues :: SymbolPriceTickerResponse , } # [pymethods] impl SymbolPriceTickerResponse { # [staticmethod] fn from_inner (inner : SymbolPriceTickerResponse) -> Self { Self { inner } } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn index_price (& self) -> PyResult < String > { Ok (self . inner . index_price . clone () . into ()) } } # [pymethods] impl RestClient { fn get_symbol_price_ticker <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_symbol_price_ticker () . await }) } } # [pyclass] # [derive (Clone)] pub struct BatchOrderItem { inner : venues :: BatchOrderItem , } # [pymethods] impl BatchOrderItem { # [staticmethod] fn from_inner (inner : BatchOrderItem) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn new_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_client_order_id . clone () . into ()) } # [getter] fn is_mmp (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . is_mmp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchOrdersRequest { inner : venues :: BatchOrdersRequest , } # [pymethods] impl BatchOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . orders . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchOrderResponse { inner : venues :: BatchOrderResponse , } # [pymethods] impl BatchOrderResponse { # [staticmethod] fn from_inner (inner : BatchOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < bool > { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < u64 > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price_scale (& self) -> PyResult < u64 > { Ok (self . inner . price_scale . clone () . into ()) } # [getter] fn quantity_scale (& self) -> PyResult < u64 > { Ok (self . inner . quantity_scale . clone () . into ()) } # [getter] fn option_side (& self) -> PyResult < PyObject > { Ok (self . inner . option_side . clone () . into ()) } # [getter] fn quote_asset (& self) -> PyResult < String > { Ok (self . inner . quote_asset . clone () . into ()) } # [getter] fn mmp (& self) -> PyResult < bool > { Ok (self . inner . mmp . clone () . into ()) } } # [pymethods] impl RestClient { fn batch_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . batch_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct IncomeDownloadRequest { inner : venues :: IncomeDownloadRequest , } # [pymethods] impl IncomeDownloadRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn start_time (& self) -> PyResult < u64 > { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < u64 > { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct IncomeDownloadStatusRequest { inner : venues :: IncomeDownloadStatusRequest , } # [pymethods] impl IncomeDownloadStatusRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn download_id (& self) -> PyResult < String > { Ok (self . inner . download_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct IncomeDownloadResponse { inner : venues :: IncomeDownloadResponse , } # [pymethods] impl IncomeDownloadResponse { # [staticmethod] fn from_inner (inner : IncomeDownloadResponse) -> Self { Self { inner } } # [getter] fn avg_cost_timestamp_of_every_10m (& self) -> PyResult < u64 > { Ok (self . inner . avg_cost_timestamp_of_every_10m . clone () . into ()) } # [getter] fn download_id (& self) -> PyResult < String > { Ok (self . inner . download_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct IncomeDownloadStatusResponse { inner : venues :: IncomeDownloadStatusResponse , } # [pymethods] impl IncomeDownloadStatusResponse { # [staticmethod] fn from_inner (inner : IncomeDownloadStatusResponse) -> Self { Self { inner } } # [getter] fn download_id (& self) -> PyResult < String > { Ok (self . inner . download_id . clone () . into ()) } # [getter] fn status (& self) -> PyResult < String > { Ok (self . inner . status . clone () . into ()) } # [getter] fn url (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . url . clone () . into ()) } # [getter] fn notified (& self) -> PyResult < bool > { Ok (self . inner . notified . clone () . into ()) } # [getter] fn expiration_timestamp (& self) -> PyResult < u64 > { Ok (self . inner . expiration_timestamp . clone () . into ()) } # [getter] fn is_expired (& self) -> PyResult < bool > { Ok (self . inner . is_expired . clone () . into ()) } } # [pymethods] impl RestClient { fn initiate_income_download <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . initiate_income_download () . await }) } fn get_income_download_status <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_income_download_status () . await }) } } # [pyclass] # [derive (Clone)] pub struct NewOrderRequest { inner : venues :: NewOrderRequest , } # [pymethods] impl NewOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn new_order_resp_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_order_resp_type . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn is_mmp (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . is_mmp . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderAckResponse { inner : venues :: OrderAckResponse , } # [pymethods] impl OrderAckResponse { # [staticmethod] fn from_inner (inner : OrderAckResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn create_date (& self) -> PyResult < u64 > { Ok (self . inner . create_date . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < bool > { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn mmp (& self) -> PyResult < bool > { Ok (self . inner . mmp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderResultResponse { inner : venues :: OrderResultResponse , } # [pymethods] impl OrderResultResponse { # [staticmethod] fn from_inner (inner : OrderResultResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn fee (& self) -> PyResult < String > { Ok (self . inner . fee . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < bool > { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < u64 > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price_scale (& self) -> PyResult < u64 > { Ok (self . inner . price_scale . clone () . into ()) } # [getter] fn quantity_scale (& self) -> PyResult < u64 > { Ok (self . inner . quantity_scale . clone () . into ()) } # [getter] fn option_side (& self) -> PyResult < PyObject > { Ok (self . inner . option_side . clone () . into ()) } # [getter] fn quote_asset (& self) -> PyResult < String > { Ok (self . inner . quote_asset . clone () . into ()) } # [getter] fn mmp (& self) -> PyResult < bool > { Ok (self . inner . mmp . clone () . into ()) } } # [pymethods] impl RestClient { fn new_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . new_order () . await }) } fn new_order_result <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . new_order_result () . await }) } } # [pyclass] # [derive (Clone)] pub struct HistoryOrdersRequest { inner : venues :: HistoryOrdersRequest , } # [pymethods] impl HistoryOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct HistoryOrder { inner : venues :: HistoryOrder , } # [pymethods] impl HistoryOrder { # [staticmethod] fn from_inner (inner : HistoryOrder) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn fee (& self) -> PyResult < String > { Ok (self . inner . fee . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < bool > { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < u64 > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn source (& self) -> PyResult < String > { Ok (self . inner . source . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price_scale (& self) -> PyResult < u64 > { Ok (self . inner . price_scale . clone () . into ()) } # [getter] fn quantity_scale (& self) -> PyResult < u64 > { Ok (self . inner . quantity_scale . clone () . into ()) } # [getter] fn option_side (& self) -> PyResult < PyObject > { Ok (self . inner . option_side . clone () . into ()) } # [getter] fn quote_asset (& self) -> PyResult < String > { Ok (self . inner . quote_asset . clone () . into ()) } # [getter] fn mmp (& self) -> PyResult < bool > { Ok (self . inner . mmp . clone () . into ()) } } # [pymethods] impl RestClient { fn get_history_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_history_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct CountdownCancelRequest { inner : venues :: CountdownCancelRequest , } # [pymethods] impl CountdownCancelRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn underlying (& self) -> PyResult < String > { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn countdown_time (& self) -> PyResult < u64 > { Ok (self . inner . countdown_time . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetCountdownCancelRequest { inner : venues :: GetCountdownCancelRequest , } # [pymethods] impl GetCountdownCancelRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn underlying (& self) -> PyResult < String > { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CountdownCancelHeartbeatRequest { inner : venues :: CountdownCancelHeartbeatRequest , } # [pymethods] impl CountdownCancelHeartbeatRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn underlying (& self) -> PyResult < String > { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CountdownCancelResponse { inner : venues :: CountdownCancelResponse , } # [pymethods] impl CountdownCancelResponse { # [staticmethod] fn from_inner (inner : CountdownCancelResponse) -> Self { Self { inner } } # [getter] fn underlying (& self) -> PyResult < String > { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn countdown_time (& self) -> PyResult < u64 > { Ok (self . inner . countdown_time . clone () . into ()) } # [getter] fn trigger_time (& self) -> PyResult < u64 > { Ok (self . inner . trigger_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_countdown_cancel_config <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_countdown_cancel_config () . await }) } fn set_countdown_cancel_config <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . set_countdown_cancel_config () . await }) } fn countdown_cancel_heartbeat <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . countdown_cancel_heartbeat () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct QueryOrderRequest { inner : venues :: QueryOrderRequest , } # [pymethods] impl QueryOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct QueryOrderResponse { inner : venues :: QueryOrderResponse , } # [pymethods] impl QueryOrderResponse { # [staticmethod] fn from_inner (inner : QueryOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn fee (& self) -> PyResult < String > { Ok (self . inner . fee . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < bool > { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < u64 > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn source (& self) -> PyResult < String > { Ok (self . inner . source . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price_scale (& self) -> PyResult < u64 > { Ok (self . inner . price_scale . clone () . into ()) } # [getter] fn quantity_scale (& self) -> PyResult < u64 > { Ok (self . inner . quantity_scale . clone () . into ()) } # [getter] fn option_side (& self) -> PyResult < PyObject > { Ok (self . inner . option_side . clone () . into ()) } # [getter] fn quote_asset (& self) -> PyResult < String > { Ok (self . inner . quote_asset . clone () . into ()) } # [getter] fn mmp (& self) -> PyResult < bool > { Ok (self . inner . mmp . clone () . into ()) } } # [pymethods] impl RestClient { fn query_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . query_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelRequest { inner : venues :: BatchCancelRequest , } # [pymethods] impl BatchCancelRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id_list (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id_list . clone () . into ()) } # [getter] fn orig_client_order_id_list (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id_list . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelAllByUnderlyingRequest { inner : venues :: CancelAllByUnderlyingRequest , } # [pymethods] impl CancelAllByUnderlyingRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn underlying (& self) -> PyResult < String > { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelAllBySymbolRequest { inner : venues :: CancelAllBySymbolRequest , } # [pymethods] impl CancelAllBySymbolRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelResponse { inner : venues :: CancelResponse , } # [pymethods] impl CancelResponse { # [staticmethod] fn from_inner (inner : CancelResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < bool > { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < u64 > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price_scale (& self) -> PyResult < u64 > { Ok (self . inner . price_scale . clone () . into ()) } # [getter] fn quantity_scale (& self) -> PyResult < u64 > { Ok (self . inner . quantity_scale . clone () . into ()) } # [getter] fn option_side (& self) -> PyResult < PyObject > { Ok (self . inner . option_side . clone () . into ()) } # [getter] fn quote_asset (& self) -> PyResult < String > { Ok (self . inner . quote_asset . clone () . into ()) } # [getter] fn mmp (& self) -> PyResult < bool > { Ok (self . inner . mmp . clone () . into ()) } } # [pymethods] impl RestClient { fn batch_cancel_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . batch_cancel_orders () . await }) } fn cancel_all_orders_by_underlying <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_all_orders_by_underlying () . await }) } fn cancel_all_orders_by_symbol <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_all_orders_by_symbol () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMmpConfigRequest { inner : venues :: GetMmpConfigRequest , } # [pymethods] impl GetMmpConfigRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn underlying (& self) -> PyResult < String > { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SetMmpConfigRequest { inner : venues :: SetMmpConfigRequest , } # [pymethods] impl SetMmpConfigRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn underlying (& self) -> PyResult < String > { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn window_time_in_milliseconds (& self) -> PyResult < u64 > { Ok (self . inner . window_time_in_milliseconds . clone () . into ()) } # [getter] fn frozen_time_in_milliseconds (& self) -> PyResult < u64 > { Ok (self . inner . frozen_time_in_milliseconds . clone () . into ()) } # [getter] fn qty_limit (& self) -> PyResult < String > { Ok (self . inner . qty_limit . clone () . into ()) } # [getter] fn delta_limit (& self) -> PyResult < String > { Ok (self . inner . delta_limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ResetMmpRequest { inner : venues :: ResetMmpRequest , } # [pymethods] impl ResetMmpRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn underlying (& self) -> PyResult < String > { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MmpConfigResponse { inner : venues :: MmpConfigResponse , } # [pymethods] impl MmpConfigResponse { # [staticmethod] fn from_inner (inner : MmpConfigResponse) -> Self { Self { inner } } # [getter] fn underlying_id (& self) -> PyResult < u64 > { Ok (self . inner . underlying_id . clone () . into ()) } # [getter] fn underlying (& self) -> PyResult < String > { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn window_time_in_milliseconds (& self) -> PyResult < u64 > { Ok (self . inner . window_time_in_milliseconds . clone () . into ()) } # [getter] fn frozen_time_in_milliseconds (& self) -> PyResult < u64 > { Ok (self . inner . frozen_time_in_milliseconds . clone () . into ()) } # [getter] fn qty_limit (& self) -> PyResult < String > { Ok (self . inner . qty_limit . clone () . into ()) } # [getter] fn delta_limit (& self) -> PyResult < String > { Ok (self . inner . delta_limit . clone () . into ()) } # [getter] fn last_trigger_time (& self) -> PyResult < u64 > { Ok (self . inner . last_trigger_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_mmp_config <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_mmp_config () . await }) } fn set_mmp_config <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . set_mmp_config () . await }) } fn reset_mmp <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . reset_mmp () . await }) } } # [pyclass] # [derive (Clone)] pub struct UserTradesRequest { inner : venues :: UserTradesRequest , } # [pymethods] impl UserTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn from_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct UserTrade { inner : venues :: UserTrade , } # [pymethods] impl UserTrade { # [staticmethod] fn from_inner (inner : UserTrade) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < u64 > { Ok (self . inner . id . clone () . into ()) } # [getter] fn trade_id (& self) -> PyResult < u64 > { Ok (self . inner . trade_id . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn quote_qty (& self) -> PyResult < String > { Ok (self . inner . quote_qty . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn fee (& self) -> PyResult < String > { Ok (self . inner . fee . clone () . into ()) } # [getter] fn realized_pnl (& self) -> PyResult < String > { Ok (self . inner . realized_pnl . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn volatility (& self) -> PyResult < String > { Ok (self . inner . volatility . clone () . into ()) } # [getter] fn volatility_for_greeks (& self) -> PyResult < String > { Ok (self . inner . volatility_for_greeks . clone () . into ()) } # [getter] fn underlying_price (& self) -> PyResult < String > { Ok (self . inner . underlying_price . clone () . into ()) } # [getter] fn underlying_price_for_greeks (& self) -> PyResult < String > { Ok (self . inner . underlying_price_for_greeks . clone () . into ()) } # [getter] fn vega (& self) -> PyResult < String > { Ok (self . inner . vega . clone () . into ()) } # [getter] fn delta (& self) -> PyResult < String > { Ok (self . inner . delta . clone () . into ()) } # [getter] fn gamma (& self) -> PyResult < String > { Ok (self . inner . gamma . clone () . into ()) } # [getter] fn theta (& self) -> PyResult < String > { Ok (self . inner . theta . clone () . into ()) } # [getter] fn price_scale (& self) -> PyResult < u64 > { Ok (self . inner . price_scale . clone () . into ()) } # [getter] fn quantity_scale (& self) -> PyResult < u64 > { Ok (self . inner . quantity_scale . clone () . into ()) } # [getter] fn option_side (& self) -> PyResult < PyObject > { Ok (self . inner . option_side . clone () . into ()) } # [getter] fn quote_asset (& self) -> PyResult < String > { Ok (self . inner . quote_asset . clone () . into ()) } } # [pymethods] impl RestClient { fn get_user_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_user_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct OpenOrdersRequest { inner : venues :: OpenOrdersRequest , } # [pymethods] impl OpenOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OpenOrder { inner : venues :: OpenOrder , } # [pymethods] impl OpenOrder { # [staticmethod] fn from_inner (inner : OpenOrder) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn fee (& self) -> PyResult < String > { Ok (self . inner . fee . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < bool > { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < u64 > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price_scale (& self) -> PyResult < u64 > { Ok (self . inner . price_scale . clone () . into ()) } # [getter] fn quantity_scale (& self) -> PyResult < u64 > { Ok (self . inner . quantity_scale . clone () . into ()) } # [getter] fn option_side (& self) -> PyResult < PyObject > { Ok (self . inner . option_side . clone () . into ()) } # [getter] fn quote_asset (& self) -> PyResult < String > { Ok (self . inner . quote_asset . clone () . into ()) } # [getter] fn mmp (& self) -> PyResult < bool > { Ok (self . inner . mmp . clone () . into ()) } } # [pymethods] impl RestClient { fn get_open_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_open_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderRequest { inner : venues :: CancelOrderRequest , } # [pymethods] impl CancelOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderResponse { inner : venues :: CancelOrderResponse , } # [pymethods] impl CancelOrderResponse { # [staticmethod] fn from_inner (inner : CancelOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn fee (& self) -> PyResult < String > { Ok (self . inner . fee . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < bool > { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn create_date (& self) -> PyResult < u64 > { Ok (self . inner . create_date . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn source (& self) -> PyResult < String > { Ok (self . inner . source . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price_scale (& self) -> PyResult < u64 > { Ok (self . inner . price_scale . clone () . into ()) } # [getter] fn quantity_scale (& self) -> PyResult < u64 > { Ok (self . inner . quantity_scale . clone () . into ()) } # [getter] fn option_side (& self) -> PyResult < PyObject > { Ok (self . inner . option_side . clone () . into ()) } # [getter] fn quote_asset (& self) -> PyResult < String > { Ok (self . inner . quote_asset . clone () . into ()) } # [getter] fn mmp (& self) -> PyResult < bool > { Ok (self . inner . mmp . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct AccountRequest { inner : venues :: AccountRequest , } # [pymethods] impl AccountRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountAsset { inner : venues :: AccountAsset , } # [pymethods] impl AccountAsset { # [staticmethod] fn from_inner (inner : AccountAsset) -> Self { Self { inner } } # [getter] fn asset (& self) -> PyResult < String > { Ok (self . inner . asset . clone () . into ()) } # [getter] fn margin_balance (& self) -> PyResult < String > { Ok (self . inner . margin_balance . clone () . into ()) } # [getter] fn equity (& self) -> PyResult < String > { Ok (self . inner . equity . clone () . into ()) } # [getter] fn available (& self) -> PyResult < String > { Ok (self . inner . available . clone () . into ()) } # [getter] fn locked (& self) -> PyResult < String > { Ok (self . inner . locked . clone () . into ()) } # [getter] fn unrealized_pnl (& self) -> PyResult < String > { Ok (self . inner . unrealized_pnl . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountGreeks { inner : venues :: AccountGreeks , } # [pymethods] impl AccountGreeks { # [staticmethod] fn from_inner (inner : AccountGreeks) -> Self { Self { inner } } # [getter] fn underlying (& self) -> PyResult < String > { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn delta (& self) -> PyResult < String > { Ok (self . inner . delta . clone () . into ()) } # [getter] fn gamma (& self) -> PyResult < String > { Ok (self . inner . gamma . clone () . into ()) } # [getter] fn theta (& self) -> PyResult < String > { Ok (self . inner . theta . clone () . into ()) } # [getter] fn vega (& self) -> PyResult < String > { Ok (self . inner . vega . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountResponse { inner : venues :: AccountResponse , } # [pymethods] impl AccountResponse { # [staticmethod] fn from_inner (inner : AccountResponse) -> Self { Self { inner } } # [getter] fn assets (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . assets . clone () . into ()) } # [getter] fn greeks (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . greeks . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn risk_level (& self) -> PyResult < PyObject > { Ok (self . inner . risk_level . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct CreateBlockTradeRequest { inner : venues :: CreateBlockTradeRequest , } # [pymethods] impl CreateBlockTradeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn counterparty_id (& self) -> PyResult < u64 > { Ok (self . inner . counterparty_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelBlockTradeRequest { inner : venues :: CancelBlockTradeRequest , } # [pymethods] impl CancelBlockTradeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ExtendBlockTradeRequest { inner : venues :: ExtendBlockTradeRequest , } # [pymethods] impl ExtendBlockTradeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct QueryBlockTradeOrdersRequest { inner : venues :: QueryBlockTradeOrdersRequest , } # [pymethods] impl QueryBlockTradeOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ExecuteBlockTradeRequest { inner : venues :: ExecuteBlockTradeRequest , } # [pymethods] impl ExecuteBlockTradeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct QueryBlockTradeExecutionRequest { inner : venues :: QueryBlockTradeExecutionRequest , } # [pymethods] impl QueryBlockTradeExecutionRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn from_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct QueryBlockUserTradesRequest { inner : venues :: QueryBlockUserTradesRequest , } # [pymethods] impl QueryBlockUserTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn from_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BlockTradeOrderResponse { inner : venues :: BlockTradeOrderResponse , } # [pymethods] impl BlockTradeOrderResponse { # [staticmethod] fn from_inner (inner : BlockTradeOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < u64 > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn status (& self) -> PyResult < String > { Ok (self . inner . status . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn option_side (& self) -> PyResult < PyObject > { Ok (self . inner . option_side . clone () . into ()) } # [getter] fn quote_asset (& self) -> PyResult < String > { Ok (self . inner . quote_asset . clone () . into ()) } # [getter] fn counterparty_id (& self) -> PyResult < u64 > { Ok (self . inner . counterparty_id . clone () . into ()) } # [getter] fn expire_time (& self) -> PyResult < u64 > { Ok (self . inner . expire_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BlockTradeExecution { inner : venues :: BlockTradeExecution , } # [pymethods] impl BlockTradeExecution { # [staticmethod] fn from_inner (inner : BlockTradeExecution) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < u64 > { Ok (self . inner . id . clone () . into ()) } # [getter] fn trade_id (& self) -> PyResult < u64 > { Ok (self . inner . trade_id . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn quote_qty (& self) -> PyResult < String > { Ok (self . inner . quote_qty . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn fee (& self) -> PyResult < String > { Ok (self . inner . fee . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn option_side (& self) -> PyResult < PyObject > { Ok (self . inner . option_side . clone () . into ()) } # [getter] fn quote_asset (& self) -> PyResult < String > { Ok (self . inner . quote_asset . clone () . into ()) } } # [pymethods] impl RestClient { fn create_block_trade_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . create_block_trade_order () . await }) } fn cancel_block_trade_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_block_trade_order () . await }) } fn extend_block_trade_expire_time <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . extend_block_trade_expire_time () . await }) } fn get_block_trade_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_block_trade_orders () . await }) } fn execute_block_trade_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . execute_block_trade_order () . await }) } fn get_block_trade_execution_details <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_block_trade_execution_details () . await }) } fn get_block_user_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_block_user_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct PositionRequest { inner : venues :: PositionRequest , } # [pymethods] impl PositionRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Position { inner : venues :: Position , } # [pymethods] impl Position { # [staticmethod] fn from_inner (inner : Position) -> Self { Self { inner } } # [getter] fn entry_price (& self) -> PyResult < String > { Ok (self . inner . entry_price . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn reducible_qty (& self) -> PyResult < String > { Ok (self . inner . reducible_qty . clone () . into ()) } # [getter] fn mark_value (& self) -> PyResult < String > { Ok (self . inner . mark_value . clone () . into ()) } # [getter] fn ror (& self) -> PyResult < String > { Ok (self . inner . ror . clone () . into ()) } # [getter] fn unrealized_pnl (& self) -> PyResult < String > { Ok (self . inner . unrealized_pnl . clone () . into ()) } # [getter] fn mark_price (& self) -> PyResult < String > { Ok (self . inner . mark_price . clone () . into ()) } # [getter] fn strike_price (& self) -> PyResult < String > { Ok (self . inner . strike_price . clone () . into ()) } # [getter] fn position_cost (& self) -> PyResult < String > { Ok (self . inner . position_cost . clone () . into ()) } # [getter] fn expiry_date (& self) -> PyResult < u64 > { Ok (self . inner . expiry_date . clone () . into ()) } # [getter] fn price_scale (& self) -> PyResult < u64 > { Ok (self . inner . price_scale . clone () . into ()) } # [getter] fn quantity_scale (& self) -> PyResult < u64 > { Ok (self . inner . quantity_scale . clone () . into ()) } # [getter] fn option_side (& self) -> PyResult < PyObject > { Ok (self . inner . option_side . clone () . into ()) } # [getter] fn quote_asset (& self) -> PyResult < String > { Ok (self . inner . quote_asset . clone () . into ()) } } # [pymethods] impl RestClient { fn get_position <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_position () . await }) } } # [pyclass] # [derive (Clone)] pub struct AccountFundingFlowRequest { inner : venues :: AccountFundingFlowRequest , } # [pymethods] impl AccountFundingFlowRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn record_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . record_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_funding_flow <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_funding_flow () . await }) } } # [pyclass] # [derive (Clone)] pub struct ExerciseRecordRequest { inner : venues :: ExerciseRecordRequest , } # [pymethods] impl ExerciseRecordRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pymethods] impl RestClient { fn get_exercise_record <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_exercise_record () . await }) } } # [pyclass] # [derive (Clone)] pub struct MarginAccountRequest { inner : venues :: MarginAccountRequest , } # [pymethods] impl MarginAccountRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MarginAccount { inner : venues :: MarginAccount , } # [pymethods] impl MarginAccount { # [staticmethod] fn from_inner (inner : MarginAccount) -> Self { Self { inner } } # [getter] fn total_margin_balance (& self) -> PyResult < String > { Ok (self . inner . total_margin_balance . clone () . into ()) } # [getter] fn total_initial_margin (& self) -> PyResult < String > { Ok (self . inner . total_initial_margin . clone () . into ()) } # [getter] fn total_maintenance_margin (& self) -> PyResult < String > { Ok (self . inner . total_maintenance_margin . clone () . into ()) } # [getter] fn total_wallet_balance (& self) -> PyResult < String > { Ok (self . inner . total_wallet_balance . clone () . into ()) } # [getter] fn total_unrealized_profit (& self) -> PyResult < String > { Ok (self . inner . total_unrealized_profit . clone () . into ()) } # [getter] fn total_position_value (& self) -> PyResult < String > { Ok (self . inner . total_position_value . clone () . into ()) } # [getter] fn available_balance (& self) -> PyResult < String > { Ok (self . inner . available_balance . clone () . into ()) } # [getter] fn max_withdraw_amount (& self) -> PyResult < String > { Ok (self . inner . max_withdraw_amount . clone () . into ()) } # [getter] fn assets (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . assets . clone () . into ()) } } # [pymethods] impl RestClient { fn get_margin_account <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_margin_account () . await }) } } # [pyclass] # [derive (Clone)] pub struct ErrorResponse { inner : venues :: ErrorResponse , } # [pymethods] impl ErrorResponse { # [staticmethod] fn from_inner (inner : ErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum RateLimitType { RequestWeight , Orders , RawRequests , } # [pyclass] # [derive (Clone)] pub enum RateLimitInterval { Second , Minute , Day , } # [pyclass] # [derive (Clone)] pub enum IntervalUnit { Second , Minute , Hour , Day , } # [pyclass] # [derive (Clone)] pub struct RateLimitHeader { inner : venues :: RateLimitHeader , } # [pymethods] impl RateLimitHeader { # [staticmethod] fn from_inner (inner : RateLimitHeader) -> Self { Self { inner } } # [getter] fn kind (& self) -> PyResult < PyObject > { Ok (self . inner . kind . clone () . into ()) } # [getter] fn interval_value (& self) -> PyResult < u64 > { Ok (self . inner . interval_value . clone () . into ()) } # [getter] fn interval_unit (& self) -> PyResult < PyObject > { Ok (self . inner . interval_unit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum RateLimitHeaderKind { UsedWeight , OrderCount , } # [pyclass] # [derive (Clone)] pub struct ResponseHeaders { inner : venues :: ResponseHeaders , } # [pymethods] impl ResponseHeaders { # [staticmethod] fn from_inner (inner : ResponseHeaders) -> Self { Self { inner } } # [getter] fn values (& self) -> PyResult < PyObject > { Ok (self . inner . values . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimitUsage { inner : venues :: RateLimitUsage , } # [pymethods] impl RateLimitUsage { # [staticmethod] fn from_inner (inner : RateLimitUsage) -> Self { Self { inner } } # [getter] fn raw_request_timestamps (& self) -> PyResult < PyObject > { Ok (self . inner . raw_request_timestamps . clone () . into ()) } # [getter] fn order_timestamps_10s (& self) -> PyResult < PyObject > { Ok (self . inner . order_timestamps_10s . clone () . into ()) } # [getter] fn order_timestamps_1m (& self) -> PyResult < PyObject > { Ok (self . inner . order_timestamps_1m . clone () . into ()) } # [getter] fn order_timestamps_1d (& self) -> PyResult < PyObject > { Ok (self . inner . order_timestamps_1d . clone () . into ()) } # [getter] fn used_weight_1m (& self) -> PyResult < u64 > { Ok (self . inner . used_weight_1m . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimiter { inner : venues :: RateLimiter , } # [pymethods] impl RateLimiter { # [staticmethod] fn from_inner (inner : RateLimiter) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct RestResponse { inner : venues :: RestResponse , } # [pymethods] impl RestResponse { # [staticmethod] fn from_inner (inner : RestResponse) -> Self { Self { inner } } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } # [getter] fn headers (& self) -> PyResult < PyObject > { Ok (self . inner . headers . clone () . into ()) } # [getter] fn request_duration (& self) -> PyResult < PyObject > { Ok (self . inner . request_duration . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum OrderSide { Buy , Sell , } # [pyclass] # [derive (Clone)] pub enum PositionSide { Both , Long , Short , } # [pyclass] # [derive (Clone)] pub enum OrderType { Limit , Market , Stop , StopMarket , TakeProfit , TakeProfitMarket , TrailingStopMarket , } # [pyclass] # [derive (Clone)] pub enum TimeInForce { GTC , IOC , FOK , GTX , GTD , } # [pyclass] # [derive (Clone)] pub enum WorkingType { MarkPrice , ContractPrice , } # [pyclass] # [derive (Clone)] pub enum OrderStatus { New , PartiallyFilled , Filled , Canceled , Expired , } # [pyclass] # [derive (Clone)] pub enum OrderResponseType { Ack , Result , } # [pyclass] # [derive (Clone)] pub enum SelfTradePreventionMode { None , ExpireTaker , ExpireMaker , ExpireBoth , } # [pyclass] # [derive (Clone)] pub enum IncomeType { Transfer , WelcomeBonus , RealizedPnl , FundingFee , Commission , InsuranceClear , ReferralKickback , CommissionRebate , ApiRebate , ContReward , UsdVsTokenSettlement , FeeReward , TokenReward , TransferIn , TransferOut , } # [pyclass] # [derive (Clone)] pub enum MarginType { Cross , Isolated , } # [pyclass] # [derive (Clone)] pub enum WebSocketEventType { DepthUpdate , } # [pyclass] # [derive (Clone)] pub enum ExchangeFilterType { ExchangeMaxNumOrders , ExchangeMaxNumAlgoOrders , } # [pyclass] # [derive (Clone)] pub enum SymbolStatus { PreTrading , Trading , PostTrading , EndOfDay , Halt , AuctionMatch , Break , } # [pyclass] # [derive (Clone)] pub enum SymbolType { DeliveryContract , PerpetualContract , } # [pyclass] # [derive (Clone)] pub enum ContractType { Perpetual , CurrentQuarter , NextQuarter , CurrentQuarterDelivering , NextQuarterDelivering , PerpetualDelivering , } # [pyclass] # [derive (Clone)] pub enum ContractStatus { PendingTrading , Trading , PreDelivering , Delivering , Delivered , Settling , } # [pyclass] # [derive (Clone)] pub enum UnderlyingType { Coin , Index , } # [pyclass] # [derive (Clone)] pub enum SymbolFilterType { PriceFilter , LotSizeFilter , MinNotionalFilter , MaxNumOrdersFilter , MaxNumAlgoOrdersFilter , PercentPriceFilter , MaxPositionFilter , TrailingDataFilter , } # [pyclass] # [derive (Clone)] pub enum PriceMatch { None , Opponent , Opponent5 , Opponent10 , Opponent20 , Queue , Queue5 , Queue10 , Queue20 , } # [pyclass] # [derive (Clone)] pub enum KlineInterval { I1m , I3m , I5m , I15m , I30m , I1h , I2h , I4h , I6h , I8h , I12h , I1d , I3d , I1w , I1M , } # [pyclass] # [derive (Clone)] pub enum Period { I5m , I15m , I30m , I1h , I2h , I4h , I6h , I12h , I1d , } # [pyclass] # [derive (Clone)] pub enum AmendmentType { Price , Quantity , Both , } # [pyclass] # [derive (Clone)] pub enum AmendmentStatus { Success , Failed , } # [pyclass] # [derive (Clone)] pub enum CountDownTimeUnit { Milliseconds , } # [pyclass] # [derive (Clone)] pub enum AutoCloseType { Liquidation , Adl , } # [pyclass] # [derive (Clone)] pub enum PositionMode { True , False , } # [pyclass] # [derive (Clone)] pub enum MarginAction { Add , Reduce , } # [pyclass] # [derive (Clone)] pub enum AccountStatus { Normal , Margin , ReduceOnly , } # [pyclass] # [derive (Clone)] pub enum TradingStatus { Enabled , Disabled , } # [pyclass] # [derive (Clone)] pub enum BooleanStatus { True , False , } # [pyclass] # [derive (Clone)] pub enum MarginAsset { Usdt , Usdc , Fdusd , Bfusd , Bnfcr , Ldusdt , Btc , Bnb , Eth , } # [pyclass] # [derive (Clone)] pub struct ResponseHeaders { inner : venues :: ResponseHeaders , } # [pymethods] impl ResponseHeaders { # [staticmethod] fn from_inner (inner : ResponseHeaders) -> Self { Self { inner } } # [getter] fn values (& self) -> PyResult < PyObject > { Ok (self . inner . values . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RestResponse { inner : venues :: RestResponse , } # [pymethods] impl RestResponse { # [staticmethod] fn from_inner (inner : RestResponse) -> Self { Self { inner } } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } # [getter] fn request_duration (& self) -> PyResult < PyObject > { Ok (self . inner . request_duration . clone () . into ()) } # [getter] fn headers (& self) -> PyResult < PyObject > { Ok (self . inner . headers . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AggTradesRequest { inner : venues :: AggTradesRequest , } # [pymethods] impl AggTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn from_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AggTrade { inner : venues :: AggTrade , } # [pymethods] impl AggTrade { # [staticmethod] fn from_inner (inner : AggTrade) -> Self { Self { inner } } # [getter] fn agg_trade_id (& self) -> PyResult < u64 > { Ok (self . inner . agg_trade_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < String > { Ok (self . inner . qty . clone () . into ()) } # [getter] fn first_trade_id (& self) -> PyResult < u64 > { Ok (self . inner . first_trade_id . clone () . into ()) } # [getter] fn last_trade_id (& self) -> PyResult < u64 > { Ok (self . inner . last_trade_id . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn is_buyer_maker (& self) -> PyResult < bool > { Ok (self . inner . is_buyer_maker . clone () . into ()) } } # [pymethods] impl RestClient { fn get_agg_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_agg_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct OpenInterestRequest { inner : venues :: OpenInterestRequest , } # [pymethods] impl OpenInterestRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } } # [pymethods] impl RestClient { fn get_open_interest <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_open_interest () . await }) } } # [pyclass] # [derive (Clone)] pub struct TakerLongShortRatioRequest { inner : venues :: TakerLongShortRatioRequest , } # [pymethods] impl TakerLongShortRatioRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn period (& self) -> PyResult < PyObject > { Ok (self . inner . period . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TakerLongShortRatioResponse { inner : venues :: TakerLongShortRatioResponse , } # [pymethods] impl TakerLongShortRatioResponse { # [staticmethod] fn from_inner (inner : TakerLongShortRatioResponse) -> Self { Self { inner } } # [getter] fn buy_sell_ratio (& self) -> PyResult < PyObject > { Ok (self . inner . buy_sell_ratio . clone () . into ()) } # [getter] fn buy_vol (& self) -> PyResult < PyObject > { Ok (self . inner . buy_vol . clone () . into ()) } # [getter] fn sell_vol (& self) -> PyResult < PyObject > { Ok (self . inner . sell_vol . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < PyObject > { Ok (self . inner . timestamp . clone () . into ()) } } # [pymethods] impl RestClient { fn taker_long_short_ratio <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . taker_long_short_ratio () . await }) } } # [pyclass] # [derive (Clone)] pub struct AssetIndexRequest { inner : venues :: AssetIndexRequest , } # [pymethods] impl AssetIndexRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pymethods] impl RestClient { fn get_asset_index <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_asset_index () . await }) } } # [pyclass] # [derive (Clone)] pub struct PremiumIndexRequest { inner : venues :: PremiumIndexRequest , } # [pymethods] impl PremiumIndexRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PremiumIndexResponse { inner : venues :: PremiumIndexResponse , } # [pymethods] impl PremiumIndexResponse { # [staticmethod] fn from_inner (inner : PremiumIndexResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn mark_price (& self) -> PyResult < PyObject > { Ok (self . inner . mark_price . clone () . into ()) } # [getter] fn index_price (& self) -> PyResult < PyObject > { Ok (self . inner . index_price . clone () . into ()) } # [getter] fn estimated_settle_price (& self) -> PyResult < PyObject > { Ok (self . inner . estimated_settle_price . clone () . into ()) } # [getter] fn last_funding_rate (& self) -> PyResult < PyObject > { Ok (self . inner . last_funding_rate . clone () . into ()) } # [getter] fn interest_rate (& self) -> PyResult < PyObject > { Ok (self . inner . interest_rate . clone () . into ()) } # [getter] fn next_funding_time (& self) -> PyResult < u64 > { Ok (self . inner . next_funding_time . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum PremiumIndexResult { Single , Multiple , } # [pymethods] impl RestClient { fn premium_index <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . premium_index () . await }) } } # [pyclass] # [derive (Clone)] pub struct Symbol { inner : venues :: Symbol , } # [pymethods] impl Symbol { # [staticmethod] fn from_inner (inner : Symbol) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn contract_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . contract_type . clone () . into ()) } # [getter] fn delivery_date (& self) -> PyResult < i64 > { Ok (self . inner . delivery_date . clone () . into ()) } # [getter] fn onboard_date (& self) -> PyResult < i64 > { Ok (self . inner . onboard_date . clone () . into ()) } # [getter] fn contract_status (& self) -> PyResult < PyObject > { Ok (self . inner . contract_status . clone () . into ()) } # [getter] fn contract_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . contract_size . clone () . into ()) } # [getter] fn margin_asset (& self) -> PyResult < PyObject > { Ok (self . inner . margin_asset . clone () . into ()) } # [getter] fn maint_margin_percent (& self) -> PyResult < String > { Ok (self . inner . maint_margin_percent . clone () . into ()) } # [getter] fn required_margin_percent (& self) -> PyResult < String > { Ok (self . inner . required_margin_percent . clone () . into ()) } # [getter] fn base_asset (& self) -> PyResult < String > { Ok (self . inner . base_asset . clone () . into ()) } # [getter] fn quote_asset (& self) -> PyResult < PyObject > { Ok (self . inner . quote_asset . clone () . into ()) } # [getter] fn price_precision (& self) -> PyResult < i64 > { Ok (self . inner . price_precision . clone () . into ()) } # [getter] fn quantity_precision (& self) -> PyResult < i64 > { Ok (self . inner . quantity_precision . clone () . into ()) } # [getter] fn base_asset_precision (& self) -> PyResult < i64 > { Ok (self . inner . base_asset_precision . clone () . into ()) } # [getter] fn quote_precision (& self) -> PyResult < i64 > { Ok (self . inner . quote_precision . clone () . into ()) } # [getter] fn equal_qty_precision (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . equal_qty_precision . clone () . into ()) } # [getter] fn max_move_order_limit (& self) -> PyResult < i64 > { Ok (self . inner . max_move_order_limit . clone () . into ()) } # [getter] fn trigger_protect (& self) -> PyResult < String > { Ok (self . inner . trigger_protect . clone () . into ()) } # [getter] fn underlying_type (& self) -> PyResult < PyObject > { Ok (self . inner . underlying_type . clone () . into ()) } # [getter] fn underlying_sub_type (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . underlying_sub_type . clone () . into ()) } # [getter] fn filters (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . filters . clone () . into ()) } # [getter] fn order_types (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_types . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn liquidation_fee (& self) -> PyResult < String > { Ok (self . inner . liquidation_fee . clone () . into ()) } # [getter] fn market_take_bound (& self) -> PyResult < String > { Ok (self . inner . market_take_bound . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PriceFilter { inner : venues :: PriceFilter , } # [pymethods] impl PriceFilter { # [staticmethod] fn from_inner (inner : PriceFilter) -> Self { Self { inner } } # [getter] fn min_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . min_price . clone () . into ()) } # [getter] fn max_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_price . clone () . into ()) } # [getter] fn tick_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tick_size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct LotSizeFilter { inner : venues :: LotSizeFilter , } # [pymethods] impl LotSizeFilter { # [staticmethod] fn from_inner (inner : LotSizeFilter) -> Self { Self { inner } } # [getter] fn max_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_qty . clone () . into ()) } # [getter] fn min_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . min_qty . clone () . into ()) } # [getter] fn step_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . step_size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MarketLotSizeFilter { inner : venues :: MarketLotSizeFilter , } # [pymethods] impl MarketLotSizeFilter { # [staticmethod] fn from_inner (inner : MarketLotSizeFilter) -> Self { Self { inner } } # [getter] fn max_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_qty . clone () . into ()) } # [getter] fn min_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . min_qty . clone () . into ()) } # [getter] fn step_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . step_size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MaxNumOrdersFilter { inner : venues :: MaxNumOrdersFilter , } # [pymethods] impl MaxNumOrdersFilter { # [staticmethod] fn from_inner (inner : MaxNumOrdersFilter) -> Self { Self { inner } } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MaxNumAlgoOrdersFilter { inner : venues :: MaxNumAlgoOrdersFilter , } # [pymethods] impl MaxNumAlgoOrdersFilter { # [staticmethod] fn from_inner (inner : MaxNumAlgoOrdersFilter) -> Self { Self { inner } } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PercentPriceFilter { inner : venues :: PercentPriceFilter , } # [pymethods] impl PercentPriceFilter { # [staticmethod] fn from_inner (inner : PercentPriceFilter) -> Self { Self { inner } } # [getter] fn multiplier_up (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . multiplier_up . clone () . into ()) } # [getter] fn multiplier_down (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . multiplier_down . clone () . into ()) } # [getter] fn multiplier_decimal (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . multiplier_decimal . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum Filter { PriceFilter , LotSizeFilter , MarketLotSizeFilter , MaxNumOrdersFilter , MaxNumAlgoOrdersFilter , PercentPriceFilter , Unknown , } # [pyclass] # [derive (Clone)] pub enum FilterType { LotSize , MarketLotSize , MaxNumAlgoOrders , MaxNumOrders , PercentPrice , PriceFilter , } # [pyclass] # [derive (Clone)] pub enum QuoteAsset { Usdt , Usdc , Fdusd , Bfusd , Bnfcr , Ldusdt , Btc , } # [pyclass] # [derive (Clone)] pub struct ExchangeInfoResponse { inner : venues :: ExchangeInfoResponse , } # [pymethods] impl ExchangeInfoResponse { # [staticmethod] fn from_inner (inner : ExchangeInfoResponse) -> Self { Self { inner } } # [getter] fn timezone (& self) -> PyResult < String > { Ok (self . inner . timezone . clone () . into ()) } # [getter] fn rate_limits (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . rate_limits . clone () . into ()) } # [getter] fn exchange_filters (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . exchange_filters . clone () . into ()) } # [getter] fn assets (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . assets . clone () . into ()) } # [getter] fn symbols (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . symbols . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimit { inner : venues :: RateLimit , } # [pymethods] impl RateLimit { # [staticmethod] fn from_inner (inner : RateLimit) -> Self { Self { inner } } # [getter] fn rate_limit_type (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limit_type . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn interval_num (& self) -> PyResult < u64 > { Ok (self . inner . interval_num . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < u64 > { Ok (self . inner . limit . clone () . into ()) } } # [pymethods] impl RestClient { fn get_exchange_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_exchange_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn base_url (& self) -> PyResult < PyObject > { Ok (self . inner . base_url . clone () . into ()) } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn rate_limiter (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limiter . clone () . into ()) } } # [pymethods] impl RestClient { fn send_request <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . send_request () . await }) } } # [pyclass] # [derive (Clone)] pub struct OpenInterestHistRequest { inner : venues :: OpenInterestHistRequest , } # [pymethods] impl OpenInterestHistRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn period (& self) -> PyResult < PyObject > { Ok (self . inner . period . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OpenInterestHistResponse { inner : venues :: OpenInterestHistResponse , } # [pymethods] impl OpenInterestHistResponse { # [staticmethod] fn from_inner (inner : OpenInterestHistResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn sum_open_interest (& self) -> PyResult < PyObject > { Ok (self . inner . sum_open_interest . clone () . into ()) } # [getter] fn sum_open_interest_value (& self) -> PyResult < PyObject > { Ok (self . inner . sum_open_interest_value . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < PyObject > { Ok (self . inner . timestamp . clone () . into ()) } } # [pymethods] impl RestClient { fn open_interest_hist <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . open_interest_hist () . await }) } } # [pyclass] # [derive (Clone)] pub struct KlinesRequest { inner : venues :: KlinesRequest , } # [pymethods] impl KlinesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Kline { inner : venues :: Kline , } # [pymethods] impl Kline { # [staticmethod] fn from_inner (inner : Kline) -> Self { Self { inner } } # [getter] fn open_time (& self) -> PyResult < u64 > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn open (& self) -> PyResult < String > { Ok (self . inner . open . clone () . into ()) } # [getter] fn high (& self) -> PyResult < String > { Ok (self . inner . high . clone () . into ()) } # [getter] fn low (& self) -> PyResult < String > { Ok (self . inner . low . clone () . into ()) } # [getter] fn close (& self) -> PyResult < String > { Ok (self . inner . close . clone () . into ()) } # [getter] fn volume (& self) -> PyResult < String > { Ok (self . inner . volume . clone () . into ()) } # [getter] fn close_time (& self) -> PyResult < u64 > { Ok (self . inner . close_time . clone () . into ()) } # [getter] fn quote_asset_volume (& self) -> PyResult < String > { Ok (self . inner . quote_asset_volume . clone () . into ()) } # [getter] fn number_of_trades (& self) -> PyResult < u64 > { Ok (self . inner . number_of_trades . clone () . into ()) } # [getter] fn taker_buy_base_asset_volume (& self) -> PyResult < String > { Ok (self . inner . taker_buy_base_asset_volume . clone () . into ()) } # [getter] fn taker_buy_quote_asset_volume (& self) -> PyResult < String > { Ok (self . inner . taker_buy_quote_asset_volume . clone () . into ()) } # [getter] fn ignore (& self) -> PyResult < String > { Ok (self . inner . ignore . clone () . into ()) } } # [pymethods] impl RestClient { fn get_klines <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_klines () . await }) } } # [pyclass] # [derive (Clone)] pub struct TopLongShortPositionRatioRequest { inner : venues :: TopLongShortPositionRatioRequest , } # [pymethods] impl TopLongShortPositionRatioRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn period (& self) -> PyResult < PyObject > { Ok (self . inner . period . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TopLongShortPositionRatioResponse { inner : venues :: TopLongShortPositionRatioResponse , } # [pymethods] impl TopLongShortPositionRatioResponse { # [staticmethod] fn from_inner (inner : TopLongShortPositionRatioResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn long_short_ratio (& self) -> PyResult < PyObject > { Ok (self . inner . long_short_ratio . clone () . into ()) } # [getter] fn long_account (& self) -> PyResult < PyObject > { Ok (self . inner . long_account . clone () . into ()) } # [getter] fn short_account (& self) -> PyResult < PyObject > { Ok (self . inner . short_account . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < PyObject > { Ok (self . inner . timestamp . clone () . into ()) } } # [pymethods] impl RestClient { fn top_long_short_position_ratio <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . top_long_short_position_ratio () . await }) } } # [pyclass] # [derive (Clone)] pub struct HistoricalTradesRequest { inner : venues :: HistoricalTradesRequest , } # [pymethods] impl HistoricalTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn from_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct HistoricalTrade { inner : venues :: HistoricalTrade , } # [pymethods] impl HistoricalTrade { # [staticmethod] fn from_inner (inner : HistoricalTrade) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < u64 > { Ok (self . inner . id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < String > { Ok (self . inner . qty . clone () . into ()) } # [getter] fn quote_qty (& self) -> PyResult < String > { Ok (self . inner . quote_qty . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn is_buyer_maker (& self) -> PyResult < bool > { Ok (self . inner . is_buyer_maker . clone () . into ()) } } # [pymethods] impl RestClient { fn get_historical_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_historical_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct Ticker24hrRequest { inner : venues :: Ticker24hrRequest , } # [pymethods] impl Ticker24hrRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Ticker24hr { inner : venues :: Ticker24hr , } # [pymethods] impl Ticker24hr { # [staticmethod] fn from_inner (inner : Ticker24hr) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price_change (& self) -> PyResult < String > { Ok (self . inner . price_change . clone () . into ()) } # [getter] fn price_change_percent (& self) -> PyResult < String > { Ok (self . inner . price_change_percent . clone () . into ()) } # [getter] fn weighted_avg_price (& self) -> PyResult < String > { Ok (self . inner . weighted_avg_price . clone () . into ()) } # [getter] fn last_price (& self) -> PyResult < String > { Ok (self . inner . last_price . clone () . into ()) } # [getter] fn last_qty (& self) -> PyResult < String > { Ok (self . inner . last_qty . clone () . into ()) } # [getter] fn open_price (& self) -> PyResult < String > { Ok (self . inner . open_price . clone () . into ()) } # [getter] fn high_price (& self) -> PyResult < String > { Ok (self . inner . high_price . clone () . into ()) } # [getter] fn low_price (& self) -> PyResult < String > { Ok (self . inner . low_price . clone () . into ()) } # [getter] fn volume (& self) -> PyResult < String > { Ok (self . inner . volume . clone () . into ()) } # [getter] fn quote_volume (& self) -> PyResult < String > { Ok (self . inner . quote_volume . clone () . into ()) } # [getter] fn open_time (& self) -> PyResult < u64 > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn close_time (& self) -> PyResult < u64 > { Ok (self . inner . close_time . clone () . into ()) } # [getter] fn first_id (& self) -> PyResult < u64 > { Ok (self . inner . first_id . clone () . into ()) } # [getter] fn last_id (& self) -> PyResult < u64 > { Ok (self . inner . last_id . clone () . into ()) } # [getter] fn count (& self) -> PyResult < u64 > { Ok (self . inner . count . clone () . into ()) } } # [pymethods] impl RestClient { fn get_ticker_24hr <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_ticker_24hr () . await }) } } # [pyclass] # [derive (Clone)] pub struct TickerPriceV2Request { inner : venues :: TickerPriceV2Request , } # [pymethods] impl TickerPriceV2Request { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TickerPriceV2Response { inner : venues :: TickerPriceV2Response , } # [pymethods] impl TickerPriceV2Response { # [staticmethod] fn from_inner (inner : TickerPriceV2Response) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < PyObject > { Ok (self . inner . price . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum TickerPriceV2Result { Single , Multiple , } # [pymethods] impl RestClient { fn ticker_price_v2 <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . ticker_price_v2 () . await }) } } # [pyclass] # [derive (Clone)] pub struct ServerTimeResponse { inner : venues :: ServerTimeResponse , } # [pymethods] impl ServerTimeResponse { # [staticmethod] fn from_inner (inner : ServerTimeResponse) -> Self { Self { inner } } # [getter] fn server_time (& self) -> PyResult < u64 > { Ok (self . inner . server_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_server_time <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_server_time () . await }) } } # [pyclass] # [derive (Clone)] pub struct DeliveryPriceRequest { inner : venues :: DeliveryPriceRequest , } # [pymethods] impl DeliveryPriceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn pair (& self) -> PyResult < PyObject > { Ok (self . inner . pair . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct DeliveryPriceResponse { inner : venues :: DeliveryPriceResponse , } # [pymethods] impl DeliveryPriceResponse { # [staticmethod] fn from_inner (inner : DeliveryPriceResponse) -> Self { Self { inner } } # [getter] fn delivery_time (& self) -> PyResult < u64 > { Ok (self . inner . delivery_time . clone () . into ()) } # [getter] fn delivery_price (& self) -> PyResult < f64 > { Ok (self . inner . delivery_price . clone () . into ()) } } # [pymethods] impl RestClient { fn delivery_price <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . delivery_price () . await }) } } # [pyclass] # [derive (Clone)] pub struct BasisRequest { inner : venues :: BasisRequest , } # [pymethods] impl BasisRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn pair (& self) -> PyResult < PyObject > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn contract_type (& self) -> PyResult < PyObject > { Ok (self . inner . contract_type . clone () . into ()) } # [getter] fn period (& self) -> PyResult < PyObject > { Ok (self . inner . period . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < u64 > { Ok (self . inner . limit . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BasisResponse { inner : venues :: BasisResponse , } # [pymethods] impl BasisResponse { # [staticmethod] fn from_inner (inner : BasisResponse) -> Self { Self { inner } } # [getter] fn index_price (& self) -> PyResult < PyObject > { Ok (self . inner . index_price . clone () . into ()) } # [getter] fn contract_type (& self) -> PyResult < PyObject > { Ok (self . inner . contract_type . clone () . into ()) } # [getter] fn basis_rate (& self) -> PyResult < PyObject > { Ok (self . inner . basis_rate . clone () . into ()) } # [getter] fn futures_price (& self) -> PyResult < PyObject > { Ok (self . inner . futures_price . clone () . into ()) } # [getter] fn annualized_basis_rate (& self) -> PyResult < PyObject > { Ok (self . inner . annualized_basis_rate . clone () . into ()) } # [getter] fn basis (& self) -> PyResult < PyObject > { Ok (self . inner . basis . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < PyObject > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pymethods] impl RestClient { fn basis <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . basis () . await }) } } # [pyclass] # [derive (Clone)] pub struct PremiumIndexKlinesRequest { inner : venues :: PremiumIndexKlinesRequest , } # [pymethods] impl PremiumIndexKlinesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PremiumIndexKline { inner : venues :: PremiumIndexKline , } # [pymethods] impl PremiumIndexKline { # [staticmethod] fn from_inner (inner : PremiumIndexKline) -> Self { Self { inner } } # [getter] fn open_time (& self) -> PyResult < u64 > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn open (& self) -> PyResult < String > { Ok (self . inner . open . clone () . into ()) } # [getter] fn high (& self) -> PyResult < String > { Ok (self . inner . high . clone () . into ()) } # [getter] fn low (& self) -> PyResult < String > { Ok (self . inner . low . clone () . into ()) } # [getter] fn close (& self) -> PyResult < String > { Ok (self . inner . close . clone () . into ()) } # [getter] fn ignore1 (& self) -> PyResult < String > { Ok (self . inner . ignore1 . clone () . into ()) } # [getter] fn close_time (& self) -> PyResult < u64 > { Ok (self . inner . close_time . clone () . into ()) } # [getter] fn ignore2 (& self) -> PyResult < String > { Ok (self . inner . ignore2 . clone () . into ()) } # [getter] fn ignore3 (& self) -> PyResult < u64 > { Ok (self . inner . ignore3 . clone () . into ()) } # [getter] fn ignore4 (& self) -> PyResult < String > { Ok (self . inner . ignore4 . clone () . into ()) } # [getter] fn ignore5 (& self) -> PyResult < String > { Ok (self . inner . ignore5 . clone () . into ()) } # [getter] fn ignore6 (& self) -> PyResult < String > { Ok (self . inner . ignore6 . clone () . into ()) } } # [pymethods] impl RestClient { fn get_premium_index_klines <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_premium_index_klines () . await }) } } # [pyclass] # [derive (Clone)] pub struct IndexPriceKlinesRequest { inner : venues :: IndexPriceKlinesRequest , } # [pymethods] impl IndexPriceKlinesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn pair (& self) -> PyResult < PyObject > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct IndexPriceKline { inner : venues :: IndexPriceKline , } # [pymethods] impl IndexPriceKline { # [staticmethod] fn from_inner (inner : IndexPriceKline) -> Self { Self { inner } } # [getter] fn open_time (& self) -> PyResult < u64 > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn open (& self) -> PyResult < String > { Ok (self . inner . open . clone () . into ()) } # [getter] fn high (& self) -> PyResult < String > { Ok (self . inner . high . clone () . into ()) } # [getter] fn low (& self) -> PyResult < String > { Ok (self . inner . low . clone () . into ()) } # [getter] fn close (& self) -> PyResult < String > { Ok (self . inner . close . clone () . into ()) } # [getter] fn ignore1 (& self) -> PyResult < String > { Ok (self . inner . ignore1 . clone () . into ()) } # [getter] fn close_time (& self) -> PyResult < u64 > { Ok (self . inner . close_time . clone () . into ()) } # [getter] fn ignore2 (& self) -> PyResult < String > { Ok (self . inner . ignore2 . clone () . into ()) } # [getter] fn ignore3 (& self) -> PyResult < u64 > { Ok (self . inner . ignore3 . clone () . into ()) } # [getter] fn ignore4 (& self) -> PyResult < String > { Ok (self . inner . ignore4 . clone () . into ()) } # [getter] fn ignore5 (& self) -> PyResult < String > { Ok (self . inner . ignore5 . clone () . into ()) } # [getter] fn ignore6 (& self) -> PyResult < String > { Ok (self . inner . ignore6 . clone () . into ()) } } # [pymethods] impl RestClient { fn get_index_price_klines <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_index_price_klines () . await }) } } # [pyclass] # [derive (Clone)] pub struct MarkPriceKlinesRequest { inner : venues :: MarkPriceKlinesRequest , } # [pymethods] impl MarkPriceKlinesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MarkPriceKline { inner : venues :: MarkPriceKline , } # [pymethods] impl MarkPriceKline { # [staticmethod] fn from_inner (inner : MarkPriceKline) -> Self { Self { inner } } # [getter] fn open_time (& self) -> PyResult < u64 > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn open (& self) -> PyResult < PyObject > { Ok (self . inner . open . clone () . into ()) } # [getter] fn high (& self) -> PyResult < PyObject > { Ok (self . inner . high . clone () . into ()) } # [getter] fn low (& self) -> PyResult < PyObject > { Ok (self . inner . low . clone () . into ()) } # [getter] fn close (& self) -> PyResult < PyObject > { Ok (self . inner . close . clone () . into ()) } # [getter] fn ignore1 (& self) -> PyResult < PyObject > { Ok (self . inner . ignore1 . clone () . into ()) } # [getter] fn close_time (& self) -> PyResult < u64 > { Ok (self . inner . close_time . clone () . into ()) } # [getter] fn ignore2 (& self) -> PyResult < PyObject > { Ok (self . inner . ignore2 . clone () . into ()) } # [getter] fn ignore3 (& self) -> PyResult < u64 > { Ok (self . inner . ignore3 . clone () . into ()) } # [getter] fn ignore4 (& self) -> PyResult < PyObject > { Ok (self . inner . ignore4 . clone () . into ()) } # [getter] fn ignore5 (& self) -> PyResult < PyObject > { Ok (self . inner . ignore5 . clone () . into ()) } # [getter] fn ignore6 (& self) -> PyResult < PyObject > { Ok (self . inner . ignore6 . clone () . into ()) } } # [pymethods] impl RestClient { fn get_mark_price_klines <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_mark_price_klines () . await }) } } # [pyclass] # [derive (Clone)] pub struct PingResponse { inner : venues :: PingResponse , } # [pymethods] impl PingResponse { # [staticmethod] fn from_inner (inner : PingResponse) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn ping <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . ping () . await }) } } # [pyclass] # [derive (Clone)] pub struct ConstituentsRequest { inner : venues :: ConstituentsRequest , } # [pymethods] impl ConstituentsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ConstituentsResponse { inner : venues :: ConstituentsResponse , } # [pymethods] impl ConstituentsResponse { # [staticmethod] fn from_inner (inner : ConstituentsResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn constituents (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . constituents . clone () . into ()) } } # [pymethods] impl RestClient { fn get_constituents <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_constituents () . await }) } } # [pyclass] # [derive (Clone)] pub struct TopLongShortAccountRatioRequest { inner : venues :: TopLongShortAccountRatioRequest , } # [pymethods] impl TopLongShortAccountRatioRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn period (& self) -> PyResult < PyObject > { Ok (self . inner . period . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TopLongShortAccountRatioResponse { inner : venues :: TopLongShortAccountRatioResponse , } # [pymethods] impl TopLongShortAccountRatioResponse { # [staticmethod] fn from_inner (inner : TopLongShortAccountRatioResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn long_short_ratio (& self) -> PyResult < PyObject > { Ok (self . inner . long_short_ratio . clone () . into ()) } # [getter] fn long_account (& self) -> PyResult < PyObject > { Ok (self . inner . long_account . clone () . into ()) } # [getter] fn short_account (& self) -> PyResult < PyObject > { Ok (self . inner . short_account . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < PyObject > { Ok (self . inner . timestamp . clone () . into ()) } } # [pymethods] impl RestClient { fn top_long_short_account_ratio <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . top_long_short_account_ratio () . await }) } } # [pyclass] # [derive (Clone)] pub struct FundingRateInfo { inner : venues :: FundingRateInfo , } # [pymethods] impl FundingRateInfo { # [staticmethod] fn from_inner (inner : FundingRateInfo) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn adjusted_funding_rate_cap (& self) -> PyResult < PyObject > { Ok (self . inner . adjusted_funding_rate_cap . clone () . into ()) } # [getter] fn adjusted_funding_rate_floor (& self) -> PyResult < PyObject > { Ok (self . inner . adjusted_funding_rate_floor . clone () . into ()) } # [getter] fn funding_interval_hours (& self) -> PyResult < u64 > { Ok (self . inner . funding_interval_hours . clone () . into ()) } } # [pymethods] impl RestClient { fn get_funding_rate_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_funding_rate_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct MarkPriceRequest { inner : venues :: MarkPriceRequest , } # [pymethods] impl MarkPriceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pymethods] impl RestClient { fn get_mark_price <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_mark_price () . await }) } } # [pyclass] # [derive (Clone)] pub struct IndexInfoRequest { inner : venues :: IndexInfoRequest , } # [pymethods] impl IndexInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct IndexInfo { inner : venues :: IndexInfo , } # [pymethods] impl IndexInfo { # [staticmethod] fn from_inner (inner : IndexInfo) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn component (& self) -> PyResult < PyObject > { Ok (self . inner . component . clone () . into ()) } # [getter] fn base_asset_list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . base_asset_list . clone () . into ()) } } # [pymethods] impl RestClient { fn get_index_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_index_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct OrderBookRequest { inner : venues :: OrderBookRequest , } # [pymethods] impl OrderBookRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderBookResponse { inner : venues :: OrderBookResponse , } # [pymethods] impl OrderBookResponse { # [staticmethod] fn from_inner (inner : OrderBookResponse) -> Self { Self { inner } } # [getter] fn last_update_id (& self) -> PyResult < u64 > { Ok (self . inner . last_update_id . clone () . into ()) } # [getter] fn event_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . event_time . clone () . into ()) } # [getter] fn transaction_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . transaction_time . clone () . into ()) } # [getter] fn bids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . bids . clone () . into ()) } # [getter] fn asks (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . asks . clone () . into ()) } } # [pymethods] impl RestClient { fn get_order_book <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_order_book () . await }) } } # [pyclass] # [derive (Clone)] pub struct BookTickerRequest { inner : venues :: BookTickerRequest , } # [pymethods] impl BookTickerRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BookTicker { inner : venues :: BookTicker , } # [pymethods] impl BookTicker { # [staticmethod] fn from_inner (inner : BookTicker) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn bid_price (& self) -> PyResult < String > { Ok (self . inner . bid_price . clone () . into ()) } # [getter] fn bid_qty (& self) -> PyResult < String > { Ok (self . inner . bid_qty . clone () . into ()) } # [getter] fn ask_price (& self) -> PyResult < String > { Ok (self . inner . ask_price . clone () . into ()) } # [getter] fn ask_qty (& self) -> PyResult < String > { Ok (self . inner . ask_qty . clone () . into ()) } # [getter] fn time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_book_ticker <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_book_ticker () . await }) } } # [pyclass] # [derive (Clone)] pub struct GlobalLongShortAccountRatioResponse { inner : venues :: GlobalLongShortAccountRatioResponse , } # [pymethods] impl GlobalLongShortAccountRatioResponse { # [staticmethod] fn from_inner (inner : GlobalLongShortAccountRatioResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn long_short_ratio (& self) -> PyResult < PyObject > { Ok (self . inner . long_short_ratio . clone () . into ()) } # [getter] fn long_account (& self) -> PyResult < PyObject > { Ok (self . inner . long_account . clone () . into ()) } # [getter] fn short_account (& self) -> PyResult < PyObject > { Ok (self . inner . short_account . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < PyObject > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GlobalLongShortAccountRatioRequest { inner : venues :: GlobalLongShortAccountRatioRequest , } # [pymethods] impl GlobalLongShortAccountRatioRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn period (& self) -> PyResult < PyObject > { Ok (self . inner . period . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pymethods] impl RestClient { fn global_long_short_account_ratio <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . global_long_short_account_ratio () . await }) } } # [pyclass] # [derive (Clone)] pub struct FundingRateHistoryRequest { inner : venues :: FundingRateHistoryRequest , } # [pymethods] impl FundingRateHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct FundingRateHistory { inner : venues :: FundingRateHistory , } # [pymethods] impl FundingRateHistory { # [staticmethod] fn from_inner (inner : FundingRateHistory) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn funding_rate (& self) -> PyResult < String > { Ok (self . inner . funding_rate . clone () . into ()) } # [getter] fn funding_time (& self) -> PyResult < u64 > { Ok (self . inner . funding_time . clone () . into ()) } # [getter] fn mark_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . mark_price . clone () . into ()) } } # [pymethods] impl RestClient { fn get_funding_rate_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_funding_rate_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct RecentTradesRequest { inner : venues :: RecentTradesRequest , } # [pymethods] impl RecentTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RecentTrade { inner : venues :: RecentTrade , } # [pymethods] impl RecentTrade { # [staticmethod] fn from_inner (inner : RecentTrade) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < u64 > { Ok (self . inner . id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < String > { Ok (self . inner . qty . clone () . into ()) } # [getter] fn quote_qty (& self) -> PyResult < String > { Ok (self . inner . quote_qty . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn is_buyer_maker (& self) -> PyResult < bool > { Ok (self . inner . is_buyer_maker . clone () . into ()) } } # [pymethods] impl RestClient { fn get_recent_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_recent_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct ContinuousKlinesRequest { inner : venues :: ContinuousKlinesRequest , } # [pymethods] impl ContinuousKlinesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn pair (& self) -> PyResult < PyObject > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn contract_type (& self) -> PyResult < PyObject > { Ok (self . inner . contract_type . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ContinuousKline { inner : venues :: ContinuousKline , } # [pymethods] impl ContinuousKline { # [staticmethod] fn from_inner (inner : ContinuousKline) -> Self { Self { inner } } # [getter] fn open_time (& self) -> PyResult < u64 > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn open (& self) -> PyResult < String > { Ok (self . inner . open . clone () . into ()) } # [getter] fn high (& self) -> PyResult < String > { Ok (self . inner . high . clone () . into ()) } # [getter] fn low (& self) -> PyResult < String > { Ok (self . inner . low . clone () . into ()) } # [getter] fn close (& self) -> PyResult < String > { Ok (self . inner . close . clone () . into ()) } # [getter] fn volume (& self) -> PyResult < String > { Ok (self . inner . volume . clone () . into ()) } # [getter] fn close_time (& self) -> PyResult < u64 > { Ok (self . inner . close_time . clone () . into ()) } # [getter] fn quote_asset_volume (& self) -> PyResult < String > { Ok (self . inner . quote_asset_volume . clone () . into ()) } # [getter] fn number_of_trades (& self) -> PyResult < u64 > { Ok (self . inner . number_of_trades . clone () . into ()) } # [getter] fn taker_buy_base_asset_volume (& self) -> PyResult < String > { Ok (self . inner . taker_buy_base_asset_volume . clone () . into ()) } # [getter] fn taker_buy_quote_asset_volume (& self) -> PyResult < String > { Ok (self . inner . taker_buy_quote_asset_volume . clone () . into ()) } # [getter] fn ignore (& self) -> PyResult < String > { Ok (self . inner . ignore . clone () . into ()) } } # [pymethods] impl RestClient { fn get_continuous_klines <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_continuous_klines () . await }) } } # [pyclass] # [derive (Clone)] pub struct TickerPriceRequest { inner : venues :: TickerPriceRequest , } # [pymethods] impl TickerPriceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TickerPrice { inner : venues :: TickerPrice , } # [pymethods] impl TickerPrice { # [staticmethod] fn from_inner (inner : TickerPrice) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_ticker_price <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_ticker_price () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetCommissionRateRequest { inner : venues :: GetCommissionRateRequest , } # [pymethods] impl GetCommissionRateRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CommissionRateResponse { inner : venues :: CommissionRateResponse , } # [pymethods] impl CommissionRateResponse { # [staticmethod] fn from_inner (inner : CommissionRateResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn maker_commission_rate (& self) -> PyResult < String > { Ok (self . inner . maker_commission_rate . clone () . into ()) } # [getter] fn taker_commission_rate (& self) -> PyResult < String > { Ok (self . inner . taker_commission_rate . clone () . into ()) } } # [pymethods] impl RestClient { fn get_commission_rate <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_commission_rate () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAccountConfigRequest { inner : venues :: GetAccountConfigRequest , } # [pymethods] impl GetAccountConfigRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountConfigResponse { inner : venues :: AccountConfigResponse , } # [pymethods] impl AccountConfigResponse { # [staticmethod] fn from_inner (inner : AccountConfigResponse) -> Self { Self { inner } } # [getter] fn fee_tier (& self) -> PyResult < u64 > { Ok (self . inner . fee_tier . clone () . into ()) } # [getter] fn can_trade (& self) -> PyResult < bool > { Ok (self . inner . can_trade . clone () . into ()) } # [getter] fn can_deposit (& self) -> PyResult < bool > { Ok (self . inner . can_deposit . clone () . into ()) } # [getter] fn can_withdraw (& self) -> PyResult < bool > { Ok (self . inner . can_withdraw . clone () . into ()) } # [getter] fn fee_burn (& self) -> PyResult < bool > { Ok (self . inner . fee_burn . clone () . into ()) } # [getter] fn multi_assets_margin (& self) -> PyResult < bool > { Ok (self . inner . multi_assets_margin . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_config <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_config () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetPortfolioMarginAccountRequest { inner : venues :: GetPortfolioMarginAccountRequest , } # [pymethods] impl GetPortfolioMarginAccountRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn asset (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . asset . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PortfolioMarginPosition { inner : venues :: PortfolioMarginPosition , } # [pymethods] impl PortfolioMarginPosition { # [staticmethod] fn from_inner (inner : PortfolioMarginPosition) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn initial_margin (& self) -> PyResult < String > { Ok (self . inner . initial_margin . clone () . into ()) } # [getter] fn maint_margin (& self) -> PyResult < String > { Ok (self . inner . maint_margin . clone () . into ()) } # [getter] fn unrealized_profit (& self) -> PyResult < String > { Ok (self . inner . unrealized_profit . clone () . into ()) } # [getter] fn position_initial_margin (& self) -> PyResult < String > { Ok (self . inner . position_initial_margin . clone () . into ()) } # [getter] fn open_order_initial_margin (& self) -> PyResult < String > { Ok (self . inner . open_order_initial_margin . clone () . into ()) } # [getter] fn leverage (& self) -> PyResult < String > { Ok (self . inner . leverage . clone () . into ()) } # [getter] fn isolated (& self) -> PyResult < bool > { Ok (self . inner . isolated . clone () . into ()) } # [getter] fn entry_price (& self) -> PyResult < String > { Ok (self . inner . entry_price . clone () . into ()) } # [getter] fn breakeven_price (& self) -> PyResult < String > { Ok (self . inner . breakeven_price . clone () . into ()) } # [getter] fn max_notional (& self) -> PyResult < String > { Ok (self . inner . max_notional . clone () . into ()) } # [getter] fn bid_notional (& self) -> PyResult < String > { Ok (self . inner . bid_notional . clone () . into ()) } # [getter] fn ask_notional (& self) -> PyResult < String > { Ok (self . inner . ask_notional . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn position_amt (& self) -> PyResult < String > { Ok (self . inner . position_amt . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PortfolioMarginAccountResponse { inner : venues :: PortfolioMarginAccountResponse , } # [pymethods] impl PortfolioMarginAccountResponse { # [staticmethod] fn from_inner (inner : PortfolioMarginAccountResponse) -> Self { Self { inner } } # [getter] fn total_wallet_balance (& self) -> PyResult < String > { Ok (self . inner . total_wallet_balance . clone () . into ()) } # [getter] fn total_unrealized_profit (& self) -> PyResult < String > { Ok (self . inner . total_unrealized_profit . clone () . into ()) } # [getter] fn total_margin_balance (& self) -> PyResult < String > { Ok (self . inner . total_margin_balance . clone () . into ()) } # [getter] fn total_position_initial_margin (& self) -> PyResult < String > { Ok (self . inner . total_position_initial_margin . clone () . into ()) } # [getter] fn total_open_order_initial_margin (& self) -> PyResult < String > { Ok (self . inner . total_open_order_initial_margin . clone () . into ()) } # [getter] fn total_cross_wallet_balance (& self) -> PyResult < String > { Ok (self . inner . total_cross_wallet_balance . clone () . into ()) } # [getter] fn total_cross_un_pnl (& self) -> PyResult < String > { Ok (self . inner . total_cross_un_pnl . clone () . into ()) } # [getter] fn available_balance (& self) -> PyResult < String > { Ok (self . inner . available_balance . clone () . into ()) } # [getter] fn max_withdraw_amount (& self) -> PyResult < String > { Ok (self . inner . max_withdraw_amount . clone () . into ()) } # [getter] fn assets (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . assets . clone () . into ()) } # [getter] fn positions (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . positions . clone () . into ()) } } # [pymethods] impl RestClient { fn get_portfolio_margin_account <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_portfolio_margin_account () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetIncomeDownloadIdRequest { inner : venues :: GetIncomeDownloadIdRequest , } # [pymethods] impl GetIncomeDownloadIdRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn start_time (& self) -> PyResult < u64 > { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < u64 > { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct IncomeDownloadIdResponse { inner : venues :: IncomeDownloadIdResponse , } # [pymethods] impl IncomeDownloadIdResponse { # [staticmethod] fn from_inner (inner : IncomeDownloadIdResponse) -> Self { Self { inner } } # [getter] fn avg_cost_timestamp (& self) -> PyResult < String > { Ok (self . inner . avg_cost_timestamp . clone () . into ()) } # [getter] fn download_id (& self) -> PyResult < String > { Ok (self . inner . download_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetIncomeDownloadLinkRequest { inner : venues :: GetIncomeDownloadLinkRequest , } # [pymethods] impl GetIncomeDownloadLinkRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn download_id (& self) -> PyResult < String > { Ok (self . inner . download_id . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum DownloadStatus { Completed , Processing , Failed , } # [pyclass] # [derive (Clone)] pub struct IncomeDownloadLinkResponse { inner : venues :: IncomeDownloadLinkResponse , } # [pymethods] impl IncomeDownloadLinkResponse { # [staticmethod] fn from_inner (inner : IncomeDownloadLinkResponse) -> Self { Self { inner } } # [getter] fn download_link (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . download_link . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } } # [pymethods] impl RestClient { fn get_income_download_id <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_income_download_id () . await }) } fn get_income_download_link <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_income_download_link () . await }) } } # [pyclass] # [derive (Clone)] pub struct PositionRiskErrorResponse { inner : venues :: PositionRiskErrorResponse , } # [pymethods] impl PositionRiskErrorResponse { # [staticmethod] fn from_inner (inner : PositionRiskErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetPositionRiskRequest { inner : venues :: GetPositionRiskRequest , } # [pymethods] impl GetPositionRiskRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PositionRisk { inner : venues :: PositionRisk , } # [pymethods] impl PositionRisk { # [staticmethod] fn from_inner (inner : PositionRisk) -> Self { Self { inner } } # [getter] fn entry_price (& self) -> PyResult < PyObject > { Ok (self . inner . entry_price . clone () . into ()) } # [getter] fn margin_type (& self) -> PyResult < PyObject > { Ok (self . inner . margin_type . clone () . into ()) } # [getter] fn is_auto_add_margin (& self) -> PyResult < bool > { Ok (self . inner . is_auto_add_margin . clone () . into ()) } # [getter] fn isolated_margin (& self) -> PyResult < PyObject > { Ok (self . inner . isolated_margin . clone () . into ()) } # [getter] fn leverage (& self) -> PyResult < PyObject > { Ok (self . inner . leverage . clone () . into ()) } # [getter] fn liquidation_price (& self) -> PyResult < PyObject > { Ok (self . inner . liquidation_price . clone () . into ()) } # [getter] fn mark_price (& self) -> PyResult < PyObject > { Ok (self . inner . mark_price . clone () . into ()) } # [getter] fn max_notional_value (& self) -> PyResult < PyObject > { Ok (self . inner . max_notional_value . clone () . into ()) } # [getter] fn position_amt (& self) -> PyResult < PyObject > { Ok (self . inner . position_amt . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn un_realized_profit (& self) -> PyResult < PyObject > { Ok (self . inner . un_realized_profit . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } } # [pymethods] impl RestClient { fn get_position_risk <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_position_risk () . await }) } } # [pyclass] # [derive (Clone)] pub struct ChangePositionModeRequest { inner : venues :: ChangePositionModeRequest , } # [pymethods] impl ChangePositionModeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn dual_side_position (& self) -> PyResult < PyObject > { Ok (self . inner . dual_side_position . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ChangePositionModeResponse { inner : venues :: ChangePositionModeResponse , } # [pymethods] impl ChangePositionModeResponse { # [staticmethod] fn from_inner (inner : ChangePositionModeResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pymethods] impl RestClient { fn change_position_mode <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . change_position_mode () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOrderDownloadIdRequest { inner : venues :: GetOrderDownloadIdRequest , } # [pymethods] impl GetOrderDownloadIdRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn start_time (& self) -> PyResult < u64 > { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < u64 > { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderDownloadIdResponse { inner : venues :: OrderDownloadIdResponse , } # [pymethods] impl OrderDownloadIdResponse { # [staticmethod] fn from_inner (inner : OrderDownloadIdResponse) -> Self { Self { inner } } # [getter] fn avg_cost_timestamp (& self) -> PyResult < String > { Ok (self . inner . avg_cost_timestamp . clone () . into ()) } # [getter] fn download_id (& self) -> PyResult < String > { Ok (self . inner . download_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetOrderDownloadLinkRequest { inner : venues :: GetOrderDownloadLinkRequest , } # [pymethods] impl GetOrderDownloadLinkRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn download_id (& self) -> PyResult < String > { Ok (self . inner . download_id . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum DownloadStatus { Completed , Processing , Failed , } # [pyclass] # [derive (Clone)] pub struct OrderDownloadLinkResponse { inner : venues :: OrderDownloadLinkResponse , } # [pymethods] impl OrderDownloadLinkResponse { # [staticmethod] fn from_inner (inner : OrderDownloadLinkResponse) -> Self { Self { inner } } # [getter] fn download_link (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . download_link . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } } # [pymethods] impl RestClient { fn get_order_download_id <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_order_download_id () . await }) } fn get_order_download_link <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_order_download_link () . await }) } } # [pyclass] # [derive (Clone)] pub struct AllOrdersErrorResponse { inner : venues :: AllOrdersErrorResponse , } # [pymethods] impl AllOrdersErrorResponse { # [staticmethod] fn from_inner (inner : AllOrdersErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetAllOrdersRequest { inner : venues :: GetAllOrdersRequest , } # [pymethods] impl GetAllOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AllOrder { inner : venues :: AllOrder , } # [pymethods] impl AllOrder { # [staticmethod] fn from_inner (inner : AllOrder) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < PyObject > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < PyObject > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < PyObject > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < PyObject > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < PyObject > { Ok (self . inner . working_type . clone () . into ()) } } # [pymethods] impl RestClient { fn get_all_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_all_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct OrderErrorResponse { inner : venues :: OrderErrorResponse , } # [pymethods] impl OrderErrorResponse { # [staticmethod] fn from_inner (inner : OrderErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct NewOrderRequest { inner : venues :: NewOrderRequest , } # [pymethods] impl NewOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn new_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_client_order_id . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn close_position (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . close_position . clone () . into ()) } # [getter] fn activation_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . activation_price . clone () . into ()) } # [getter] fn callback_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . callback_rate . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn price_protect (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_protect . clone () . into ()) } # [getter] fn new_order_resp_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_order_resp_type . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct NewOrderResponse { inner : venues :: NewOrderResponse , } # [pymethods] impl NewOrderResponse { # [staticmethod] fn from_inner (inner : NewOrderResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < PyObject > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn transact_time (& self) -> PyResult < u64 > { Ok (self . inner . transact_time . clone () . into ()) } # [getter] fn price (& self) -> PyResult < PyObject > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < PyObject > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < PyObject > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cum_quote (& self) -> PyResult < PyObject > { Ok (self . inner . cum_quote . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < PyObject > { Ok (self . inner . working_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ModifyOrderRequest { inner : venues :: ModifyOrderRequest , } # [pymethods] impl ModifyOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < PyObject > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn price (& self) -> PyResult < PyObject > { Ok (self . inner . price . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_match . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ModifyOrderResponse { inner : venues :: ModifyOrderResponse , } # [pymethods] impl ModifyOrderResponse { # [staticmethod] fn from_inner (inner : ModifyOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < PyObject > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < PyObject > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < PyObject > { Ok (self . inner . price . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < PyObject > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < PyObject > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < PyObject > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cum_qty (& self) -> PyResult < PyObject > { Ok (self . inner . cum_qty . clone () . into ()) } # [getter] fn cum_base (& self) -> PyResult < PyObject > { Ok (self . inner . cum_base . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn close_position (& self) -> PyResult < bool > { Ok (self . inner . close_position . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < PyObject > { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < PyObject > { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn price_protect (& self) -> PyResult < bool > { Ok (self . inner . price_protect . clone () . into ()) } # [getter] fn orig_type (& self) -> PyResult < PyObject > { Ok (self . inner . orig_type . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < PyObject > { Ok (self . inner . price_match . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } # [getter] fn good_till_date (& self) -> PyResult < u64 > { Ok (self . inner . good_till_date . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderRequest { inner : venues :: CancelOrderRequest , } # [pymethods] impl CancelOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderResponse { inner : venues :: CancelOrderResponse , } # [pymethods] impl CancelOrderResponse { # [staticmethod] fn from_inner (inner : CancelOrderResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < PyObject > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < PyObject > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < PyObject > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < PyObject > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cum_quote (& self) -> PyResult < PyObject > { Ok (self . inner . cum_quote . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TestOrderResponse { inner : venues :: TestOrderResponse , } # [pymethods] impl TestOrderResponse { # [staticmethod] fn from_inner (inner : TestOrderResponse) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn new_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . new_order () . await }) } fn modify_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . modify_order () . await }) } fn cancel_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_order () . await }) } fn test_new_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . test_new_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetPositionModeStatusRequest { inner : venues :: GetPositionModeStatusRequest , } # [pymethods] impl GetPositionModeStatusRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PositionModeStatusResponse { inner : venues :: PositionModeStatusResponse , } # [pymethods] impl PositionModeStatusResponse { # [staticmethod] fn from_inner (inner : PositionModeStatusResponse) -> Self { Self { inner } } # [getter] fn dual_side_position (& self) -> PyResult < bool > { Ok (self . inner . dual_side_position . clone () . into ()) } } # [pymethods] impl RestClient { fn get_position_mode_status <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_position_mode_status () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetTradeDownloadIdRequest { inner : venues :: GetTradeDownloadIdRequest , } # [pymethods] impl GetTradeDownloadIdRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn start_time (& self) -> PyResult < u64 > { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < u64 > { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TradeDownloadIdResponse { inner : venues :: TradeDownloadIdResponse , } # [pymethods] impl TradeDownloadIdResponse { # [staticmethod] fn from_inner (inner : TradeDownloadIdResponse) -> Self { Self { inner } } # [getter] fn avg_cost_timestamp (& self) -> PyResult < String > { Ok (self . inner . avg_cost_timestamp . clone () . into ()) } # [getter] fn download_id (& self) -> PyResult < String > { Ok (self . inner . download_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetTradeDownloadLinkRequest { inner : venues :: GetTradeDownloadLinkRequest , } # [pymethods] impl GetTradeDownloadLinkRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn download_id (& self) -> PyResult < String > { Ok (self . inner . download_id . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum DownloadStatus { Completed , Processing , Failed , } # [pyclass] # [derive (Clone)] pub struct TradeDownloadLinkResponse { inner : venues :: TradeDownloadLinkResponse , } # [pymethods] impl TradeDownloadLinkResponse { # [staticmethod] fn from_inner (inner : TradeDownloadLinkResponse) -> Self { Self { inner } } # [getter] fn download_link (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . download_link . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } } # [pymethods] impl RestClient { fn get_trade_download_id <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_trade_download_id () . await }) } fn get_trade_download_link <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_trade_download_link () . await }) } } # [pyclass] # [derive (Clone)] pub struct OrderAmendmentErrorResponse { inner : venues :: OrderAmendmentErrorResponse , } # [pymethods] impl OrderAmendmentErrorResponse { # [staticmethod] fn from_inner (inner : OrderAmendmentErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderAmendmentRequest { inner : venues :: OrderAmendmentRequest , } # [pymethods] impl OrderAmendmentRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderAmendmentResponse { inner : venues :: OrderAmendmentResponse , } # [pymethods] impl OrderAmendmentResponse { # [staticmethod] fn from_inner (inner : OrderAmendmentResponse) -> Self { Self { inner } } # [getter] fn amendments (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . amendments . clone () . into ()) } # [getter] fn total (& self) -> PyResult < u64 > { Ok (self . inner . total . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderAmendment { inner : venues :: OrderAmendment , } # [pymethods] impl OrderAmendment { # [staticmethod] fn from_inner (inner : OrderAmendment) -> Self { Self { inner } } # [getter] fn amendment_id (& self) -> PyResult < u64 > { Ok (self . inner . amendment_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < PyObject > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn amendment_type (& self) -> PyResult < PyObject > { Ok (self . inner . amendment_type . clone () . into ()) } # [getter] fn orig_price (& self) -> PyResult < PyObject > { Ok (self . inner . orig_price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < PyObject > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn price (& self) -> PyResult < PyObject > { Ok (self . inner . price . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < PyObject > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < PyObject > { Ok (self . inner . price_match . clone () . into ()) } } # [pymethods] impl RestClient { fn get_order_amendment_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_order_amendment_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetConvertExchangeInfoRequest { inner : venues :: GetConvertExchangeInfoRequest , } # [pymethods] impl GetConvertExchangeInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ConvertExchangeInfo { inner : venues :: ConvertExchangeInfo , } # [pymethods] impl ConvertExchangeInfo { # [staticmethod] fn from_inner (inner : ConvertExchangeInfo) -> Self { Self { inner } } # [getter] fn from_asset (& self) -> PyResult < String > { Ok (self . inner . from_asset . clone () . into ()) } # [getter] fn to_asset (& self) -> PyResult < String > { Ok (self . inner . to_asset . clone () . into ()) } # [getter] fn from_asset_min_amount (& self) -> PyResult < String > { Ok (self . inner . from_asset_min_amount . clone () . into ()) } # [getter] fn from_asset_max_amount (& self) -> PyResult < String > { Ok (self . inner . from_asset_max_amount . clone () . into ()) } # [getter] fn to_asset_min_amount (& self) -> PyResult < String > { Ok (self . inner . to_asset_min_amount . clone () . into ()) } # [getter] fn to_asset_max_amount (& self) -> PyResult < String > { Ok (self . inner . to_asset_max_amount . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ConvertExchangeInfoResponse { inner : venues :: ConvertExchangeInfoResponse , } # [pymethods] impl ConvertExchangeInfoResponse { # [staticmethod] fn from_inner (inner : ConvertExchangeInfoResponse) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct GetConvertQuoteRequest { inner : venues :: GetConvertQuoteRequest , } # [pymethods] impl GetConvertQuoteRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn from_asset (& self) -> PyResult < String > { Ok (self . inner . from_asset . clone () . into ()) } # [getter] fn to_asset (& self) -> PyResult < String > { Ok (self . inner . to_asset . clone () . into ()) } # [getter] fn from_amount (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_amount . clone () . into ()) } # [getter] fn to_amount (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . to_amount . clone () . into ()) } # [getter] fn valid_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . valid_time . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ConvertQuoteResponse { inner : venues :: ConvertQuoteResponse , } # [pymethods] impl ConvertQuoteResponse { # [staticmethod] fn from_inner (inner : ConvertQuoteResponse) -> Self { Self { inner } } # [getter] fn quote_id (& self) -> PyResult < String > { Ok (self . inner . quote_id . clone () . into ()) } # [getter] fn ratio (& self) -> PyResult < String > { Ok (self . inner . ratio . clone () . into ()) } # [getter] fn inverse_ratio (& self) -> PyResult < String > { Ok (self . inner . inverse_ratio . clone () . into ()) } # [getter] fn valid_timestamp (& self) -> PyResult < u64 > { Ok (self . inner . valid_timestamp . clone () . into ()) } # [getter] fn to_amount (& self) -> PyResult < String > { Ok (self . inner . to_amount . clone () . into ()) } # [getter] fn from_amount (& self) -> PyResult < String > { Ok (self . inner . from_amount . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AcceptConvertQuoteRequest { inner : venues :: AcceptConvertQuoteRequest , } # [pymethods] impl AcceptConvertQuoteRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn quote_id (& self) -> PyResult < String > { Ok (self . inner . quote_id . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum ConvertOrderStatus { Process , AcceptSuccess , Success , Fail , } # [pyclass] # [derive (Clone)] pub struct AcceptConvertQuoteResponse { inner : venues :: AcceptConvertQuoteResponse , } # [pymethods] impl AcceptConvertQuoteResponse { # [staticmethod] fn from_inner (inner : AcceptConvertQuoteResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < u64 > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn order_status (& self) -> PyResult < PyObject > { Ok (self . inner . order_status . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetConvertOrderStatusRequest { inner : venues :: GetConvertOrderStatusRequest , } # [pymethods] impl GetConvertOrderStatusRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn quote_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quote_id . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ConvertOrderStatusResponse { inner : venues :: ConvertOrderStatusResponse , } # [pymethods] impl ConvertOrderStatusResponse { # [staticmethod] fn from_inner (inner : ConvertOrderStatusResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_status (& self) -> PyResult < PyObject > { Ok (self . inner . order_status . clone () . into ()) } # [getter] fn from_asset (& self) -> PyResult < String > { Ok (self . inner . from_asset . clone () . into ()) } # [getter] fn from_amount (& self) -> PyResult < String > { Ok (self . inner . from_amount . clone () . into ()) } # [getter] fn to_asset (& self) -> PyResult < String > { Ok (self . inner . to_asset . clone () . into ()) } # [getter] fn to_amount (& self) -> PyResult < String > { Ok (self . inner . to_amount . clone () . into ()) } # [getter] fn ratio (& self) -> PyResult < String > { Ok (self . inner . ratio . clone () . into ()) } # [getter] fn inverse_ratio (& self) -> PyResult < String > { Ok (self . inner . inverse_ratio . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < u64 > { Ok (self . inner . create_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_convert_exchange_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_convert_exchange_info () . await }) } fn get_convert_quote <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_convert_quote () . await }) } fn accept_convert_quote <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . accept_convert_quote () . await }) } fn get_convert_order_status <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_convert_order_status () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetLeverageBracketRequest { inner : venues :: GetLeverageBracketRequest , } # [pymethods] impl GetLeverageBracketRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct LeverageBracketResponse { inner : venues :: LeverageBracketResponse , } # [pymethods] impl LeverageBracketResponse { # [staticmethod] fn from_inner (inner : LeverageBracketResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn brackets (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . brackets . clone () . into ()) } } # [pymethods] impl RestClient { fn get_leverage_bracket <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_leverage_bracket () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn base_url (& self) -> PyResult < PyObject > { Ok (self . inner . base_url . clone () . into ()) } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn rate_limiter (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limiter . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct QueryOrderErrorResponse { inner : venues :: QueryOrderErrorResponse , } # [pymethods] impl QueryOrderErrorResponse { # [staticmethod] fn from_inner (inner : QueryOrderErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct QueryOrderRequest { inner : venues :: QueryOrderRequest , } # [pymethods] impl QueryOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct QueryOrderResponse { inner : venues :: QueryOrderResponse , } # [pymethods] impl QueryOrderResponse { # [staticmethod] fn from_inner (inner : QueryOrderResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < PyObject > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < PyObject > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < PyObject > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < PyObject > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < PyObject > { Ok (self . inner . working_type . clone () . into ()) } } # [pymethods] impl RestClient { fn query_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . query_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOrdersErrorResponse { inner : venues :: CancelAllOrdersErrorResponse , } # [pymethods] impl CancelAllOrdersErrorResponse { # [staticmethod] fn from_inner (inner : CancelAllOrdersErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOpenOrdersRequest { inner : venues :: CancelAllOpenOrdersRequest , } # [pymethods] impl CancelAllOpenOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CountdownCancelAllRequest { inner : venues :: CountdownCancelAllRequest , } # [pymethods] impl CountdownCancelAllRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn countdown_time (& self) -> PyResult < u64 > { Ok (self . inner . countdown_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOpenOrdersResponse { inner : venues :: CancelAllOpenOrdersResponse , } # [pymethods] impl CancelAllOpenOrdersResponse { # [staticmethod] fn from_inner (inner : CancelAllOpenOrdersResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < u64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < PyObject > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CountdownCancelAllResponse { inner : venues :: CountdownCancelAllResponse , } # [pymethods] impl CountdownCancelAllResponse { # [staticmethod] fn from_inner (inner : CountdownCancelAllResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn countdown_time (& self) -> PyResult < u64 > { Ok (self . inner . countdown_time . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_all_open_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_all_open_orders () . await }) } fn countdown_cancel_all <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . countdown_cancel_all () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAccountV2Request { inner : venues :: GetAccountV2Request , } # [pymethods] impl GetAccountV2Request { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PositionV2 { inner : venues :: PositionV2 , } # [pymethods] impl PositionV2 { # [staticmethod] fn from_inner (inner : PositionV2) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn initial_margin (& self) -> PyResult < String > { Ok (self . inner . initial_margin . clone () . into ()) } # [getter] fn maint_margin (& self) -> PyResult < String > { Ok (self . inner . maint_margin . clone () . into ()) } # [getter] fn unrealized_profit (& self) -> PyResult < String > { Ok (self . inner . unrealized_profit . clone () . into ()) } # [getter] fn position_initial_margin (& self) -> PyResult < String > { Ok (self . inner . position_initial_margin . clone () . into ()) } # [getter] fn open_order_initial_margin (& self) -> PyResult < String > { Ok (self . inner . open_order_initial_margin . clone () . into ()) } # [getter] fn leverage (& self) -> PyResult < String > { Ok (self . inner . leverage . clone () . into ()) } # [getter] fn isolated (& self) -> PyResult < bool > { Ok (self . inner . isolated . clone () . into ()) } # [getter] fn entry_price (& self) -> PyResult < String > { Ok (self . inner . entry_price . clone () . into ()) } # [getter] fn break_even_price (& self) -> PyResult < String > { Ok (self . inner . break_even_price . clone () . into ()) } # [getter] fn max_notional (& self) -> PyResult < String > { Ok (self . inner . max_notional . clone () . into ()) } # [getter] fn bid_notional (& self) -> PyResult < String > { Ok (self . inner . bid_notional . clone () . into ()) } # [getter] fn ask_notional (& self) -> PyResult < String > { Ok (self . inner . ask_notional . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn position_amt (& self) -> PyResult < String > { Ok (self . inner . position_amt . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountV2Response { inner : venues :: AccountV2Response , } # [pymethods] impl AccountV2Response { # [staticmethod] fn from_inner (inner : AccountV2Response) -> Self { Self { inner } } # [getter] fn fee_tier (& self) -> PyResult < u64 > { Ok (self . inner . fee_tier . clone () . into ()) } # [getter] fn can_trade (& self) -> PyResult < bool > { Ok (self . inner . can_trade . clone () . into ()) } # [getter] fn can_deposit (& self) -> PyResult < bool > { Ok (self . inner . can_deposit . clone () . into ()) } # [getter] fn can_withdraw (& self) -> PyResult < bool > { Ok (self . inner . can_withdraw . clone () . into ()) } # [getter] fn fee_burn (& self) -> PyResult < bool > { Ok (self . inner . fee_burn . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn multi_assets_margin (& self) -> PyResult < bool > { Ok (self . inner . multi_assets_margin . clone () . into ()) } # [getter] fn trade_group_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trade_group_id . clone () . into ()) } # [getter] fn total_initial_margin (& self) -> PyResult < String > { Ok (self . inner . total_initial_margin . clone () . into ()) } # [getter] fn total_maint_margin (& self) -> PyResult < String > { Ok (self . inner . total_maint_margin . clone () . into ()) } # [getter] fn total_wallet_balance (& self) -> PyResult < String > { Ok (self . inner . total_wallet_balance . clone () . into ()) } # [getter] fn total_unrealized_profit (& self) -> PyResult < String > { Ok (self . inner . total_unrealized_profit . clone () . into ()) } # [getter] fn total_margin_balance (& self) -> PyResult < String > { Ok (self . inner . total_margin_balance . clone () . into ()) } # [getter] fn total_position_initial_margin (& self) -> PyResult < String > { Ok (self . inner . total_position_initial_margin . clone () . into ()) } # [getter] fn total_open_order_initial_margin (& self) -> PyResult < String > { Ok (self . inner . total_open_order_initial_margin . clone () . into ()) } # [getter] fn total_cross_wallet_balance (& self) -> PyResult < String > { Ok (self . inner . total_cross_wallet_balance . clone () . into ()) } # [getter] fn total_cross_un_pnl (& self) -> PyResult < String > { Ok (self . inner . total_cross_un_pnl . clone () . into ()) } # [getter] fn available_balance (& self) -> PyResult < String > { Ok (self . inner . available_balance . clone () . into ()) } # [getter] fn max_withdraw_amount (& self) -> PyResult < String > { Ok (self . inner . max_withdraw_amount . clone () . into ()) } # [getter] fn assets (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . assets . clone () . into ()) } # [getter] fn positions (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . positions . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_v2 <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_v2 () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetLeverageBracketRequest { inner : venues :: GetLeverageBracketRequest , } # [pymethods] impl GetLeverageBracketRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct LeverageBracketResponse { inner : venues :: LeverageBracketResponse , } # [pymethods] impl LeverageBracketResponse { # [staticmethod] fn from_inner (inner : LeverageBracketResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn brackets (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . brackets . clone () . into ()) } } # [pymethods] impl RestClient { fn get_leverage_bracket <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_leverage_bracket () . await }) } } # [pyclass] # [derive (Clone)] pub struct PositionRiskV3ErrorResponse { inner : venues :: PositionRiskV3ErrorResponse , } # [pymethods] impl PositionRiskV3ErrorResponse { # [staticmethod] fn from_inner (inner : PositionRiskV3ErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetPositionRiskV3Request { inner : venues :: GetPositionRiskV3Request , } # [pymethods] impl GetPositionRiskV3Request { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PositionRiskV3 { inner : venues :: PositionRiskV3 , } # [pymethods] impl PositionRiskV3 { # [staticmethod] fn from_inner (inner : PositionRiskV3) -> Self { Self { inner } } # [getter] fn entry_price (& self) -> PyResult < String > { Ok (self . inner . entry_price . clone () . into ()) } # [getter] fn leverage (& self) -> PyResult < String > { Ok (self . inner . leverage . clone () . into ()) } # [getter] fn max_notional_value (& self) -> PyResult < String > { Ok (self . inner . max_notional_value . clone () . into ()) } # [getter] fn liquidation_price (& self) -> PyResult < String > { Ok (self . inner . liquidation_price . clone () . into ()) } # [getter] fn mark_price (& self) -> PyResult < String > { Ok (self . inner . mark_price . clone () . into ()) } # [getter] fn position_amt (& self) -> PyResult < String > { Ok (self . inner . position_amt . clone () . into ()) } # [getter] fn notional (& self) -> PyResult < String > { Ok (self . inner . notional . clone () . into ()) } # [getter] fn isolated_wallet (& self) -> PyResult < String > { Ok (self . inner . isolated_wallet . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn un_realized_profit (& self) -> PyResult < String > { Ok (self . inner . un_realized_profit . clone () . into ()) } # [getter] fn margin_type (& self) -> PyResult < PyObject > { Ok (self . inner . margin_type . clone () . into ()) } # [getter] fn isolated_margin (& self) -> PyResult < String > { Ok (self . inner . isolated_margin . clone () . into ()) } # [getter] fn is_auto_add_margin (& self) -> PyResult < bool > { Ok (self . inner . is_auto_add_margin . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn break_even_price (& self) -> PyResult < String > { Ok (self . inner . break_even_price . clone () . into ()) } # [getter] fn adl_quantile (& self) -> PyResult < u64 > { Ok (self . inner . adl_quantile . clone () . into ()) } } # [pymethods] impl RestClient { fn get_position_risk_v3 <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_position_risk_v3 () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetApiTradingStatusRequest { inner : venues :: GetApiTradingStatusRequest , } # [pymethods] impl GetApiTradingStatusRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TradingStatusIndicator { inner : venues :: TradingStatusIndicator , } # [pymethods] impl TradingStatusIndicator { # [staticmethod] fn from_inner (inner : TradingStatusIndicator) -> Self { Self { inner } } # [getter] fn is_locked (& self) -> PyResult < bool > { Ok (self . inner . is_locked . clone () . into ()) } # [getter] fn planned_recover_time (& self) -> PyResult < u64 > { Ok (self . inner . planned_recover_time . clone () . into ()) } # [getter] fn trigger_condition (& self) -> PyResult < PyObject > { Ok (self . inner . trigger_condition . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ApiTradingStatusResponse { inner : venues :: ApiTradingStatusResponse , } # [pymethods] impl ApiTradingStatusResponse { # [staticmethod] fn from_inner (inner : ApiTradingStatusResponse) -> Self { Self { inner } } # [getter] fn is_locked (& self) -> PyResult < bool > { Ok (self . inner . is_locked . clone () . into ()) } # [getter] fn planned_recover_time (& self) -> PyResult < u64 > { Ok (self . inner . planned_recover_time . clone () . into ()) } # [getter] fn trigger_condition (& self) -> PyResult < PyObject > { Ok (self . inner . trigger_condition . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn indicators (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . indicators . clone () . into ()) } } # [pymethods] impl RestClient { fn get_api_trading_status <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_api_trading_status () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMultiAssetsMarginStatusRequest { inner : venues :: GetMultiAssetsMarginStatusRequest , } # [pymethods] impl GetMultiAssetsMarginStatusRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MultiAssetsMarginStatusResponse { inner : venues :: MultiAssetsMarginStatusResponse , } # [pymethods] impl MultiAssetsMarginStatusResponse { # [staticmethod] fn from_inner (inner : MultiAssetsMarginStatusResponse) -> Self { Self { inner } } # [getter] fn multi_assets_margin (& self) -> PyResult < bool > { Ok (self . inner . multi_assets_margin . clone () . into ()) } } # [pymethods] impl RestClient { fn get_multi_assets_margin_status <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_multi_assets_margin_status () . await }) } } # [pyclass] # [derive (Clone)] pub struct OpenOrdersErrorResponse { inner : venues :: OpenOrdersErrorResponse , } # [pymethods] impl OpenOrdersErrorResponse { # [staticmethod] fn from_inner (inner : OpenOrdersErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetOpenOrdersRequest { inner : venues :: GetOpenOrdersRequest , } # [pymethods] impl GetOpenOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OpenOrder { inner : venues :: OpenOrder , } # [pymethods] impl OpenOrder { # [staticmethod] fn from_inner (inner : OpenOrder) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < PyObject > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < PyObject > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < PyObject > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < PyObject > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < PyObject > { Ok (self . inner . working_type . clone () . into ()) } } # [pymethods] impl RestClient { fn get_open_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_open_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetApiTradingStatusRequest { inner : venues :: GetApiTradingStatusRequest , } # [pymethods] impl GetApiTradingStatusRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TradingStatusIndicator { inner : venues :: TradingStatusIndicator , } # [pymethods] impl TradingStatusIndicator { # [staticmethod] fn from_inner (inner : TradingStatusIndicator) -> Self { Self { inner } } # [getter] fn is_locked (& self) -> PyResult < bool > { Ok (self . inner . is_locked . clone () . into ()) } # [getter] fn planned_recover_time (& self) -> PyResult < u64 > { Ok (self . inner . planned_recover_time . clone () . into ()) } # [getter] fn trigger_condition (& self) -> PyResult < PyObject > { Ok (self . inner . trigger_condition . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ApiTradingStatusResponse { inner : venues :: ApiTradingStatusResponse , } # [pymethods] impl ApiTradingStatusResponse { # [staticmethod] fn from_inner (inner : ApiTradingStatusResponse) -> Self { Self { inner } } # [getter] fn is_locked (& self) -> PyResult < bool > { Ok (self . inner . is_locked . clone () . into ()) } # [getter] fn planned_recover_time (& self) -> PyResult < u64 > { Ok (self . inner . planned_recover_time . clone () . into ()) } # [getter] fn trigger_condition (& self) -> PyResult < PyObject > { Ok (self . inner . trigger_condition . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn indicators (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . indicators . clone () . into ()) } } # [pymethods] impl RestClient { fn get_api_trading_status <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_api_trading_status () . await }) } } # [pyclass] # [derive (Clone)] pub struct ChangeLeverageRequest { inner : venues :: ChangeLeverageRequest , } # [pymethods] impl ChangeLeverageRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn leverage (& self) -> PyResult < u64 > { Ok (self . inner . leverage . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ChangeLeverageResponse { inner : venues :: ChangeLeverageResponse , } # [pymethods] impl ChangeLeverageResponse { # [staticmethod] fn from_inner (inner : ChangeLeverageResponse) -> Self { Self { inner } } # [getter] fn leverage (& self) -> PyResult < u64 > { Ok (self . inner . leverage . clone () . into ()) } # [getter] fn max_notional_value (& self) -> PyResult < String > { Ok (self . inner . max_notional_value . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pymethods] impl RestClient { fn change_leverage <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . change_leverage () . await }) } } # [pyclass] # [derive (Clone)] pub struct AccountErrorResponse { inner : venues :: AccountErrorResponse , } # [pymethods] impl AccountErrorResponse { # [staticmethod] fn from_inner (inner : AccountErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetAccountInfoRequest { inner : venues :: GetAccountInfoRequest , } # [pymethods] impl GetAccountInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountInfo { inner : venues :: AccountInfo , } # [pymethods] impl AccountInfo { # [staticmethod] fn from_inner (inner : AccountInfo) -> Self { Self { inner } } # [getter] fn fee_tier (& self) -> PyResult < u64 > { Ok (self . inner . fee_tier . clone () . into ()) } # [getter] fn can_trade (& self) -> PyResult < bool > { Ok (self . inner . can_trade . clone () . into ()) } # [getter] fn can_deposit (& self) -> PyResult < bool > { Ok (self . inner . can_deposit . clone () . into ()) } # [getter] fn can_withdraw (& self) -> PyResult < bool > { Ok (self . inner . can_withdraw . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn total_initial_margin (& self) -> PyResult < PyObject > { Ok (self . inner . total_initial_margin . clone () . into ()) } # [getter] fn total_maint_margin (& self) -> PyResult < PyObject > { Ok (self . inner . total_maint_margin . clone () . into ()) } # [getter] fn total_wallet_balance (& self) -> PyResult < PyObject > { Ok (self . inner . total_wallet_balance . clone () . into ()) } # [getter] fn total_unrealized_profit (& self) -> PyResult < PyObject > { Ok (self . inner . total_unrealized_profit . clone () . into ()) } # [getter] fn total_margin_balance (& self) -> PyResult < PyObject > { Ok (self . inner . total_margin_balance . clone () . into ()) } # [getter] fn total_position_initial_margin (& self) -> PyResult < PyObject > { Ok (self . inner . total_position_initial_margin . clone () . into ()) } # [getter] fn total_open_order_initial_margin (& self) -> PyResult < PyObject > { Ok (self . inner . total_open_order_initial_margin . clone () . into ()) } # [getter] fn total_cross_wallet_balance (& self) -> PyResult < PyObject > { Ok (self . inner . total_cross_wallet_balance . clone () . into ()) } # [getter] fn total_cross_un_pnl (& self) -> PyResult < PyObject > { Ok (self . inner . total_cross_un_pnl . clone () . into ()) } # [getter] fn available_balance (& self) -> PyResult < PyObject > { Ok (self . inner . available_balance . clone () . into ()) } # [getter] fn max_withdraw_amount (& self) -> PyResult < PyObject > { Ok (self . inner . max_withdraw_amount . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct AccountTradesErrorResponse { inner : venues :: AccountTradesErrorResponse , } # [pymethods] impl AccountTradesErrorResponse { # [staticmethod] fn from_inner (inner : AccountTradesErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetAccountTradesRequest { inner : venues :: GetAccountTradesRequest , } # [pymethods] impl GetAccountTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn from_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_id . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountTrade { inner : venues :: AccountTrade , } # [pymethods] impl AccountTrade { # [staticmethod] fn from_inner (inner : AccountTrade) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < u64 > { Ok (self . inner . id . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < PyObject > { Ok (self . inner . price . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < PyObject > { Ok (self . inner . qty . clone () . into ()) } # [getter] fn commission (& self) -> PyResult < PyObject > { Ok (self . inner . commission . clone () . into ()) } # [getter] fn commission_asset (& self) -> PyResult < PyObject > { Ok (self . inner . commission_asset . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn buyer (& self) -> PyResult < bool > { Ok (self . inner . buyer . clone () . into ()) } # [getter] fn maker (& self) -> PyResult < bool > { Ok (self . inner . maker . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct ModifyPositionMarginRequest { inner : venues :: ModifyPositionMarginRequest , } # [pymethods] impl ModifyPositionMarginRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn action (& self) -> PyResult < PyObject > { Ok (self . inner . action . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ModifyPositionMarginResponse { inner : venues :: ModifyPositionMarginResponse , } # [pymethods] impl ModifyPositionMarginResponse { # [staticmethod] fn from_inner (inner : ModifyPositionMarginResponse) -> Self { Self { inner } } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn action (& self) -> PyResult < PyObject > { Ok (self . inner . action . clone () . into ()) } } # [pymethods] impl RestClient { fn modify_position_margin <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . modify_position_margin () . await }) } } # [pyclass] # [derive (Clone)] pub enum IncomeType { Transfer , WelcomeBonus , RealizedPnl , FundingFee , Commission , InsuranceClear , ReferralKickback , CommissionRebate , ApiRebate , ContestReward , CrossCollateralTransfer , OptionsPremiumFee , OptionsSettleProfit , InternalTransfer , AutoExchange , DeliveredSettlement , CoinSwapDeposit , CoinSwapWithdraw , PositionLimitIncreaseFee , } # [pyclass] # [derive (Clone)] pub struct GetIncomeHistoryRequest { inner : venues :: GetIncomeHistoryRequest , } # [pymethods] impl GetIncomeHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn income_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . income_type . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct IncomeHistoryResponse { inner : venues :: IncomeHistoryResponse , } # [pymethods] impl IncomeHistoryResponse { # [staticmethod] fn from_inner (inner : IncomeHistoryResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn income_type (& self) -> PyResult < PyObject > { Ok (self . inner . income_type . clone () . into ()) } # [getter] fn income (& self) -> PyResult < String > { Ok (self . inner . income . clone () . into ()) } # [getter] fn asset (& self) -> PyResult < String > { Ok (self . inner . asset . clone () . into ()) } # [getter] fn info (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn tran_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tran_id . clone () . into ()) } # [getter] fn trade_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trade_id . clone () . into ()) } } # [pymethods] impl RestClient { fn get_income_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_income_history () . await }) } } # [pyclass] # [derive (Clone)] pub enum IncomeType { Transfer , WelcomeBonus , RealizedPnl , FundingFee , Commission , InsuranceClear , ReferralKickback , CommissionRebate , ApiRebate , ContestReward , CrossCollateralTransfer , OptionsPremiumFee , OptionsSettleProfit , InternalTransfer , AutoExchange , DeliveredSettlement , CoinSwapDeposit , CoinSwapWithdraw , PositionLimitIncreaseFee , } # [pyclass] # [derive (Clone)] pub struct GetIncomeHistoryRequest { inner : venues :: GetIncomeHistoryRequest , } # [pymethods] impl GetIncomeHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn income_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . income_type . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct IncomeHistoryResponse { inner : venues :: IncomeHistoryResponse , } # [pymethods] impl IncomeHistoryResponse { # [staticmethod] fn from_inner (inner : IncomeHistoryResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn income_type (& self) -> PyResult < PyObject > { Ok (self . inner . income_type . clone () . into ()) } # [getter] fn income (& self) -> PyResult < String > { Ok (self . inner . income . clone () . into ()) } # [getter] fn asset (& self) -> PyResult < String > { Ok (self . inner . asset . clone () . into ()) } # [getter] fn info (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn tran_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tran_id . clone () . into ()) } # [getter] fn trade_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trade_id . clone () . into ()) } } # [pymethods] impl RestClient { fn get_income_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_income_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetBalanceV2Request { inner : venues :: GetBalanceV2Request , } # [pymethods] impl GetBalanceV2Request { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BalanceV2Response { inner : venues :: BalanceV2Response , } # [pymethods] impl BalanceV2Response { # [staticmethod] fn from_inner (inner : BalanceV2Response) -> Self { Self { inner } } # [getter] fn account_alias (& self) -> PyResult < String > { Ok (self . inner . account_alias . clone () . into ()) } # [getter] fn asset (& self) -> PyResult < String > { Ok (self . inner . asset . clone () . into ()) } # [getter] fn balance (& self) -> PyResult < String > { Ok (self . inner . balance . clone () . into ()) } # [getter] fn cross_wallet_balance (& self) -> PyResult < String > { Ok (self . inner . cross_wallet_balance . clone () . into ()) } # [getter] fn cross_un_pnl (& self) -> PyResult < String > { Ok (self . inner . cross_un_pnl . clone () . into ()) } # [getter] fn available_balance (& self) -> PyResult < String > { Ok (self . inner . available_balance . clone () . into ()) } # [getter] fn max_withdraw_amount (& self) -> PyResult < String > { Ok (self . inner . max_withdraw_amount . clone () . into ()) } } # [pymethods] impl RestClient { fn get_balance_v2 <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_balance_v2 () . await }) } } # [pyclass] # [derive (Clone)] pub struct AdlQuantileErrorResponse { inner : venues :: AdlQuantileErrorResponse , } # [pymethods] impl AdlQuantileErrorResponse { # [staticmethod] fn from_inner (inner : AdlQuantileErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetAdlQuantileRequest { inner : venues :: GetAdlQuantileRequest , } # [pymethods] impl GetAdlQuantileRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AdlQuantileResponse { inner : venues :: AdlQuantileResponse , } # [pymethods] impl AdlQuantileResponse { # [staticmethod] fn from_inner (inner : AdlQuantileResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn adl_quantile (& self) -> PyResult < PyObject > { Ok (self . inner . adl_quantile . clone () . into ()) } } # [pymethods] impl RestClient { fn get_adl_quantile <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_adl_quantile () . await }) } } # [pyclass] # [derive (Clone)] pub struct ChangeMarginTypeRequest { inner : venues :: ChangeMarginTypeRequest , } # [pymethods] impl ChangeMarginTypeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn margin_type (& self) -> PyResult < PyObject > { Ok (self . inner . margin_type . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ChangeMarginTypeResponse { inner : venues :: ChangeMarginTypeResponse , } # [pymethods] impl ChangeMarginTypeResponse { # [staticmethod] fn from_inner (inner : ChangeMarginTypeResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pymethods] impl RestClient { fn change_margin_type <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . change_margin_type () . await }) } } # [pyclass] # [derive (Clone)] pub struct BatchOrderErrorResponse { inner : venues :: BatchOrderErrorResponse , } # [pymethods] impl BatchOrderErrorResponse { # [staticmethod] fn from_inner (inner : BatchOrderErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ModifyBatchOrdersRequest { inner : venues :: ModifyBatchOrdersRequest , } # [pymethods] impl ModifyBatchOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn batch_orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . batch_orders . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ModifyBatchOrderItem { inner : venues :: ModifyBatchOrderItem , } # [pymethods] impl ModifyBatchOrderItem { # [staticmethod] fn from_inner (inner : ModifyBatchOrderItem) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < PyObject > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn price (& self) -> PyResult < PyObject > { Ok (self . inner . price . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_match . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelBatchOrdersRequest { inner : venues :: CancelBatchOrdersRequest , } # [pymethods] impl CancelBatchOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn order_id_list (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id_list . clone () . into ()) } # [getter] fn orig_client_order_id_list (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id_list . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum ModifyBatchOrderResponse { Success , Error , } # [pyclass] # [derive (Clone)] pub struct ModifyBatchOrderSuccess { inner : venues :: ModifyBatchOrderSuccess , } # [pymethods] impl ModifyBatchOrderSuccess { # [staticmethod] fn from_inner (inner : ModifyBatchOrderSuccess) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < PyObject > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < PyObject > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < PyObject > { Ok (self . inner . price . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < PyObject > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < PyObject > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < PyObject > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cum_qty (& self) -> PyResult < PyObject > { Ok (self . inner . cum_qty . clone () . into ()) } # [getter] fn cum_base (& self) -> PyResult < PyObject > { Ok (self . inner . cum_base . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn close_position (& self) -> PyResult < bool > { Ok (self . inner . close_position . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < PyObject > { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < PyObject > { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn price_protect (& self) -> PyResult < bool > { Ok (self . inner . price_protect . clone () . into ()) } # [getter] fn orig_type (& self) -> PyResult < PyObject > { Ok (self . inner . orig_type . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < PyObject > { Ok (self . inner . price_match . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } # [getter] fn good_till_date (& self) -> PyResult < u64 > { Ok (self . inner . good_till_date . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum CancelBatchOrderResponse { Success , Error , } # [pyclass] # [derive (Clone)] pub struct CancelBatchOrderSuccess { inner : venues :: CancelBatchOrderSuccess , } # [pymethods] impl CancelBatchOrderSuccess { # [staticmethod] fn from_inner (inner : CancelBatchOrderSuccess) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < PyObject > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < PyObject > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < PyObject > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < PyObject > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cum_quote (& self) -> PyResult < PyObject > { Ok (self . inner . cum_quote . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pymethods] impl RestClient { fn modify_batch_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . modify_batch_orders () . await }) } fn cancel_batch_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_batch_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct ToggleFeeBurnRequest { inner : venues :: ToggleFeeBurnRequest , } # [pymethods] impl ToggleFeeBurnRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn fee_burn (& self) -> PyResult < bool > { Ok (self . inner . fee_burn . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ToggleFeeBurnResponse { inner : venues :: ToggleFeeBurnResponse , } # [pymethods] impl ToggleFeeBurnResponse { # [staticmethod] fn from_inner (inner : ToggleFeeBurnResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetFeeBurnStatusRequest { inner : venues :: GetFeeBurnStatusRequest , } # [pymethods] impl GetFeeBurnStatusRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct FeeBurnStatusResponse { inner : venues :: FeeBurnStatusResponse , } # [pymethods] impl FeeBurnStatusResponse { # [staticmethod] fn from_inner (inner : FeeBurnStatusResponse) -> Self { Self { inner } } # [getter] fn fee_burn (& self) -> PyResult < bool > { Ok (self . inner . fee_burn . clone () . into ()) } } # [pymethods] impl RestClient { fn toggle_fee_burn <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . toggle_fee_burn () . await }) } fn get_fee_burn_status <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_fee_burn_status () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetSymbolConfigRequest { inner : venues :: GetSymbolConfigRequest , } # [pymethods] impl GetSymbolConfigRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SymbolConfigResponse { inner : venues :: SymbolConfigResponse , } # [pymethods] impl SymbolConfigResponse { # [staticmethod] fn from_inner (inner : SymbolConfigResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn leverage (& self) -> PyResult < u64 > { Ok (self . inner . leverage . clone () . into ()) } # [getter] fn margin_type (& self) -> PyResult < PyObject > { Ok (self . inner . margin_type . clone () . into ()) } # [getter] fn is_isolated (& self) -> PyResult < bool > { Ok (self . inner . is_isolated . clone () . into ()) } } # [pymethods] impl RestClient { fn get_symbol_config <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_symbol_config () . await }) } } # [pyclass] # [derive (Clone)] pub struct BatchOrderErrorResponse { inner : venues :: BatchOrderErrorResponse , } # [pymethods] impl BatchOrderErrorResponse { # [staticmethod] fn from_inner (inner : BatchOrderErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchOrderRequest { inner : venues :: BatchOrderRequest , } # [pymethods] impl BatchOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn batch_orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . batch_orders . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchOrderResponse { inner : venues :: BatchOrderResponse , } # [pymethods] impl BatchOrderResponse { # [staticmethod] fn from_inner (inner : BatchOrderResponse) -> Self { Self { inner } } # [getter] fn orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . orders . clone () . into ()) } } # [pymethods] impl RestClient { fn place_batch_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . place_batch_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMultiAssetsMarginStatusRequest { inner : venues :: GetMultiAssetsMarginStatusRequest , } # [pymethods] impl GetMultiAssetsMarginStatusRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MultiAssetsMarginStatusResponse { inner : venues :: MultiAssetsMarginStatusResponse , } # [pymethods] impl MultiAssetsMarginStatusResponse { # [staticmethod] fn from_inner (inner : MultiAssetsMarginStatusResponse) -> Self { Self { inner } } # [getter] fn multi_assets_margin (& self) -> PyResult < bool > { Ok (self . inner . multi_assets_margin . clone () . into ()) } } # [pymethods] impl RestClient { fn get_multi_assets_margin_status <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_multi_assets_margin_status () . await }) } } # [pyclass] # [derive (Clone)] pub struct ChangeMultiAssetsModeRequest { inner : venues :: ChangeMultiAssetsModeRequest , } # [pymethods] impl ChangeMultiAssetsModeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn multi_assets_margin (& self) -> PyResult < bool > { Ok (self . inner . multi_assets_margin . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ChangeMultiAssetsModeResponse { inner : venues :: ChangeMultiAssetsModeResponse , } # [pymethods] impl ChangeMultiAssetsModeResponse { # [staticmethod] fn from_inner (inner : ChangeMultiAssetsModeResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pymethods] impl RestClient { fn change_multi_assets_mode <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . change_multi_assets_mode () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetRateLimitOrderRequest { inner : venues :: GetRateLimitOrderRequest , } # [pymethods] impl GetRateLimitOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimitOrderData { inner : venues :: RateLimitOrderData , } # [pymethods] impl RateLimitOrderData { # [staticmethod] fn from_inner (inner : RateLimitOrderData) -> Self { Self { inner } } # [getter] fn rate_limit_type (& self) -> PyResult < String > { Ok (self . inner . rate_limit_type . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < String > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn interval_num (& self) -> PyResult < u64 > { Ok (self . inner . interval_num . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < u64 > { Ok (self . inner . limit . clone () . into ()) } # [getter] fn count (& self) -> PyResult < u64 > { Ok (self . inner . count . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimitOrderResponse { inner : venues :: RateLimitOrderResponse , } # [pymethods] impl RateLimitOrderResponse { # [staticmethod] fn from_inner (inner : RateLimitOrderResponse) -> Self { Self { inner } } # [getter] fn rate_limits (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . rate_limits . clone () . into ()) } } # [pymethods] impl RestClient { fn get_rate_limit_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_rate_limit_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetRateLimitOrderRequest { inner : venues :: GetRateLimitOrderRequest , } # [pymethods] impl GetRateLimitOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimitOrderData { inner : venues :: RateLimitOrderData , } # [pymethods] impl RateLimitOrderData { # [staticmethod] fn from_inner (inner : RateLimitOrderData) -> Self { Self { inner } } # [getter] fn rate_limit_type (& self) -> PyResult < String > { Ok (self . inner . rate_limit_type . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < String > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn interval_num (& self) -> PyResult < u64 > { Ok (self . inner . interval_num . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < u64 > { Ok (self . inner . limit . clone () . into ()) } # [getter] fn count (& self) -> PyResult < u64 > { Ok (self . inner . count . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimitOrderResponse { inner : venues :: RateLimitOrderResponse , } # [pymethods] impl RateLimitOrderResponse { # [staticmethod] fn from_inner (inner : RateLimitOrderResponse) -> Self { Self { inner } } # [getter] fn rate_limits (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . rate_limits . clone () . into ()) } } # [pymethods] impl RestClient { fn get_rate_limit_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_rate_limit_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetBalanceV3Request { inner : venues :: GetBalanceV3Request , } # [pymethods] impl GetBalanceV3Request { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BalanceV3Response { inner : venues :: BalanceV3Response , } # [pymethods] impl BalanceV3Response { # [staticmethod] fn from_inner (inner : BalanceV3Response) -> Self { Self { inner } } # [getter] fn asset (& self) -> PyResult < String > { Ok (self . inner . asset . clone () . into ()) } # [getter] fn balance (& self) -> PyResult < String > { Ok (self . inner . balance . clone () . into ()) } # [getter] fn cross_wallet_balance (& self) -> PyResult < String > { Ok (self . inner . cross_wallet_balance . clone () . into ()) } # [getter] fn cross_un_pnl (& self) -> PyResult < String > { Ok (self . inner . cross_un_pnl . clone () . into ()) } # [getter] fn available_balance (& self) -> PyResult < String > { Ok (self . inner . available_balance . clone () . into ()) } # [getter] fn max_withdraw_amount (& self) -> PyResult < String > { Ok (self . inner . max_withdraw_amount . clone () . into ()) } # [getter] fn margin_available (& self) -> PyResult < bool > { Ok (self . inner . margin_available . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_balance_v3 <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_balance_v3 () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetPositionModeStatusRequest { inner : venues :: GetPositionModeStatusRequest , } # [pymethods] impl GetPositionModeStatusRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn signature (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . signature . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PositionModeStatusResponse { inner : venues :: PositionModeStatusResponse , } # [pymethods] impl PositionModeStatusResponse { # [staticmethod] fn from_inner (inner : PositionModeStatusResponse) -> Self { Self { inner } } # [getter] fn dual_side_position (& self) -> PyResult < bool > { Ok (self . inner . dual_side_position . clone () . into ()) } } # [pymethods] impl RestClient { fn get_position_mode_status <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_position_mode_status () . await }) } } # [pyclass] # [derive (Clone)] pub struct PositionMarginHistoryErrorResponse { inner : venues :: PositionMarginHistoryErrorResponse , } # [pymethods] impl PositionMarginHistoryErrorResponse { # [staticmethod] fn from_inner (inner : PositionMarginHistoryErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum MarginModificationType { Add , Reduce , } # [pyclass] # [derive (Clone)] pub struct GetPositionMarginHistoryRequest { inner : venues :: GetPositionMarginHistoryRequest , } # [pymethods] impl GetPositionMarginHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn modification_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . modification_type . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PositionMarginHistoryEntry { inner : venues :: PositionMarginHistoryEntry , } # [pymethods] impl PositionMarginHistoryEntry { # [staticmethod] fn from_inner (inner : PositionMarginHistoryEntry) -> Self { Self { inner } } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn asset (& self) -> PyResult < String > { Ok (self . inner . asset . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn modification_type (& self) -> PyResult < PyObject > { Ok (self . inner . modification_type . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } } # [pymethods] impl RestClient { fn get_position_margin_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_position_margin_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct OpenOrderErrorResponse { inner : venues :: OpenOrderErrorResponse , } # [pymethods] impl OpenOrderErrorResponse { # [staticmethod] fn from_inner (inner : OpenOrderErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CurrentOpenOrderRequest { inner : venues :: CurrentOpenOrderRequest , } # [pymethods] impl CurrentOpenOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CurrentOpenOrderResponse { inner : venues :: CurrentOpenOrderResponse , } # [pymethods] impl CurrentOpenOrderResponse { # [staticmethod] fn from_inner (inner : CurrentOpenOrderResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < PyObject > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < PyObject > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < PyObject > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < PyObject > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cum_quote (& self) -> PyResult < PyObject > { Ok (self . inner . cum_quote . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn close_position (& self) -> PyResult < bool > { Ok (self . inner . close_position . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < PyObject > { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn price_protect (& self) -> PyResult < bool > { Ok (self . inner . price_protect . clone () . into ()) } # [getter] fn orig_type (& self) -> PyResult < PyObject > { Ok (self . inner . orig_type . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < PyObject > { Ok (self . inner . price_match . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } # [getter] fn good_till_date (& self) -> PyResult < u64 > { Ok (self . inner . good_till_date . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn activate_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . activate_price . clone () . into ()) } # [getter] fn price_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_rate . clone () . into ()) } } # [pymethods] impl RestClient { fn get_current_open_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_current_open_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct ForceOrdersErrorResponse { inner : venues :: ForceOrdersErrorResponse , } # [pymethods] impl ForceOrdersErrorResponse { # [staticmethod] fn from_inner (inner : ForceOrdersErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ForceOrdersRequest { inner : venues :: ForceOrdersRequest , } # [pymethods] impl ForceOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn auto_close_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . auto_close_type . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ForceOrder { inner : venues :: ForceOrder , } # [pymethods] impl ForceOrder { # [staticmethod] fn from_inner (inner : ForceOrder) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < PyObject > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < PyObject > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn price (& self) -> PyResult < PyObject > { Ok (self . inner . price . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < PyObject > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn auto_close_type (& self) -> PyResult < PyObject > { Ok (self . inner . auto_close_type . clone () . into ()) } } # [pymethods] impl RestClient { fn get_force_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_force_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct ErrorResponse { inner : venues :: ErrorResponse , } # [pymethods] impl ErrorResponse { # [staticmethod] fn from_inner (inner : ErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum RateLimitType { RequestWeight , Orders , RawRequests , RequestSize , OrdersPerSecond , OrdersPerDay , OrdersPerCountdown , } # [pyclass] # [derive (Clone)] pub enum RateLimitInterval { Second , Minute , Day , } # [pyclass] # [derive (Clone)] pub enum IntervalUnit { Second , Minute , Hour , Day , } # [pyclass] # [derive (Clone)] pub struct RateLimitHeader { inner : venues :: RateLimitHeader , } # [pymethods] impl RateLimitHeader { # [staticmethod] fn from_inner (inner : RateLimitHeader) -> Self { Self { inner } } # [getter] fn kind (& self) -> PyResult < PyObject > { Ok (self . inner . kind . clone () . into ()) } # [getter] fn interval_value (& self) -> PyResult < u64 > { Ok (self . inner . interval_value . clone () . into ()) } # [getter] fn interval_unit (& self) -> PyResult < PyObject > { Ok (self . inner . interval_unit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum RateLimitHeaderKind { UsedWeight , OrderCount , } # [pyclass] # [derive (Clone)] pub struct RateLimitUsage { inner : venues :: RateLimitUsage , } # [pymethods] impl RateLimitUsage { # [staticmethod] fn from_inner (inner : RateLimitUsage) -> Self { Self { inner } } # [getter] fn raw_request_timestamps (& self) -> PyResult < PyObject > { Ok (self . inner . raw_request_timestamps . clone () . into ()) } # [getter] fn order_timestamps_10s (& self) -> PyResult < PyObject > { Ok (self . inner . order_timestamps_10s . clone () . into ()) } # [getter] fn order_timestamps_1m (& self) -> PyResult < PyObject > { Ok (self . inner . order_timestamps_1m . clone () . into ()) } # [getter] fn order_timestamps_1d (& self) -> PyResult < PyObject > { Ok (self . inner . order_timestamps_1d . clone () . into ()) } # [getter] fn used_weight_1m (& self) -> PyResult < u64 > { Ok (self . inner . used_weight_1m . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimiter { inner : venues :: RateLimiter , } # [pymethods] impl RateLimiter { # [staticmethod] fn from_inner (inner : RateLimiter) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct RestResponse { inner : venues :: RestResponse , } # [pymethods] impl RestResponse { # [staticmethod] fn from_inner (inner : RestResponse) -> Self { Self { inner } } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } # [getter] fn headers (& self) -> PyResult < PyObject > { Ok (self . inner . headers . clone () . into ()) } # [getter] fn request_duration (& self) -> PyResult < PyObject > { Ok (self . inner . request_duration . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum RateLimitType { RequestWeight , Orders , RawRequests , } # [pyclass] # [derive (Clone)] pub enum RateLimitInterval { Second , Minute , Day , } # [pyclass] # [derive (Clone)] pub enum IntervalUnit { Second , Minute , Hour , Day , } # [pyclass] # [derive (Clone)] pub struct RateLimitHeader { inner : venues :: RateLimitHeader , } # [pymethods] impl RateLimitHeader { # [staticmethod] fn from_inner (inner : RateLimitHeader) -> Self { Self { inner } } # [getter] fn kind (& self) -> PyResult < PyObject > { Ok (self . inner . kind . clone () . into ()) } # [getter] fn interval_value (& self) -> PyResult < u64 > { Ok (self . inner . interval_value . clone () . into ()) } # [getter] fn interval_unit (& self) -> PyResult < PyObject > { Ok (self . inner . interval_unit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum RateLimitHeaderKind { UsedWeight , OrderCount , } # [pyclass] # [derive (Clone)] pub struct RateLimitUsage { inner : venues :: RateLimitUsage , } # [pymethods] impl RateLimitUsage { # [staticmethod] fn from_inner (inner : RateLimitUsage) -> Self { Self { inner } } # [getter] fn weight_usage (& self) -> PyResult < PyObject > { Ok (self . inner . weight_usage . clone () . into ()) } # [getter] fn raw_usage (& self) -> PyResult < PyObject > { Ok (self . inner . raw_usage . clone () . into ()) } # [getter] fn order_usage (& self) -> PyResult < PyObject > { Ok (self . inner . order_usage . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimiter { inner : venues :: RateLimiter , } # [pymethods] impl RateLimiter { # [staticmethod] fn from_inner (inner : RateLimiter) -> Self { Self { inner } } # [getter] fn limits (& self) -> PyResult < PyObject > { Ok (self . inner . limits . clone () . into ()) } # [getter] fn usage (& self) -> PyResult < PyObject > { Ok (self . inner . usage . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct UsageStats { inner : venues :: UsageStats , } # [pymethods] impl UsageStats { # [staticmethod] fn from_inner (inner : UsageStats) -> Self { Self { inner } } # [getter] fn weight_used (& self) -> PyResult < u64 > { Ok (self . inner . weight_used . clone () . into ()) } # [getter] fn weight_limit (& self) -> PyResult < u64 > { Ok (self . inner . weight_limit . clone () . into ()) } # [getter] fn raw_requests_used (& self) -> PyResult < u64 > { Ok (self . inner . raw_requests_used . clone () . into ()) } # [getter] fn raw_requests_limit (& self) -> PyResult < u64 > { Ok (self . inner . raw_requests_limit . clone () . into ()) } # [getter] fn orders_10s_used (& self) -> PyResult < u64 > { Ok (self . inner . orders_10s_used . clone () . into ()) } # [getter] fn orders_10s_limit (& self) -> PyResult < u64 > { Ok (self . inner . orders_10s_limit . clone () . into ()) } # [getter] fn orders_1m_used (& self) -> PyResult < u64 > { Ok (self . inner . orders_1m_used . clone () . into ()) } # [getter] fn orders_1m_limit (& self) -> PyResult < u64 > { Ok (self . inner . orders_1m_limit . clone () . into ()) } # [getter] fn orders_1d_used (& self) -> PyResult < u64 > { Ok (self . inner . orders_1d_used . clone () . into ()) } # [getter] fn orders_1d_limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orders_1d_limit . clone () . into ()) } } # [pymethods] impl BinanceClient { fn get_server_time <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_server_time () . await }) } } # [pyclass] # [derive (Clone)] pub struct AccountInfoRequest { inner : venues :: AccountInfoRequest , } # [pymethods] impl AccountInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountInfo { inner : venues :: AccountInfo , } # [pymethods] impl AccountInfo { # [staticmethod] fn from_inner (inner : AccountInfo) -> Self { Self { inner } } # [getter] fn maker_commission (& self) -> PyResult < i64 > { Ok (self . inner . maker_commission . clone () . into ()) } # [getter] fn taker_commission (& self) -> PyResult < i64 > { Ok (self . inner . taker_commission . clone () . into ()) } # [getter] fn buyer_commission (& self) -> PyResult < i64 > { Ok (self . inner . buyer_commission . clone () . into ()) } # [getter] fn seller_commission (& self) -> PyResult < i64 > { Ok (self . inner . seller_commission . clone () . into ()) } # [getter] fn can_trade (& self) -> PyResult < bool > { Ok (self . inner . can_trade . clone () . into ()) } # [getter] fn can_withdraw (& self) -> PyResult < bool > { Ok (self . inner . can_withdraw . clone () . into ()) } # [getter] fn can_deposit (& self) -> PyResult < bool > { Ok (self . inner . can_deposit . clone () . into ()) } # [getter] fn balances (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . balances . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Balance { inner : venues :: Balance , } # [pymethods] impl Balance { # [staticmethod] fn from_inner (inner : Balance) -> Self { Self { inner } } # [getter] fn asset (& self) -> PyResult < String > { Ok (self . inner . asset . clone () . into ()) } # [getter] fn free (& self) -> PyResult < String > { Ok (self . inner . free . clone () . into ()) } # [getter] fn locked (& self) -> PyResult < String > { Ok (self . inner . locked . clone () . into ()) } } # [pymethods] impl BinanceClient { fn get_account_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct RateLimits { inner : venues :: RateLimits , } # [pymethods] impl RateLimits { # [staticmethod] fn from_inner (inner : RateLimits) -> Self { Self { inner } } # [getter] fn request_weight_limit (& self) -> PyResult < u64 > { Ok (self . inner . request_weight_limit . clone () . into ()) } # [getter] fn request_weight_window (& self) -> PyResult < PyObject > { Ok (self . inner . request_weight_window . clone () . into ()) } # [getter] fn raw_requests_limit (& self) -> PyResult < u64 > { Ok (self . inner . raw_requests_limit . clone () . into ()) } # [getter] fn raw_requests_window (& self) -> PyResult < PyObject > { Ok (self . inner . raw_requests_window . clone () . into ()) } # [getter] fn orders_10s_limit (& self) -> PyResult < u64 > { Ok (self . inner . orders_10s_limit . clone () . into ()) } # [getter] fn orders_minute_limit (& self) -> PyResult < u64 > { Ok (self . inner . orders_minute_limit . clone () . into ()) } # [getter] fn orders_day_limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orders_day_limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RestResponse { inner : venues :: RestResponse , } # [pymethods] impl RestResponse { # [staticmethod] fn from_inner (inner : RestResponse) -> Self { Self { inner } } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } # [getter] fn headers (& self) -> PyResult < PyObject > { Ok (self . inner . headers . clone () . into ()) } # [getter] fn rate_limit_info (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . rate_limit_info . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ResponseHeaders { inner : venues :: ResponseHeaders , } # [pymethods] impl ResponseHeaders { # [staticmethod] fn from_inner (inner : ResponseHeaders) -> Self { Self { inner } } # [getter] fn headers (& self) -> PyResult < PyObject > { Ok (self . inner . headers . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimitInfo { inner : venues :: RateLimitInfo , } # [pymethods] impl RateLimitInfo { # [staticmethod] fn from_inner (inner : RateLimitInfo) -> Self { Self { inner } } # [getter] fn weight_used (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . weight_used . clone () . into ()) } # [getter] fn order_count (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_count . clone () . into ()) } # [getter] fn retry_after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . retry_after . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BinanceClient { inner : venues :: BinanceClient , } # [pymethods] impl BinanceClient { # [staticmethod] fn from_inner (inner : BinanceClient) -> Self { Self { inner } } } # [pymethods] impl BinanceClient { fn new_authenticated (& self) -> PyResult < () > { self . inner . new_authenticated () ; Ok (()) } fn send_public_request <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . send_public_request () . await }) } fn send_signed_request <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . send_signed_request () . await }) } fn get_usage_stats <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_usage_stats () . await }) } fn venue (& self) -> PyResult < () > { self . inner . venue () ; Ok (()) } fn is_authenticated (& self) -> PyResult < () > { self . inner . is_authenticated () ; Ok (()) } } # [pyclass] # [derive (Clone)] pub struct ErrorResponse { inner : venues :: ErrorResponse , } # [pymethods] impl ErrorResponse { # [staticmethod] fn from_inner (inner : ErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum OrderSide { Buy , Sell , } # [pyclass] # [derive (Clone)] pub enum PositionSide { Both , Long , Short , } # [pyclass] # [derive (Clone)] pub enum OrderType { Limit , Market , Stop , StopMarket , TakeProfit , TakeProfitMarket , TrailingStopMarket , } # [pyclass] # [derive (Clone)] pub enum TimeInForce { GTC , IOC , FOK , GTX , } # [pyclass] # [derive (Clone)] pub enum WorkingType { MarkPrice , ContractPrice , } # [pyclass] # [derive (Clone)] pub enum OrderStatus { New , PartiallyFilled , Filled , Canceled , Expired , } # [pyclass] # [derive (Clone)] pub enum OrderResponseType { Ack , Result , } # [pyclass] # [derive (Clone)] pub enum SelfTradePreventionMode { None , ExpireTaker , ExpireMaker , ExpireBoth , } # [pyclass] # [derive (Clone)] pub enum IncomeType { Transfer , WelcomeBonus , RealizedPnl , FundingFee , Commission , InsuranceClear , ReferralKickback , CommissionRebate , ApiRebate , ContReward , UsdVsTokenSettlement , FeeReward , TokenReward , TransferIn , TransferOut , } # [pyclass] # [derive (Clone)] pub enum MarginType { Cross , Isolated , } # [pyclass] # [derive (Clone)] pub enum WebSocketEventType { DepthUpdate , } # [pyclass] # [derive (Clone)] pub enum ExchangeFilterType { ExchangeMaxNumOrders , ExchangeMaxNumAlgoOrders , } # [pyclass] # [derive (Clone)] pub enum SymbolStatus { PreTrading , Trading , PostTrading , EndOfDay , Halt , AuctionMatch , Break , } # [pyclass] # [derive (Clone)] pub enum SymbolType { DeliveryContract , PerpetualContract , } # [pyclass] # [derive (Clone)] pub enum ContractType { Perpetual , CurrentQuarter , NextQuarter , CurrentQuarterDelivering , NextQuarterDelivering , PerpetualDelivering , } # [pyclass] # [derive (Clone)] pub enum ContractStatus { PendingTrading , Trading , PreDelivering , Delivering , Delivered , } # [pyclass] # [derive (Clone)] pub enum UnderlyingType { Coin , Index , } # [pyclass] # [derive (Clone)] pub enum SymbolFilterType { PriceFilter , LotSizeFilter , MinNotionalFilter , MaxNumOrdersFilter , MaxNumAlgoOrdersFilter , PercentPriceFilter , MaxPositionFilter , TrailingDataFilter , } # [pyclass] # [derive (Clone)] pub enum PriceMatch { None , Opponent , Opponent5 , Opponent10 , Opponent20 , Queue , Queue5 , Queue10 , Queue20 , } # [pyclass] # [derive (Clone)] pub enum KlineInterval { I1m , I3m , I5m , I15m , I30m , I1h , I2h , I4h , I6h , I8h , I12h , I1d , I3d , I1w , I1M , } # [pyclass] # [derive (Clone)] pub enum ContractTypeFilter { All , Perpetual , CurrentQuarter , NextQuarter , } # [pyclass] # [derive (Clone)] pub enum StatsPeriod { I5m , I15m , I30m , I1h , I2h , I4h , I6h , I12h , I1d , } # [pyclass] # [derive (Clone)] pub enum Period { I5m , I15m , I30m , I1h , I2h , I4h , I6h , I12h , I1d , } # [pyclass] # [derive (Clone)] pub enum AutoCloseType { Liquidation , Adl , } # [pyclass] # [derive (Clone)] pub enum TransferType { MainUmfuture , MainCmfuture , MainMargin , UmfutureMain , UmfutureMargin , CmfutureMain , CmfutureMargin , MarginMain , MarginUmfuture , MarginCmfuture , IsolatedmarginMargin , MarginIsolatedmargin , IsolatedmarginIsolatedmargin , MainFunding , FundingMain , FundingUmfuture , UmfutureFunding , MarginFunding , FundingMargin , FundingCmfuture , CmfutureFunding , MainOption , OptionMain , UmfutureOption , OptionUmfuture , MarginOption , OptionMargin , FundingOption , OptionFunding , MainPortfolioMargin , PortfolioMarginMain , } # [pyclass] # [derive (Clone)] pub enum DownloadStatus { Completed , Processing , } # [pyclass] # [derive (Clone)] pub enum MarginModificationType { Add , Reduce , } # [pyclass] # [derive (Clone)] pub struct ResponseHeaders { inner : venues :: ResponseHeaders , } # [pymethods] impl ResponseHeaders { # [staticmethod] fn from_inner (inner : ResponseHeaders) -> Self { Self { inner } } # [getter] fn values (& self) -> PyResult < PyObject > { Ok (self . inner . values . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RestResponse { inner : venues :: RestResponse , } # [pymethods] impl RestResponse { # [staticmethod] fn from_inner (inner : RestResponse) -> Self { Self { inner } } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } # [getter] fn request_duration (& self) -> PyResult < PyObject > { Ok (self . inner . request_duration . clone () . into ()) } # [getter] fn headers (& self) -> PyResult < PyObject > { Ok (self . inner . headers . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AggregateTradesRequest { inner : venues :: AggregateTradesRequest , } # [pymethods] impl AggregateTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn from_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AggregateTrade { inner : venues :: AggregateTrade , } # [pymethods] impl AggregateTrade { # [staticmethod] fn from_inner (inner : AggregateTrade) -> Self { Self { inner } } # [getter] fn agg_trade_id (& self) -> PyResult < u64 > { Ok (self . inner . agg_trade_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn first_trade_id (& self) -> PyResult < u64 > { Ok (self . inner . first_trade_id . clone () . into ()) } # [getter] fn last_trade_id (& self) -> PyResult < u64 > { Ok (self . inner . last_trade_id . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn is_buyer_maker (& self) -> PyResult < bool > { Ok (self . inner . is_buyer_maker . clone () . into ()) } } # [pymethods] impl RestClient { fn get_aggregate_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_aggregate_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct OpenInterestRequest { inner : venues :: OpenInterestRequest , } # [pymethods] impl OpenInterestRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pymethods] impl RestClient { fn get_open_interest <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_open_interest () . await }) } } # [pyclass] # [derive (Clone)] pub struct PremiumIndexRequest { inner : venues :: PremiumIndexRequest , } # [pymethods] impl PremiumIndexRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pair . clone () . into ()) } } # [pymethods] impl RestClient { fn get_premium_index <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_premium_index () . await }) } } # [pyclass] # [derive (Clone)] pub struct Symbol { inner : venues :: Symbol , } # [pymethods] impl Symbol { # [staticmethod] fn from_inner (inner : Symbol) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn contract_type (& self) -> PyResult < PyObject > { Ok (self . inner . contract_type . clone () . into ()) } # [getter] fn delivery_date (& self) -> PyResult < i64 > { Ok (self . inner . delivery_date . clone () . into ()) } # [getter] fn onboard_date (& self) -> PyResult < i64 > { Ok (self . inner . onboard_date . clone () . into ()) } # [getter] fn contract_status (& self) -> PyResult < PyObject > { Ok (self . inner . contract_status . clone () . into ()) } # [getter] fn contract_size (& self) -> PyResult < i64 > { Ok (self . inner . contract_size . clone () . into ()) } # [getter] fn margin_asset (& self) -> PyResult < String > { Ok (self . inner . margin_asset . clone () . into ()) } # [getter] fn maint_margin_percent (& self) -> PyResult < String > { Ok (self . inner . maint_margin_percent . clone () . into ()) } # [getter] fn required_margin_percent (& self) -> PyResult < String > { Ok (self . inner . required_margin_percent . clone () . into ()) } # [getter] fn base_asset (& self) -> PyResult < String > { Ok (self . inner . base_asset . clone () . into ()) } # [getter] fn quote_asset (& self) -> PyResult < PyObject > { Ok (self . inner . quote_asset . clone () . into ()) } # [getter] fn price_precision (& self) -> PyResult < i64 > { Ok (self . inner . price_precision . clone () . into ()) } # [getter] fn quantity_precision (& self) -> PyResult < i64 > { Ok (self . inner . quantity_precision . clone () . into ()) } # [getter] fn base_asset_precision (& self) -> PyResult < i64 > { Ok (self . inner . base_asset_precision . clone () . into ()) } # [getter] fn quote_precision (& self) -> PyResult < i64 > { Ok (self . inner . quote_precision . clone () . into ()) } # [getter] fn equal_qty_precision (& self) -> PyResult < i64 > { Ok (self . inner . equal_qty_precision . clone () . into ()) } # [getter] fn max_move_order_limit (& self) -> PyResult < i64 > { Ok (self . inner . max_move_order_limit . clone () . into ()) } # [getter] fn trigger_protect (& self) -> PyResult < String > { Ok (self . inner . trigger_protect . clone () . into ()) } # [getter] fn underlying_type (& self) -> PyResult < PyObject > { Ok (self . inner . underlying_type . clone () . into ()) } # [getter] fn underlying_sub_type (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . underlying_sub_type . clone () . into ()) } # [getter] fn filters (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . filters . clone () . into ()) } # [getter] fn order_types (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_types . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn liquidation_fee (& self) -> PyResult < String > { Ok (self . inner . liquidation_fee . clone () . into ()) } # [getter] fn market_take_bound (& self) -> PyResult < String > { Ok (self . inner . market_take_bound . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PriceFilter { inner : venues :: PriceFilter , } # [pymethods] impl PriceFilter { # [staticmethod] fn from_inner (inner : PriceFilter) -> Self { Self { inner } } # [getter] fn min_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . min_price . clone () . into ()) } # [getter] fn max_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_price . clone () . into ()) } # [getter] fn tick_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tick_size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct LotSizeFilter { inner : venues :: LotSizeFilter , } # [pymethods] impl LotSizeFilter { # [staticmethod] fn from_inner (inner : LotSizeFilter) -> Self { Self { inner } } # [getter] fn max_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_qty . clone () . into ()) } # [getter] fn min_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . min_qty . clone () . into ()) } # [getter] fn step_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . step_size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MarketLotSizeFilter { inner : venues :: MarketLotSizeFilter , } # [pymethods] impl MarketLotSizeFilter { # [staticmethod] fn from_inner (inner : MarketLotSizeFilter) -> Self { Self { inner } } # [getter] fn max_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_qty . clone () . into ()) } # [getter] fn min_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . min_qty . clone () . into ()) } # [getter] fn step_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . step_size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MaxNumOrdersFilter { inner : venues :: MaxNumOrdersFilter , } # [pymethods] impl MaxNumOrdersFilter { # [staticmethod] fn from_inner (inner : MaxNumOrdersFilter) -> Self { Self { inner } } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MaxNumAlgoOrdersFilter { inner : venues :: MaxNumAlgoOrdersFilter , } # [pymethods] impl MaxNumAlgoOrdersFilter { # [staticmethod] fn from_inner (inner : MaxNumAlgoOrdersFilter) -> Self { Self { inner } } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PercentPriceFilter { inner : venues :: PercentPriceFilter , } # [pymethods] impl PercentPriceFilter { # [staticmethod] fn from_inner (inner : PercentPriceFilter) -> Self { Self { inner } } # [getter] fn multiplier_up (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . multiplier_up . clone () . into ()) } # [getter] fn multiplier_down (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . multiplier_down . clone () . into ()) } # [getter] fn multiplier_decimal (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . multiplier_decimal . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum Filter { PriceFilter , LotSizeFilter , MarketLotSizeFilter , MaxNumOrdersFilter , MaxNumAlgoOrdersFilter , PercentPriceFilter , Unknown , } # [pyclass] # [derive (Clone)] pub enum FilterType { LotSize , MarketLotSize , MaxNumAlgoOrders , MaxNumOrders , PercentPrice , PriceFilter , } # [pyclass] # [derive (Clone)] pub enum QuoteAsset { Usd , } # [pyclass] # [derive (Clone)] pub struct ExchangeInfoResponse { inner : venues :: ExchangeInfoResponse , } # [pymethods] impl ExchangeInfoResponse { # [staticmethod] fn from_inner (inner : ExchangeInfoResponse) -> Self { Self { inner } } # [getter] fn timezone (& self) -> PyResult < String > { Ok (self . inner . timezone . clone () . into ()) } # [getter] fn server_time (& self) -> PyResult < u64 > { Ok (self . inner . server_time . clone () . into ()) } # [getter] fn rate_limits (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . rate_limits . clone () . into ()) } # [getter] fn symbols (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . symbols . clone () . into ()) } # [getter] fn exchange_filters (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . exchange_filters . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimit { inner : venues :: RateLimit , } # [pymethods] impl RateLimit { # [staticmethod] fn from_inner (inner : RateLimit) -> Self { Self { inner } } # [getter] fn rate_limit_type (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limit_type . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn interval_num (& self) -> PyResult < u64 > { Ok (self . inner . interval_num . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < u64 > { Ok (self . inner . limit . clone () . into ()) } } # [pymethods] impl RestClient { fn get_exchange_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_exchange_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn base_url (& self) -> PyResult < PyObject > { Ok (self . inner . base_url . clone () . into ()) } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn rate_limiter (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limiter . clone () . into ()) } } # [pymethods] impl RestClient { fn send_request <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . send_request () . await }) } } # [pyclass] # [derive (Clone)] pub struct OpenInterestHistParams { inner : venues :: OpenInterestHistParams , } # [pymethods] impl OpenInterestHistParams { # [staticmethod] fn from_inner (inner : OpenInterestHistParams) -> Self { Self { inner } } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn contract_type (& self) -> PyResult < String > { Ok (self . inner . contract_type . clone () . into ()) } # [getter] fn period (& self) -> PyResult < PyObject > { Ok (self . inner . period . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_open_interest_hist <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_open_interest_hist () . await }) } } # [pyclass] # [derive (Clone)] pub struct KlineRequest { inner : venues :: KlineRequest , } # [pymethods] impl KlineRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Kline { inner : venues :: Kline , } # [pymethods] impl Kline { # [staticmethod] fn from_inner (inner : Kline) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn get_klines <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_klines () . await }) } } # [pyclass] # [derive (Clone)] pub struct TopLongShortPositionRatioParams { inner : venues :: TopLongShortPositionRatioParams , } # [pymethods] impl TopLongShortPositionRatioParams { # [staticmethod] fn from_inner (inner : TopLongShortPositionRatioParams) -> Self { Self { inner } } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn period (& self) -> PyResult < PyObject > { Ok (self . inner . period . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TopLongShortPositionRatio { inner : venues :: TopLongShortPositionRatio , } # [pymethods] impl TopLongShortPositionRatio { # [staticmethod] fn from_inner (inner : TopLongShortPositionRatio) -> Self { Self { inner } } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn long_position (& self) -> PyResult < String > { Ok (self . inner . long_position . clone () . into ()) } # [getter] fn short_position (& self) -> PyResult < String > { Ok (self . inner . short_position . clone () . into ()) } # [getter] fn long_short_ratio (& self) -> PyResult < String > { Ok (self . inner . long_short_ratio . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < i64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pymethods] impl RestClient { fn get_top_long_short_position_ratio <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_top_long_short_position_ratio () . await }) } } # [pyclass] # [derive (Clone)] pub struct HistoricalTradesRequest { inner : venues :: HistoricalTradesRequest , } # [pymethods] impl HistoricalTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn from_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct HistoricalTrade { inner : venues :: HistoricalTrade , } # [pymethods] impl HistoricalTrade { # [staticmethod] fn from_inner (inner : HistoricalTrade) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < u64 > { Ok (self . inner . id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < String > { Ok (self . inner . qty . clone () . into ()) } # [getter] fn base_qty (& self) -> PyResult < String > { Ok (self . inner . base_qty . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn is_buyer_maker (& self) -> PyResult < bool > { Ok (self . inner . is_buyer_maker . clone () . into ()) } } # [pymethods] impl RestClient { fn get_historical_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_historical_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct Ticker24hrParams { inner : venues :: Ticker24hrParams , } # [pymethods] impl Ticker24hrParams { # [staticmethod] fn from_inner (inner : Ticker24hrParams) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pair . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Ticker24hr { inner : venues :: Ticker24hr , } # [pymethods] impl Ticker24hr { # [staticmethod] fn from_inner (inner : Ticker24hr) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn price_change (& self) -> PyResult < String > { Ok (self . inner . price_change . clone () . into ()) } # [getter] fn price_change_percent (& self) -> PyResult < String > { Ok (self . inner . price_change_percent . clone () . into ()) } # [getter] fn weighted_avg_price (& self) -> PyResult < String > { Ok (self . inner . weighted_avg_price . clone () . into ()) } # [getter] fn last_price (& self) -> PyResult < String > { Ok (self . inner . last_price . clone () . into ()) } # [getter] fn last_qty (& self) -> PyResult < String > { Ok (self . inner . last_qty . clone () . into ()) } # [getter] fn open_price (& self) -> PyResult < String > { Ok (self . inner . open_price . clone () . into ()) } # [getter] fn high_price (& self) -> PyResult < String > { Ok (self . inner . high_price . clone () . into ()) } # [getter] fn low_price (& self) -> PyResult < String > { Ok (self . inner . low_price . clone () . into ()) } # [getter] fn volume (& self) -> PyResult < String > { Ok (self . inner . volume . clone () . into ()) } # [getter] fn quote_volume (& self) -> PyResult < String > { Ok (self . inner . quote_volume . clone () . into ()) } # [getter] fn open_time (& self) -> PyResult < i64 > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn close_time (& self) -> PyResult < i64 > { Ok (self . inner . close_time . clone () . into ()) } # [getter] fn first_id (& self) -> PyResult < i64 > { Ok (self . inner . first_id . clone () . into ()) } # [getter] fn last_id (& self) -> PyResult < i64 > { Ok (self . inner . last_id . clone () . into ()) } # [getter] fn count (& self) -> PyResult < i64 > { Ok (self . inner . count . clone () . into ()) } } # [pymethods] impl RestClient { fn get_ticker_24hr <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_ticker_24hr () . await }) } } # [pyclass] # [derive (Clone)] pub struct BasisRequest { inner : venues :: BasisRequest , } # [pymethods] impl BasisRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn contract_type (& self) -> PyResult < PyObject > { Ok (self . inner . contract_type . clone () . into ()) } # [getter] fn period (& self) -> PyResult < PyObject > { Ok (self . inner . period . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_basis <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_basis () . await }) } } # [pyclass] # [derive (Clone)] pub struct FundingRateRequest { inner : venues :: FundingRateRequest , } # [pymethods] impl FundingRateRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pymethods] impl RestClient { fn get_funding_rate_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_funding_rate_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct TakerBuySellVolParams { inner : venues :: TakerBuySellVolParams , } # [pymethods] impl TakerBuySellVolParams { # [staticmethod] fn from_inner (inner : TakerBuySellVolParams) -> Self { Self { inner } } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn contract_type (& self) -> PyResult < String > { Ok (self . inner . contract_type . clone () . into ()) } # [getter] fn period (& self) -> PyResult < PyObject > { Ok (self . inner . period . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_taker_buy_sell_vol <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_taker_buy_sell_vol () . await }) } } # [pyclass] # [derive (Clone)] pub struct PremiumIndexKlineRequest { inner : venues :: PremiumIndexKlineRequest , } # [pymethods] impl PremiumIndexKlineRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PremiumIndexKline { inner : venues :: PremiumIndexKline , } # [pymethods] impl PremiumIndexKline { # [staticmethod] fn from_inner (inner : PremiumIndexKline) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn get_premium_index_klines <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_premium_index_klines () . await }) } } # [pyclass] # [derive (Clone)] pub struct IndexPriceKlineRequest { inner : venues :: IndexPriceKlineRequest , } # [pymethods] impl IndexPriceKlineRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct IndexPriceKline { inner : venues :: IndexPriceKline , } # [pymethods] impl IndexPriceKline { # [staticmethod] fn from_inner (inner : IndexPriceKline) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn get_index_price_klines <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_index_price_klines () . await }) } } # [pyclass] # [derive (Clone)] pub struct MarkPriceKlineRequest { inner : venues :: MarkPriceKlineRequest , } # [pymethods] impl MarkPriceKlineRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MarkPriceKline { inner : venues :: MarkPriceKline , } # [pymethods] impl MarkPriceKline { # [staticmethod] fn from_inner (inner : MarkPriceKline) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn get_mark_price_klines <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_mark_price_klines () . await }) } } # [pyclass] # [derive (Clone)] pub struct PingResponse { inner : venues :: PingResponse , } # [pymethods] impl PingResponse { # [staticmethod] fn from_inner (inner : PingResponse) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn ping <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . ping () . await }) } } # [pyclass] # [derive (Clone)] pub struct ConstituentsRequest { inner : venues :: ConstituentsRequest , } # [pymethods] impl ConstituentsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pymethods] impl RestClient { fn get_constituents <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_constituents () . await }) } } # [pyclass] # [derive (Clone)] pub struct TopLongShortAccountRatioParams { inner : venues :: TopLongShortAccountRatioParams , } # [pymethods] impl TopLongShortAccountRatioParams { # [staticmethod] fn from_inner (inner : TopLongShortAccountRatioParams) -> Self { Self { inner } } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn period (& self) -> PyResult < PyObject > { Ok (self . inner . period . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TopLongShortAccountRatio { inner : venues :: TopLongShortAccountRatio , } # [pymethods] impl TopLongShortAccountRatio { # [staticmethod] fn from_inner (inner : TopLongShortAccountRatio) -> Self { Self { inner } } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn long_account (& self) -> PyResult < String > { Ok (self . inner . long_account . clone () . into ()) } # [getter] fn short_account (& self) -> PyResult < String > { Ok (self . inner . short_account . clone () . into ()) } # [getter] fn long_short_ratio (& self) -> PyResult < String > { Ok (self . inner . long_short_ratio . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < i64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pymethods] impl RestClient { fn get_top_long_short_account_ratio <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_top_long_short_account_ratio () . await }) } } # [pyclass] # [derive (Clone)] pub struct ServerTimeResponse { inner : venues :: ServerTimeResponse , } # [pymethods] impl ServerTimeResponse { # [staticmethod] fn from_inner (inner : ServerTimeResponse) -> Self { Self { inner } } # [getter] fn server_time (& self) -> PyResult < u64 > { Ok (self . inner . server_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_server_time <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_server_time () . await }) } } # [pyclass] # [derive (Clone)] pub struct BookTickerRequestBySymbol { inner : venues :: BookTickerRequestBySymbol , } # [pymethods] impl BookTickerRequestBySymbol { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BookTickerRequestByPair { inner : venues :: BookTickerRequestByPair , } # [pymethods] impl BookTickerRequestByPair { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn pair (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pair . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum BookTickerRequest { BySymbol , ByPair , } # [pyclass] # [derive (Clone)] pub struct BookTicker { inner : venues :: BookTicker , } # [pymethods] impl BookTicker { # [staticmethod] fn from_inner (inner : BookTicker) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn bid_price (& self) -> PyResult < String > { Ok (self . inner . bid_price . clone () . into ()) } # [getter] fn bid_qty (& self) -> PyResult < String > { Ok (self . inner . bid_qty . clone () . into ()) } # [getter] fn ask_price (& self) -> PyResult < String > { Ok (self . inner . ask_price . clone () . into ()) } # [getter] fn ask_qty (& self) -> PyResult < String > { Ok (self . inner . ask_qty . clone () . into ()) } # [getter] fn time (& self) -> PyResult < i64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_book_ticker <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_book_ticker () . await }) } } # [pyclass] # [derive (Clone)] pub struct GlobalLongShortAccountRatioParams { inner : venues :: GlobalLongShortAccountRatioParams , } # [pymethods] impl GlobalLongShortAccountRatioParams { # [staticmethod] fn from_inner (inner : GlobalLongShortAccountRatioParams) -> Self { Self { inner } } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn period (& self) -> PyResult < PyObject > { Ok (self . inner . period . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GlobalLongShortAccountRatio { inner : venues :: GlobalLongShortAccountRatio , } # [pymethods] impl GlobalLongShortAccountRatio { # [staticmethod] fn from_inner (inner : GlobalLongShortAccountRatio) -> Self { Self { inner } } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn long_account (& self) -> PyResult < String > { Ok (self . inner . long_account . clone () . into ()) } # [getter] fn short_account (& self) -> PyResult < String > { Ok (self . inner . short_account . clone () . into ()) } # [getter] fn long_short_ratio (& self) -> PyResult < String > { Ok (self . inner . long_short_ratio . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < i64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pymethods] impl RestClient { fn get_global_long_short_account_ratio <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_global_long_short_account_ratio () . await }) } } # [pyclass] # [derive (Clone)] pub struct RecentTradesRequest { inner : venues :: RecentTradesRequest , } # [pymethods] impl RecentTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Trade { inner : venues :: Trade , } # [pymethods] impl Trade { # [staticmethod] fn from_inner (inner : Trade) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < u64 > { Ok (self . inner . id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < String > { Ok (self . inner . qty . clone () . into ()) } # [getter] fn base_qty (& self) -> PyResult < String > { Ok (self . inner . base_qty . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn is_buyer_maker (& self) -> PyResult < bool > { Ok (self . inner . is_buyer_maker . clone () . into ()) } } # [pymethods] impl RestClient { fn get_recent_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_recent_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct ContinuousKlineRequest { inner : venues :: ContinuousKlineRequest , } # [pymethods] impl ContinuousKlineRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn contract_type (& self) -> PyResult < PyObject > { Ok (self . inner . contract_type . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ContinuousKline { inner : venues :: ContinuousKline , } # [pymethods] impl ContinuousKline { # [staticmethod] fn from_inner (inner : ContinuousKline) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn get_continuous_klines <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_continuous_klines () . await }) } } # [pyclass] # [derive (Clone)] pub struct OrderBookRequest { inner : venues :: OrderBookRequest , } # [pymethods] impl OrderBookRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderBookResponse { inner : venues :: OrderBookResponse , } # [pymethods] impl OrderBookResponse { # [staticmethod] fn from_inner (inner : OrderBookResponse) -> Self { Self { inner } } # [getter] fn last_update_id (& self) -> PyResult < u64 > { Ok (self . inner . last_update_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn event_time (& self) -> PyResult < u64 > { Ok (self . inner . event_time . clone () . into ()) } # [getter] fn transaction_time (& self) -> PyResult < u64 > { Ok (self . inner . transaction_time . clone () . into ()) } # [getter] fn bids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . bids . clone () . into ()) } # [getter] fn asks (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . asks . clone () . into ()) } } # [pymethods] impl RestClient { fn get_order_book <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_order_book () . await }) } } # [pyclass] # [derive (Clone)] pub struct TickerPriceRequest { inner : venues :: TickerPriceRequest , } # [pymethods] impl TickerPriceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pair . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TickerPrice { inner : venues :: TickerPrice , } # [pymethods] impl TickerPrice { # [staticmethod] fn from_inner (inner : TickerPrice) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn ps (& self) -> PyResult < String > { Ok (self . inner . ps . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn time (& self) -> PyResult < i64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_ticker_price <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_ticker_price () . await }) } } # [pyclass] # [derive (Clone)] pub struct FundingInfoRequest { inner : venues :: FundingInfoRequest , } # [pymethods] impl FundingInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pyclass] # [derive (Clone)] pub struct FundingInfo { inner : venues :: FundingInfo , } # [pymethods] impl FundingInfo { # [staticmethod] fn from_inner (inner : FundingInfo) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn adjusted_funding_rate_cap (& self) -> PyResult < String > { Ok (self . inner . adjusted_funding_rate_cap . clone () . into ()) } # [getter] fn adjusted_funding_rate_floor (& self) -> PyResult < String > { Ok (self . inner . adjusted_funding_rate_floor . clone () . into ()) } # [getter] fn funding_interval_hours (& self) -> PyResult < u64 > { Ok (self . inner . funding_interval_hours . clone () . into ()) } # [getter] fn disclaimer (& self) -> PyResult < bool > { Ok (self . inner . disclaimer . clone () . into ()) } } # [pymethods] impl RestClient { fn get_funding_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_funding_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct ModifyIsolatedPositionMarginRequest { inner : venues :: ModifyIsolatedPositionMarginRequest , } # [pymethods] impl ModifyIsolatedPositionMarginRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn modification_type (& self) -> PyResult < PyObject > { Ok (self . inner . modification_type . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ModifyIsolatedPositionMarginResponse { inner : venues :: ModifyIsolatedPositionMarginResponse , } # [pymethods] impl ModifyIsolatedPositionMarginResponse { # [staticmethod] fn from_inner (inner : ModifyIsolatedPositionMarginResponse) -> Self { Self { inner } } # [getter] fn amount (& self) -> PyResult < f64 > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn code (& self) -> PyResult < u64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn modification_type (& self) -> PyResult < u64 > { Ok (self . inner . modification_type . clone () . into ()) } } # [pymethods] impl RestClient { fn modify_isolated_position_margin <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . modify_isolated_position_margin () . await }) } } # [pyclass] # [derive (Clone)] pub struct AutoCancelAllOpenOrdersRequest { inner : venues :: AutoCancelAllOpenOrdersRequest , } # [pymethods] impl AutoCancelAllOpenOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn countdown_time (& self) -> PyResult < u64 > { Ok (self . inner . countdown_time . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AutoCancelAllOpenOrdersResponse { inner : venues :: AutoCancelAllOpenOrdersResponse , } # [pymethods] impl AutoCancelAllOpenOrdersResponse { # [staticmethod] fn from_inner (inner : AutoCancelAllOpenOrdersResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn countdown_time (& self) -> PyResult < String > { Ok (self . inner . countdown_time . clone () . into ()) } } # [pymethods] impl RestClient { fn auto_cancel_all_open_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . auto_cancel_all_open_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct CreateListenKeyRequest { inner : venues :: CreateListenKeyRequest , } # [pymethods] impl CreateListenKeyRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ExtendListenKeyRequest { inner : venues :: ExtendListenKeyRequest , } # [pymethods] impl ExtendListenKeyRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct DeleteListenKeyRequest { inner : venues :: DeleteListenKeyRequest , } # [pymethods] impl DeleteListenKeyRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CreateListenKeyResponse { inner : venues :: CreateListenKeyResponse , } # [pymethods] impl CreateListenKeyResponse { # [staticmethod] fn from_inner (inner : CreateListenKeyResponse) -> Self { Self { inner } } # [getter] fn listen_key (& self) -> PyResult < String > { Ok (self . inner . listen_key . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ListenKeyResponse { inner : venues :: ListenKeyResponse , } # [pymethods] impl ListenKeyResponse { # [staticmethod] fn from_inner (inner : ListenKeyResponse) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn create_listen_key <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . create_listen_key () . await }) } fn extend_listen_key <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . extend_listen_key () . await }) } fn delete_listen_key <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . delete_listen_key () . await }) } } # [pyclass] # [derive (Clone)] pub struct PositionRiskRequest { inner : venues :: PositionRiskRequest , } # [pymethods] impl PositionRiskRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn margin_asset (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . margin_asset . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pair . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PositionRisk { inner : venues :: PositionRisk , } # [pymethods] impl PositionRisk { # [staticmethod] fn from_inner (inner : PositionRisk) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn position_amt (& self) -> PyResult < String > { Ok (self . inner . position_amt . clone () . into ()) } # [getter] fn entry_price (& self) -> PyResult < String > { Ok (self . inner . entry_price . clone () . into ()) } # [getter] fn break_even_price (& self) -> PyResult < String > { Ok (self . inner . break_even_price . clone () . into ()) } # [getter] fn mark_price (& self) -> PyResult < String > { Ok (self . inner . mark_price . clone () . into ()) } # [getter] fn unrealized_profit (& self) -> PyResult < String > { Ok (self . inner . unrealized_profit . clone () . into ()) } # [getter] fn liquidation_price (& self) -> PyResult < String > { Ok (self . inner . liquidation_price . clone () . into ()) } # [getter] fn leverage (& self) -> PyResult < String > { Ok (self . inner . leverage . clone () . into ()) } # [getter] fn max_qty (& self) -> PyResult < String > { Ok (self . inner . max_qty . clone () . into ()) } # [getter] fn margin_type (& self) -> PyResult < String > { Ok (self . inner . margin_type . clone () . into ()) } # [getter] fn isolated_margin (& self) -> PyResult < String > { Ok (self . inner . isolated_margin . clone () . into ()) } # [getter] fn is_auto_add_margin (& self) -> PyResult < String > { Ok (self . inner . is_auto_add_margin . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < String > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_position_risk <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_position_risk () . await }) } } # [pyclass] # [derive (Clone)] pub struct ChangeInitialLeverageRequest { inner : venues :: ChangeInitialLeverageRequest , } # [pymethods] impl ChangeInitialLeverageRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn leverage (& self) -> PyResult < u64 > { Ok (self . inner . leverage . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ChangeInitialLeverageResponse { inner : venues :: ChangeInitialLeverageResponse , } # [pymethods] impl ChangeInitialLeverageResponse { # [staticmethod] fn from_inner (inner : ChangeInitialLeverageResponse) -> Self { Self { inner } } # [getter] fn leverage (& self) -> PyResult < u64 > { Ok (self . inner . leverage . clone () . into ()) } # [getter] fn max_qty (& self) -> PyResult < String > { Ok (self . inner . max_qty . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pymethods] impl RestClient { fn change_initial_leverage <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . change_initial_leverage () . await }) } } # [pyclass] # [derive (Clone)] pub struct AllOrdersRequest { inner : venues :: AllOrdersRequest , } # [pymethods] impl AllOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pair . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AllOrder { inner : venues :: AllOrder , } # [pymethods] impl AllOrder { # [staticmethod] fn from_inner (inner : AllOrder) -> Self { Self { inner } } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn cum_base (& self) -> PyResult < String > { Ok (self . inner . cum_base . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn orig_type (& self) -> PyResult < String > { Ok (self . inner . orig_type . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn side (& self) -> PyResult < String > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < String > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn status (& self) -> PyResult < String > { Ok (self . inner . status . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < String > { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn close_position (& self) -> PyResult < bool > { Ok (self . inner . close_position . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < String > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < String > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn activate_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . activate_price . clone () . into ()) } # [getter] fn price_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_rate . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < String > { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn price_protect (& self) -> PyResult < bool > { Ok (self . inner . price_protect . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < String > { Ok (self . inner . price_match . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < String > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pymethods] impl RestClient { fn get_all_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_all_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct NewOrderRequest { inner : venues :: NewOrderRequest , } # [pymethods] impl NewOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn new_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_client_order_id . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn close_position (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . close_position . clone () . into ()) } # [getter] fn activation_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . activation_price . clone () . into ()) } # [getter] fn callback_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . callback_rate . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn price_protect (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_protect . clone () . into ()) } # [getter] fn new_order_resp_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_order_resp_type . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_match . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct NewOrderResponse { inner : venues :: NewOrderResponse , } # [pymethods] impl NewOrderResponse { # [staticmethod] fn from_inner (inner : NewOrderResponse) -> Self { Self { inner } } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn cum_qty (& self) -> PyResult < String > { Ok (self . inner . cum_qty . clone () . into ()) } # [getter] fn cum_base (& self) -> PyResult < String > { Ok (self . inner . cum_base . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn status (& self) -> PyResult < String > { Ok (self . inner . status . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn close_position (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . close_position . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn orig_type (& self) -> PyResult < PyObject > { Ok (self . inner . orig_type . clone () . into ()) } # [getter] fn activate_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . activate_price . clone () . into ()) } # [getter] fn price_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_rate . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < PyObject > { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn price_protect (& self) -> PyResult < bool > { Ok (self . inner . price_protect . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_match . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pymethods] impl RestClient { fn post_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . post_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct AssetIndexRequest { inner : venues :: AssetIndexRequest , } # [pymethods] impl AssetIndexRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AssetIndexResponse { inner : venues :: AssetIndexResponse , } # [pymethods] impl AssetIndexResponse { # [staticmethod] fn from_inner (inner : AssetIndexResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn base_asset_list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . base_asset_list . clone () . into ()) } } # [pymethods] impl RestClient { fn get_asset_index <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_asset_index () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct GetDownloadIdRequest { inner : venues :: GetDownloadIdRequest , } # [pymethods] impl GetDownloadIdRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn start_time (& self) -> PyResult < u64 > { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < u64 > { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetDownloadLinkRequest { inner : venues :: GetDownloadLinkRequest , } # [pymethods] impl GetDownloadLinkRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn download_id (& self) -> PyResult < String > { Ok (self . inner . download_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetDownloadIdResponse { inner : venues :: GetDownloadIdResponse , } # [pymethods] impl GetDownloadIdResponse { # [staticmethod] fn from_inner (inner : GetDownloadIdResponse) -> Self { Self { inner } } # [getter] fn avg_cost_timestamp (& self) -> PyResult < String > { Ok (self . inner . avg_cost_timestamp . clone () . into ()) } # [getter] fn download_id (& self) -> PyResult < String > { Ok (self . inner . download_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetDownloadLinkResponse { inner : venues :: GetDownloadLinkResponse , } # [pymethods] impl GetDownloadLinkResponse { # [staticmethod] fn from_inner (inner : GetDownloadLinkResponse) -> Self { Self { inner } } # [getter] fn download_id (& self) -> PyResult < String > { Ok (self . inner . download_id . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn url (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . url . clone () . into ()) } # [getter] fn expired_timestamp (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . expired_timestamp . clone () . into ()) } } # [pymethods] impl RestClient { fn get_download_id_for_transaction_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_download_id_for_transaction_history () . await }) } fn get_download_link_for_transaction_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_download_link_for_transaction_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct QueryOrderRequest { inner : venues :: QueryOrderRequest , } # [pymethods] impl QueryOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct QueryOrderResponse { inner : venues :: QueryOrderResponse , } # [pymethods] impl QueryOrderResponse { # [staticmethod] fn from_inner (inner : QueryOrderResponse) -> Self { Self { inner } } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn cum_base (& self) -> PyResult < String > { Ok (self . inner . cum_base . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn orig_type (& self) -> PyResult < String > { Ok (self . inner . orig_type . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn side (& self) -> PyResult < String > { Ok (self . inner . side . clone () . into ()) } # [getter] fn status (& self) -> PyResult < String > { Ok (self . inner . status . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < String > { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn close_position (& self) -> PyResult < bool > { Ok (self . inner . close_position . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < String > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < String > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn activate_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . activate_price . clone () . into ()) } # [getter] fn price_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_rate . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < String > { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn price_protect (& self) -> PyResult < bool > { Ok (self . inner . price_protect . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < String > { Ok (self . inner . price_match . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < String > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pymethods] impl RestClient { fn get_query_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_query_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetPositionMarginChangeHistoryRequest { inner : venues :: GetPositionMarginChangeHistoryRequest , } # [pymethods] impl GetPositionMarginChangeHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn modification_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . modification_type . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PositionMarginChangeHistoryEntry { inner : venues :: PositionMarginChangeHistoryEntry , } # [pymethods] impl PositionMarginChangeHistoryEntry { # [staticmethod] fn from_inner (inner : PositionMarginChangeHistoryEntry) -> Self { Self { inner } } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn asset (& self) -> PyResult < String > { Ok (self . inner . asset . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn modification_type (& self) -> PyResult < u64 > { Ok (self . inner . modification_type . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } } # [pymethods] impl RestClient { fn get_position_margin_change_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_position_margin_change_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetFuturesAccountBalanceRequest { inner : venues :: GetFuturesAccountBalanceRequest , } # [pymethods] impl GetFuturesAccountBalanceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct FuturesAccountBalanceEntry { inner : venues :: FuturesAccountBalanceEntry , } # [pymethods] impl FuturesAccountBalanceEntry { # [staticmethod] fn from_inner (inner : FuturesAccountBalanceEntry) -> Self { Self { inner } } # [getter] fn account_alias (& self) -> PyResult < String > { Ok (self . inner . account_alias . clone () . into ()) } # [getter] fn asset (& self) -> PyResult < String > { Ok (self . inner . asset . clone () . into ()) } # [getter] fn balance (& self) -> PyResult < String > { Ok (self . inner . balance . clone () . into ()) } # [getter] fn withdraw_available (& self) -> PyResult < String > { Ok (self . inner . withdraw_available . clone () . into ()) } # [getter] fn cross_wallet_balance (& self) -> PyResult < String > { Ok (self . inner . cross_wallet_balance . clone () . into ()) } # [getter] fn cross_un_pnl (& self) -> PyResult < String > { Ok (self . inner . cross_un_pnl . clone () . into ()) } # [getter] fn available_balance (& self) -> PyResult < String > { Ok (self . inner . available_balance . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_futures_account_balance <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_futures_account_balance () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetCurrentPositionModeRequest { inner : venues :: GetCurrentPositionModeRequest , } # [pymethods] impl GetCurrentPositionModeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetCurrentPositionModeResponse { inner : venues :: GetCurrentPositionModeResponse , } # [pymethods] impl GetCurrentPositionModeResponse { # [staticmethod] fn from_inner (inner : GetCurrentPositionModeResponse) -> Self { Self { inner } } # [getter] fn dual_side_position (& self) -> PyResult < bool > { Ok (self . inner . dual_side_position . clone () . into ()) } } # [pymethods] impl RestClient { fn get_current_position_mode <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_current_position_mode () . await }) } } # [pyclass] # [derive (Clone)] pub struct QueryCurrentOpenOrderRequest { inner : venues :: QueryCurrentOpenOrderRequest , } # [pymethods] impl QueryCurrentOpenOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct QueryCurrentOpenOrderResponse { inner : venues :: QueryCurrentOpenOrderResponse , } # [pymethods] impl QueryCurrentOpenOrderResponse { # [staticmethod] fn from_inner (inner : QueryCurrentOpenOrderResponse) -> Self { Self { inner } } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn cum_base (& self) -> PyResult < String > { Ok (self . inner . cum_base . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn orig_type (& self) -> PyResult < PyObject > { Ok (self . inner . orig_type . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < String > { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn close_position (& self) -> PyResult < bool > { Ok (self . inner . close_position . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn activate_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . activate_price . clone () . into ()) } # [getter] fn price_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_rate . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < PyObject > { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn price_protect (& self) -> PyResult < bool > { Ok (self . inner . price_protect . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < PyObject > { Ok (self . inner . price_match . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pymethods] impl RestClient { fn query_current_open_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . query_current_open_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct BatchModifyOrderItem { inner : venues :: BatchModifyOrderItem , } # [pymethods] impl BatchModifyOrderItem { # [staticmethod] fn from_inner (inner : BatchModifyOrderItem) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_match . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ModifyMultipleOrdersRequest { inner : venues :: ModifyMultipleOrdersRequest , } # [pymethods] impl ModifyMultipleOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn batch_orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . batch_orders . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchModifyOrderError { inner : venues :: BatchModifyOrderError , } # [pymethods] impl BatchModifyOrderError { # [staticmethod] fn from_inner (inner : BatchModifyOrderError) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum BatchModifyOrderResponseItem { Success , Error , } # [pymethods] impl RestClient { fn modify_multiple_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . modify_multiple_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct UniversalTransferHistoryRequest { inner : venues :: UniversalTransferHistoryRequest , } # [pymethods] impl UniversalTransferHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn transfer_type (& self) -> PyResult < PyObject > { Ok (self . inner . transfer_type . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn current (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . current . clone () . into ()) } # [getter] fn size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . size . clone () . into ()) } # [getter] fn from_symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_symbol . clone () . into ()) } # [getter] fn to_symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . to_symbol . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct UniversalTransferHistoryRow { inner : venues :: UniversalTransferHistoryRow , } # [pymethods] impl UniversalTransferHistoryRow { # [staticmethod] fn from_inner (inner : UniversalTransferHistoryRow) -> Self { Self { inner } } # [getter] fn asset (& self) -> PyResult < String > { Ok (self . inner . asset . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn transfer_type (& self) -> PyResult < String > { Ok (self . inner . transfer_type . clone () . into ()) } # [getter] fn status (& self) -> PyResult < String > { Ok (self . inner . status . clone () . into ()) } # [getter] fn tran_id (& self) -> PyResult < u64 > { Ok (self . inner . tran_id . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct UniversalTransferHistoryResponse { inner : venues :: UniversalTransferHistoryResponse , } # [pymethods] impl UniversalTransferHistoryResponse { # [staticmethod] fn from_inner (inner : UniversalTransferHistoryResponse) -> Self { Self { inner } } # [getter] fn total (& self) -> PyResult < u64 > { Ok (self . inner . total . clone () . into ()) } # [getter] fn rows (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . rows . clone () . into ()) } } # [pymethods] impl RestClient { fn get_universal_transfer_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_universal_transfer_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct UniversalTransferRequest { inner : venues :: UniversalTransferRequest , } # [pymethods] impl UniversalTransferRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn transfer_type (& self) -> PyResult < PyObject > { Ok (self . inner . transfer_type . clone () . into ()) } # [getter] fn asset (& self) -> PyResult < String > { Ok (self . inner . asset . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn from_symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_symbol . clone () . into ()) } # [getter] fn to_symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . to_symbol . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct UniversalTransferResponse { inner : venues :: UniversalTransferResponse , } # [pymethods] impl UniversalTransferResponse { # [staticmethod] fn from_inner (inner : UniversalTransferResponse) -> Self { Self { inner } } # [getter] fn tran_id (& self) -> PyResult < u64 > { Ok (self . inner . tran_id . clone () . into ()) } } # [pymethods] impl RestClient { fn universal_transfer <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . universal_transfer () . await }) } } # [pyclass] # [derive (Clone)] pub struct OpenOrdersRequest { inner : venues :: OpenOrdersRequest , } # [pymethods] impl OpenOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pair . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OpenOrder { inner : venues :: OpenOrder , } # [pymethods] impl OpenOrder { # [staticmethod] fn from_inner (inner : OpenOrder) -> Self { Self { inner } } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn cum_base (& self) -> PyResult < String > { Ok (self . inner . cum_base . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn orig_type (& self) -> PyResult < String > { Ok (self . inner . orig_type . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn side (& self) -> PyResult < String > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < String > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn status (& self) -> PyResult < String > { Ok (self . inner . status . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < String > { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn close_position (& self) -> PyResult < bool > { Ok (self . inner . close_position . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < String > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < String > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn activate_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . activate_price . clone () . into ()) } # [getter] fn price_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_rate . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < String > { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn price_protect (& self) -> PyResult < bool > { Ok (self . inner . price_protect . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_match . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pymethods] impl RestClient { fn get_open_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_open_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderRequest { inner : venues :: CancelOrderRequest , } # [pymethods] impl CancelOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderResponse { inner : venues :: CancelOrderResponse , } # [pymethods] impl CancelOrderResponse { # [staticmethod] fn from_inner (inner : CancelOrderResponse) -> Self { Self { inner } } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn cum_qty (& self) -> PyResult < String > { Ok (self . inner . cum_qty . clone () . into ()) } # [getter] fn cum_base (& self) -> PyResult < String > { Ok (self . inner . cum_base . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn orig_type (& self) -> PyResult < PyObject > { Ok (self . inner . orig_type . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn status (& self) -> PyResult < String > { Ok (self . inner . status . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn close_position (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . close_position . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn activate_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . activate_price . clone () . into ()) } # [getter] fn price_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_rate . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < PyObject > { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn price_protect (& self) -> PyResult < bool > { Ok (self . inner . price_protect . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_match . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pymethods] impl RestClient { fn delete_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . delete_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct NotionalBracketRequest { inner : venues :: NotionalBracketRequest , } # [pymethods] impl NotionalBracketRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn pair (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pair . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct NotionalBracketResponse { inner : venues :: NotionalBracketResponse , } # [pymethods] impl NotionalBracketResponse { # [staticmethod] fn from_inner (inner : NotionalBracketResponse) -> Self { Self { inner } } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn brackets (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . brackets . clone () . into ()) } } # [pymethods] impl RestClient { fn get_notional_brackets <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_notional_brackets () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOrderModifyHistoryRequest { inner : venues :: GetOrderModifyHistoryRequest , } # [pymethods] impl GetOrderModifyHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderAmendmentField { inner : venues :: OrderAmendmentField , } # [pymethods] impl OrderAmendmentField { # [staticmethod] fn from_inner (inner : OrderAmendmentField) -> Self { Self { inner } } # [getter] fn before (& self) -> PyResult < String > { Ok (self . inner . before . clone () . into ()) } # [getter] fn after (& self) -> PyResult < String > { Ok (self . inner . after . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderAmendment { inner : venues :: OrderAmendment , } # [pymethods] impl OrderAmendment { # [staticmethod] fn from_inner (inner : OrderAmendment) -> Self { Self { inner } } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn count (& self) -> PyResult < u64 > { Ok (self . inner . count . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderModifyHistoryEntry { inner : venues :: OrderModifyHistoryEntry , } # [pymethods] impl OrderModifyHistoryEntry { # [staticmethod] fn from_inner (inner : OrderModifyHistoryEntry) -> Self { Self { inner } } # [getter] fn amendment_id (& self) -> PyResult < u64 > { Ok (self . inner . amendment_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn amendment (& self) -> PyResult < PyObject > { Ok (self . inner . amendment . clone () . into ()) } } # [pymethods] impl RestClient { fn get_order_modify_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_order_modify_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct ChangePositionModeRequest { inner : venues :: ChangePositionModeRequest , } # [pymethods] impl ChangePositionModeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn dual_side_position (& self) -> PyResult < String > { Ok (self . inner . dual_side_position . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ChangePositionModeResponse { inner : venues :: ChangePositionModeResponse , } # [pymethods] impl ChangePositionModeResponse { # [staticmethod] fn from_inner (inner : ChangePositionModeResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < u64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pymethods] impl RestClient { fn change_position_mode <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . change_position_mode () . await }) } } # [pyclass] # [derive (Clone)] pub struct AccountRequest { inner : venues :: AccountRequest , } # [pymethods] impl AccountRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountResponse { inner : venues :: AccountResponse , } # [pymethods] impl AccountResponse { # [staticmethod] fn from_inner (inner : AccountResponse) -> Self { Self { inner } } # [getter] fn fee_tier (& self) -> PyResult < i64 > { Ok (self . inner . fee_tier . clone () . into ()) } # [getter] fn can_trade (& self) -> PyResult < bool > { Ok (self . inner . can_trade . clone () . into ()) } # [getter] fn can_deposit (& self) -> PyResult < bool > { Ok (self . inner . can_deposit . clone () . into ()) } # [getter] fn can_withdraw (& self) -> PyResult < bool > { Ok (self . inner . can_withdraw . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < i64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn assets (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . assets . clone () . into ()) } # [getter] fn positions (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . positions . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Position { inner : venues :: Position , } # [pymethods] impl Position { # [staticmethod] fn from_inner (inner : Position) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn position_amt (& self) -> PyResult < String > { Ok (self . inner . position_amt . clone () . into ()) } # [getter] fn initial_margin (& self) -> PyResult < String > { Ok (self . inner . initial_margin . clone () . into ()) } # [getter] fn maint_margin (& self) -> PyResult < String > { Ok (self . inner . maint_margin . clone () . into ()) } # [getter] fn unrealized_profit (& self) -> PyResult < String > { Ok (self . inner . unrealized_profit . clone () . into ()) } # [getter] fn position_initial_margin (& self) -> PyResult < String > { Ok (self . inner . position_initial_margin . clone () . into ()) } # [getter] fn open_order_initial_margin (& self) -> PyResult < String > { Ok (self . inner . open_order_initial_margin . clone () . into ()) } # [getter] fn leverage (& self) -> PyResult < String > { Ok (self . inner . leverage . clone () . into ()) } # [getter] fn isolated (& self) -> PyResult < bool > { Ok (self . inner . isolated . clone () . into ()) } # [getter] fn margin_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . margin_type . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn entry_price (& self) -> PyResult < String > { Ok (self . inner . entry_price . clone () . into ()) } # [getter] fn break_even_price (& self) -> PyResult < String > { Ok (self . inner . break_even_price . clone () . into ()) } # [getter] fn max_qty (& self) -> PyResult < String > { Ok (self . inner . max_qty . clone () . into ()) } # [getter] fn notional_value (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . notional_value . clone () . into ()) } # [getter] fn isolated_wallet (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . isolated_wallet . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < i64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account () . await }) } } # [pyclass] # [derive (Clone)] pub struct TradingStatusRequest { inner : venues :: TradingStatusRequest , } # [pymethods] impl TradingStatusRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TradingStatusResponse { inner : venues :: TradingStatusResponse , } # [pymethods] impl TradingStatusResponse { # [staticmethod] fn from_inner (inner : TradingStatusResponse) -> Self { Self { inner } } # [getter] fn is_locked (& self) -> PyResult < bool > { Ok (self . inner . is_locked . clone () . into ()) } # [getter] fn planned_recover_time (& self) -> PyResult < u64 > { Ok (self . inner . planned_recover_time . clone () . into ()) } # [getter] fn trigger_condition (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trigger_condition . clone () . into ()) } # [getter] fn indicators (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . indicators . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_trading_status <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_trading_status () . await }) } } # [pyclass] # [derive (Clone)] pub struct AccountTradeListRequest { inner : venues :: AccountTradeListRequest , } # [pymethods] impl AccountTradeListRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pair . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn from_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_id . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountTrade { inner : venues :: AccountTrade , } # [pymethods] impl AccountTrade { # [staticmethod] fn from_inner (inner : AccountTrade) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn id (& self) -> PyResult < u64 > { Ok (self . inner . id . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn realized_pnl (& self) -> PyResult < String > { Ok (self . inner . realized_pnl . clone () . into ()) } # [getter] fn margin_asset (& self) -> PyResult < String > { Ok (self . inner . margin_asset . clone () . into ()) } # [getter] fn base_qty (& self) -> PyResult < String > { Ok (self . inner . base_qty . clone () . into ()) } # [getter] fn commission (& self) -> PyResult < String > { Ok (self . inner . commission . clone () . into ()) } # [getter] fn commission_asset (& self) -> PyResult < String > { Ok (self . inner . commission_asset . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn buyer (& self) -> PyResult < bool > { Ok (self . inner . buyer . clone () . into ()) } # [getter] fn maker (& self) -> PyResult < bool > { Ok (self . inner . maker . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct ModifyOrderRequest { inner : venues :: ModifyOrderRequest , } # [pymethods] impl ModifyOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_match . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ModifyOrderResponse { inner : venues :: ModifyOrderResponse , } # [pymethods] impl ModifyOrderResponse { # [staticmethod] fn from_inner (inner : ModifyOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cum_qty (& self) -> PyResult < String > { Ok (self . inner . cum_qty . clone () . into ()) } # [getter] fn cum_base (& self) -> PyResult < String > { Ok (self . inner . cum_base . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn close_position (& self) -> PyResult < bool > { Ok (self . inner . close_position . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < String > { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < PyObject > { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn price_protect (& self) -> PyResult < bool > { Ok (self . inner . price_protect . clone () . into ()) } # [getter] fn orig_type (& self) -> PyResult < PyObject > { Ok (self . inner . orig_type . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < PyObject > { Ok (self . inner . price_match . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pymethods] impl RestClient { fn modify_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . modify_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct IncomeHistoryRequest { inner : venues :: IncomeHistoryRequest , } # [pymethods] impl IncomeHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn income_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . income_type . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct IncomeHistoryEntry { inner : venues :: IncomeHistoryEntry , } # [pymethods] impl IncomeHistoryEntry { # [staticmethod] fn from_inner (inner : IncomeHistoryEntry) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn income_type (& self) -> PyResult < PyObject > { Ok (self . inner . income_type . clone () . into ()) } # [getter] fn income (& self) -> PyResult < String > { Ok (self . inner . income . clone () . into ()) } # [getter] fn asset (& self) -> PyResult < String > { Ok (self . inner . asset . clone () . into ()) } # [getter] fn info (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn tran_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tran_id . clone () . into ()) } # [getter] fn trade_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trade_id . clone () . into ()) } } # [pymethods] impl RestClient { fn get_income_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_income_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOpenOrdersRequest { inner : venues :: CancelAllOpenOrdersRequest , } # [pymethods] impl CancelAllOpenOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOpenOrdersResponse { inner : venues :: CancelAllOpenOrdersResponse , } # [pymethods] impl CancelAllOpenOrdersResponse { # [staticmethod] fn from_inner (inner : CancelAllOpenOrdersResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < u64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_all_open_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_all_open_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct ChangeMultiAssetModeRequest { inner : venues :: ChangeMultiAssetModeRequest , } # [pymethods] impl ChangeMultiAssetModeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn multi_assets_margin (& self) -> PyResult < bool > { Ok (self . inner . multi_assets_margin . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetMultiAssetModeRequest { inner : venues :: GetMultiAssetModeRequest , } # [pymethods] impl GetMultiAssetModeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ChangeMultiAssetModeResponse { inner : venues :: ChangeMultiAssetModeResponse , } # [pymethods] impl ChangeMultiAssetModeResponse { # [staticmethod] fn from_inner (inner : ChangeMultiAssetModeResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < u64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetMultiAssetModeResponse { inner : venues :: GetMultiAssetModeResponse , } # [pymethods] impl GetMultiAssetModeResponse { # [staticmethod] fn from_inner (inner : GetMultiAssetModeResponse) -> Self { Self { inner } } # [getter] fn multi_assets_margin (& self) -> PyResult < bool > { Ok (self . inner . multi_assets_margin . clone () . into ()) } } # [pymethods] impl RestClient { fn change_multi_asset_mode <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . change_multi_asset_mode () . await }) } fn get_multi_asset_mode <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_multi_asset_mode () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetPositionAdlQuantileRequest { inner : venues :: GetPositionAdlQuantileRequest , } # [pymethods] impl GetPositionAdlQuantileRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PositionAdlQuantileEntry { inner : venues :: PositionAdlQuantileEntry , } # [pymethods] impl PositionAdlQuantileEntry { # [staticmethod] fn from_inner (inner : PositionAdlQuantileEntry) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn adl_quantile (& self) -> PyResult < PyObject > { Ok (self . inner . adl_quantile . clone () . into ()) } } # [pymethods] impl RestClient { fn get_position_adl_quantile <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_position_adl_quantile () . await }) } } # [pyclass] # [derive (Clone)] pub struct BatchOrderRequest { inner : venues :: BatchOrderRequest , } # [pymethods] impl BatchOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn new_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_client_order_id . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn activation_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . activation_price . clone () . into ()) } # [getter] fn callback_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . callback_rate . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn price_protect (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_protect . clone () . into ()) } # [getter] fn new_order_resp_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_order_resp_type . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_match . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PlaceBatchOrdersRequest { inner : venues :: PlaceBatchOrdersRequest , } # [pymethods] impl PlaceBatchOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn batch_orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . batch_orders . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchOrderResponse { inner : venues :: BatchOrderResponse , } # [pymethods] impl BatchOrderResponse { # [staticmethod] fn from_inner (inner : BatchOrderResponse) -> Self { Self { inner } } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn cum_qty (& self) -> PyResult < String > { Ok (self . inner . cum_qty . clone () . into ()) } # [getter] fn cum_base (& self) -> PyResult < String > { Ok (self . inner . cum_base . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn orig_type (& self) -> PyResult < PyObject > { Ok (self . inner . orig_type . clone () . into ()) } # [getter] fn activate_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . activate_price . clone () . into ()) } # [getter] fn price_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price_rate . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < PyObject > { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn price_protect (& self) -> PyResult < bool > { Ok (self . inner . price_protect . clone () . into ()) } # [getter] fn price_match (& self) -> PyResult < PyObject > { Ok (self . inner . price_match . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum BatchOrderResult { Ok , Err , } # [pymethods] impl RestClient { fn place_batch_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . place_batch_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct ChangeMarginTypeRequest { inner : venues :: ChangeMarginTypeRequest , } # [pymethods] impl ChangeMarginTypeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn margin_type (& self) -> PyResult < PyObject > { Ok (self . inner . margin_type . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ChangeMarginTypeResponse { inner : venues :: ChangeMarginTypeResponse , } # [pymethods] impl ChangeMarginTypeResponse { # [staticmethod] fn from_inner (inner : ChangeMarginTypeResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < u64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pymethods] impl RestClient { fn change_margin_type <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . change_margin_type () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetUserCommissionRateRequest { inner : venues :: GetUserCommissionRateRequest , } # [pymethods] impl GetUserCommissionRateRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetUserCommissionRateResponse { inner : venues :: GetUserCommissionRateResponse , } # [pymethods] impl GetUserCommissionRateResponse { # [staticmethod] fn from_inner (inner : GetUserCommissionRateResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn maker_commission_rate (& self) -> PyResult < String > { Ok (self . inner . maker_commission_rate . clone () . into ()) } # [getter] fn taker_commission_rate (& self) -> PyResult < String > { Ok (self . inner . taker_commission_rate . clone () . into ()) } } # [pymethods] impl RestClient { fn get_user_commission_rate <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_user_commission_rate () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetForceOrdersRequest { inner : venues :: GetForceOrdersRequest , } # [pymethods] impl GetForceOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn auto_close_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . auto_close_type . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ForceOrder { inner : venues :: ForceOrder , } # [pymethods] impl ForceOrder { # [staticmethod] fn from_inner (inner : ForceOrder) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn pair (& self) -> PyResult < String > { Ok (self . inner . pair . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cum_base (& self) -> PyResult < String > { Ok (self . inner . cum_base . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn close_position (& self) -> PyResult < bool > { Ok (self . inner . close_position . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn position_side (& self) -> PyResult < PyObject > { Ok (self . inner . position_side . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < String > { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < PyObject > { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn price_protect (& self) -> PyResult < bool > { Ok (self . inner . price_protect . clone () . into ()) } # [getter] fn orig_type (& self) -> PyResult < PyObject > { Ok (self . inner . orig_type . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_force_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_force_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct ErrorResponse { inner : venues :: ErrorResponse , } # [pymethods] impl ErrorResponse { # [staticmethod] fn from_inner (inner : ErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum RateLimitType { RequestWeight , Orders , RawRequests , RequestSize , OrdersPerSecond , OrdersPerDay , OrdersPerCountdown , } # [pyclass] # [derive (Clone)] pub enum RateLimitInterval { Second , Minute , Day , } # [pyclass] # [derive (Clone)] pub enum IntervalUnit { Second , Minute , Hour , Day , } # [pyclass] # [derive (Clone)] pub struct RateLimitHeader { inner : venues :: RateLimitHeader , } # [pymethods] impl RateLimitHeader { # [staticmethod] fn from_inner (inner : RateLimitHeader) -> Self { Self { inner } } # [getter] fn kind (& self) -> PyResult < PyObject > { Ok (self . inner . kind . clone () . into ()) } # [getter] fn interval_value (& self) -> PyResult < u64 > { Ok (self . inner . interval_value . clone () . into ()) } # [getter] fn interval_unit (& self) -> PyResult < PyObject > { Ok (self . inner . interval_unit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum RateLimitHeaderKind { UsedWeight , OrderCount , } # [pyclass] # [derive (Clone)] pub struct RateLimitUsage { inner : venues :: RateLimitUsage , } # [pymethods] impl RateLimitUsage { # [staticmethod] fn from_inner (inner : RateLimitUsage) -> Self { Self { inner } } # [getter] fn raw_request_timestamps (& self) -> PyResult < PyObject > { Ok (self . inner . raw_request_timestamps . clone () . into ()) } # [getter] fn order_timestamps_10s (& self) -> PyResult < PyObject > { Ok (self . inner . order_timestamps_10s . clone () . into ()) } # [getter] fn order_timestamps_1m (& self) -> PyResult < PyObject > { Ok (self . inner . order_timestamps_1m . clone () . into ()) } # [getter] fn order_timestamps_1d (& self) -> PyResult < PyObject > { Ok (self . inner . order_timestamps_1d . clone () . into ()) } # [getter] fn used_weight_1m (& self) -> PyResult < u64 > { Ok (self . inner . used_weight_1m . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimiter { inner : venues :: RateLimiter , } # [pymethods] impl RateLimiter { # [staticmethod] fn from_inner (inner : RateLimiter) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct RestResponse { inner : venues :: RestResponse , } # [pymethods] impl RestResponse { # [staticmethod] fn from_inner (inner : RestResponse) -> Self { Self { inner } } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } # [getter] fn headers (& self) -> PyResult < PyObject > { Ok (self . inner . headers . clone () . into ()) } # [getter] fn request_duration (& self) -> PyResult < PyObject > { Ok (self . inner . request_duration . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum OrderSide { Buy , Sell , } # [pyclass] # [derive (Clone)] pub enum OrderType { Limit , Market , StopLoss , StopLossLimit , TakeProfit , TakeProfitLimit , LimitMaker , } # [pyclass] # [derive (Clone)] pub enum TimeInForce { GTC , IOC , FOK , } # [pyclass] # [derive (Clone)] pub enum OrderStatus { New , PartiallyFilled , Filled , Canceled , PendingCancel , Rejected , Expired , ExpiredInMatch , } # [pyclass] # [derive (Clone)] pub enum OrderResponseType { Ack , Result , Full , } # [pyclass] # [derive (Clone)] pub enum SelfTradePreventionMode { None , ExpireTaker , ExpireMaker , ExpireBoth , } # [pyclass] # [derive (Clone)] pub enum SymbolStatus { PreTrading , Trading , PostTrading , EndOfDay , Halt , AuctionMatch , Break , } # [pyclass] # [derive (Clone)] pub enum KlineInterval { I1s , I1m , I3m , I5m , I15m , I30m , I1h , I2h , I4h , I6h , I8h , I12h , I1d , I3d , I1w , I1M , } # [pyclass] # [derive (Clone)] pub enum CancelRestrictions { OnlyNew , OnlyPartiallyFilled , } # [pyclass] # [derive (Clone)] pub enum CancelReplaceMode { StopOnFailure , AllowFailure , } # [pyclass] # [derive (Clone)] pub enum OrderRateLimitExceededMode { DoNothing , CancelOnly , } # [pyclass] # [derive (Clone)] pub enum OrderListStatus { Response , ExecStarted , AllDone , Reject , } # [pyclass] # [derive (Clone)] pub enum OrderListOrderStatus { Executing , AllDone , Reject , } # [pyclass] # [derive (Clone)] pub enum ContingencyType { Oco , Oto , Otoco , } # [pyclass] # [derive (Clone)] pub enum AllocationType { Sor , } # [pyclass] # [derive (Clone)] pub struct ResponseHeaders { inner : venues :: ResponseHeaders , } # [pymethods] impl ResponseHeaders { # [staticmethod] fn from_inner (inner : ResponseHeaders) -> Self { Self { inner } } # [getter] fn values (& self) -> PyResult < PyObject > { Ok (self . inner . values . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RestResponse { inner : venues :: RestResponse , } # [pymethods] impl RestResponse { # [staticmethod] fn from_inner (inner : RestResponse) -> Self { Self { inner } } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } # [getter] fn headers (& self) -> PyResult < PyObject > { Ok (self . inner . headers . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AggTradesRequest { inner : venues :: AggTradesRequest , } # [pymethods] impl AggTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn from_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AggTrade { inner : venues :: AggTrade , } # [pymethods] impl AggTrade { # [staticmethod] fn from_inner (inner : AggTrade) -> Self { Self { inner } } # [getter] fn agg_trade_id (& self) -> PyResult < u64 > { Ok (self . inner . agg_trade_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn first_trade_id (& self) -> PyResult < u64 > { Ok (self . inner . first_trade_id . clone () . into ()) } # [getter] fn last_trade_id (& self) -> PyResult < u64 > { Ok (self . inner . last_trade_id . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < u64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn is_buyer_maker (& self) -> PyResult < bool > { Ok (self . inner . is_buyer_maker . clone () . into ()) } # [getter] fn is_best_match (& self) -> PyResult < bool > { Ok (self . inner . is_best_match . clone () . into ()) } } # [pymethods] impl RestClient { fn get_agg_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_agg_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct AvgPriceRequest { inner : venues :: AvgPriceRequest , } # [pymethods] impl AvgPriceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AvgPriceResponse { inner : venues :: AvgPriceResponse , } # [pymethods] impl AvgPriceResponse { # [staticmethod] fn from_inner (inner : AvgPriceResponse) -> Self { Self { inner } } # [getter] fn mins (& self) -> PyResult < u64 > { Ok (self . inner . mins . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn close_time (& self) -> PyResult < u64 > { Ok (self . inner . close_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_avg_price <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_avg_price () . await }) } } # [pyclass] # [derive (Clone)] pub struct ExchangeInfoRequest { inner : venues :: ExchangeInfoRequest , } # [pymethods] impl ExchangeInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn symbols (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbols . clone () . into ()) } # [getter] fn permissions (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . permissions . clone () . into ()) } # [getter] fn show_permission_sets (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . show_permission_sets . clone () . into ()) } # [getter] fn symbol_status (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol_status . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ExchangeInfoResponse { inner : venues :: ExchangeInfoResponse , } # [pymethods] impl ExchangeInfoResponse { # [staticmethod] fn from_inner (inner : ExchangeInfoResponse) -> Self { Self { inner } } # [getter] fn timezone (& self) -> PyResult < String > { Ok (self . inner . timezone . clone () . into ()) } # [getter] fn server_time (& self) -> PyResult < u64 > { Ok (self . inner . server_time . clone () . into ()) } # [getter] fn rate_limits (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . rate_limits . clone () . into ()) } # [getter] fn exchange_filters (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . exchange_filters . clone () . into ()) } # [getter] fn symbols (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . symbols . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimit { inner : venues :: RateLimit , } # [pymethods] impl RateLimit { # [staticmethod] fn from_inner (inner : RateLimit) -> Self { Self { inner } } # [getter] fn rate_limit_type (& self) -> PyResult < String > { Ok (self . inner . rate_limit_type . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < String > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn interval_num (& self) -> PyResult < u64 > { Ok (self . inner . interval_num . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < u64 > { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Symbol { inner : venues :: Symbol , } # [pymethods] impl Symbol { # [staticmethod] fn from_inner (inner : Symbol) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn status (& self) -> PyResult < String > { Ok (self . inner . status . clone () . into ()) } # [getter] fn base_asset (& self) -> PyResult < String > { Ok (self . inner . base_asset . clone () . into ()) } # [getter] fn base_asset_precision (& self) -> PyResult < u64 > { Ok (self . inner . base_asset_precision . clone () . into ()) } # [getter] fn quote_asset (& self) -> PyResult < String > { Ok (self . inner . quote_asset . clone () . into ()) } # [getter] fn quote_precision (& self) -> PyResult < u64 > { Ok (self . inner . quote_precision . clone () . into ()) } # [getter] fn quote_asset_precision (& self) -> PyResult < u64 > { Ok (self . inner . quote_asset_precision . clone () . into ()) } # [getter] fn base_commission_precision (& self) -> PyResult < u64 > { Ok (self . inner . base_commission_precision . clone () . into ()) } # [getter] fn quote_commission_precision (& self) -> PyResult < u64 > { Ok (self . inner . quote_commission_precision . clone () . into ()) } # [getter] fn order_types (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_types . clone () . into ()) } # [getter] fn iceberg_allowed (& self) -> PyResult < bool > { Ok (self . inner . iceberg_allowed . clone () . into ()) } # [getter] fn oco_allowed (& self) -> PyResult < bool > { Ok (self . inner . oco_allowed . clone () . into ()) } # [getter] fn quote_order_qty_market_allowed (& self) -> PyResult < bool > { Ok (self . inner . quote_order_qty_market_allowed . clone () . into ()) } # [getter] fn allow_trailing_stop (& self) -> PyResult < bool > { Ok (self . inner . allow_trailing_stop . clone () . into ()) } # [getter] fn cancel_replace_allowed (& self) -> PyResult < bool > { Ok (self . inner . cancel_replace_allowed . clone () . into ()) } # [getter] fn is_spot_trading_allowed (& self) -> PyResult < bool > { Ok (self . inner . is_spot_trading_allowed . clone () . into ()) } # [getter] fn is_margin_trading_allowed (& self) -> PyResult < bool > { Ok (self . inner . is_margin_trading_allowed . clone () . into ()) } # [getter] fn filters (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . filters . clone () . into ()) } # [getter] fn permissions (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . permissions . clone () . into ()) } # [getter] fn permission_sets (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . permission_sets . clone () . into ()) } # [getter] fn default_self_trade_prevention_mode (& self) -> PyResult < String > { Ok (self . inner . default_self_trade_prevention_mode . clone () . into ()) } # [getter] fn allowed_self_trade_prevention_modes (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . allowed_self_trade_prevention_modes . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum Filter { PriceFilter , PercentPrice , PercentPriceBySide , LotSize , MinNotional , Notional , IcebergParts , MarketLotSize , MaxNumOrders , MaxNumAlgoOrders , MaxNumIcebergOrders , MaxPosition , TrailingDelta , Unknown , } # [pymethods] impl RestClient { fn get_exchange_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_exchange_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn base_url (& self) -> PyResult < PyObject > { Ok (self . inner . base_url . clone () . into ()) } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn rate_limiter (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limiter . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct KlinesRequest { inner : venues :: KlinesRequest , } # [pymethods] impl KlinesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < String > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn time_zone (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_zone . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pymethods] impl RestClient { fn get_klines <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_klines () . await }) } } # [pyclass] # [derive (Clone)] pub struct HistoricalTradesRequest { inner : venues :: HistoricalTradesRequest , } # [pymethods] impl HistoricalTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn from_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct HistoricalTrade { inner : venues :: HistoricalTrade , } # [pymethods] impl HistoricalTrade { # [staticmethod] fn from_inner (inner : HistoricalTrade) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < u64 > { Ok (self . inner . id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < String > { Ok (self . inner . qty . clone () . into ()) } # [getter] fn quote_qty (& self) -> PyResult < String > { Ok (self . inner . quote_qty . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn is_buyer_maker (& self) -> PyResult < bool > { Ok (self . inner . is_buyer_maker . clone () . into ()) } # [getter] fn is_best_match (& self) -> PyResult < bool > { Ok (self . inner . is_best_match . clone () . into ()) } } # [pymethods] impl RestClient { fn get_historical_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_historical_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct Ticker24hrRequest { inner : venues :: Ticker24hrRequest , } # [pymethods] impl Ticker24hrRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn symbols (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbols . clone () . into ()) } # [getter] fn ticker_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ticker_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Ticker24hr { inner : venues :: Ticker24hr , } # [pymethods] impl Ticker24hr { # [staticmethod] fn from_inner (inner : Ticker24hr) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price_change (& self) -> PyResult < String > { Ok (self . inner . price_change . clone () . into ()) } # [getter] fn price_change_percent (& self) -> PyResult < String > { Ok (self . inner . price_change_percent . clone () . into ()) } # [getter] fn weighted_avg_price (& self) -> PyResult < String > { Ok (self . inner . weighted_avg_price . clone () . into ()) } # [getter] fn prev_close_price (& self) -> PyResult < String > { Ok (self . inner . prev_close_price . clone () . into ()) } # [getter] fn last_price (& self) -> PyResult < String > { Ok (self . inner . last_price . clone () . into ()) } # [getter] fn last_qty (& self) -> PyResult < String > { Ok (self . inner . last_qty . clone () . into ()) } # [getter] fn bid_price (& self) -> PyResult < String > { Ok (self . inner . bid_price . clone () . into ()) } # [getter] fn bid_qty (& self) -> PyResult < String > { Ok (self . inner . bid_qty . clone () . into ()) } # [getter] fn ask_price (& self) -> PyResult < String > { Ok (self . inner . ask_price . clone () . into ()) } # [getter] fn ask_qty (& self) -> PyResult < String > { Ok (self . inner . ask_qty . clone () . into ()) } # [getter] fn open_price (& self) -> PyResult < String > { Ok (self . inner . open_price . clone () . into ()) } # [getter] fn high_price (& self) -> PyResult < String > { Ok (self . inner . high_price . clone () . into ()) } # [getter] fn low_price (& self) -> PyResult < String > { Ok (self . inner . low_price . clone () . into ()) } # [getter] fn volume (& self) -> PyResult < String > { Ok (self . inner . volume . clone () . into ()) } # [getter] fn quote_volume (& self) -> PyResult < String > { Ok (self . inner . quote_volume . clone () . into ()) } # [getter] fn open_time (& self) -> PyResult < u64 > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn close_time (& self) -> PyResult < u64 > { Ok (self . inner . close_time . clone () . into ()) } # [getter] fn first_id (& self) -> PyResult < u64 > { Ok (self . inner . first_id . clone () . into ()) } # [getter] fn last_id (& self) -> PyResult < u64 > { Ok (self . inner . last_id . clone () . into ()) } # [getter] fn count (& self) -> PyResult < u64 > { Ok (self . inner . count . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Ticker24hrMini { inner : venues :: Ticker24hrMini , } # [pymethods] impl Ticker24hrMini { # [staticmethod] fn from_inner (inner : Ticker24hrMini) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn close_price (& self) -> PyResult < String > { Ok (self . inner . close_price . clone () . into ()) } # [getter] fn open_price (& self) -> PyResult < String > { Ok (self . inner . open_price . clone () . into ()) } # [getter] fn high_price (& self) -> PyResult < String > { Ok (self . inner . high_price . clone () . into ()) } # [getter] fn low_price (& self) -> PyResult < String > { Ok (self . inner . low_price . clone () . into ()) } # [getter] fn volume (& self) -> PyResult < String > { Ok (self . inner . volume . clone () . into ()) } # [getter] fn quote_volume (& self) -> PyResult < String > { Ok (self . inner . quote_volume . clone () . into ()) } # [getter] fn open_time (& self) -> PyResult < u64 > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn close_time (& self) -> PyResult < u64 > { Ok (self . inner . close_time . clone () . into ()) } # [getter] fn first_id (& self) -> PyResult < u64 > { Ok (self . inner . first_id . clone () . into ()) } # [getter] fn last_id (& self) -> PyResult < u64 > { Ok (self . inner . last_id . clone () . into ()) } # [getter] fn count (& self) -> PyResult < u64 > { Ok (self . inner . count . clone () . into ()) } } # [pymethods] impl RestClient { fn get_24hr_ticker <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_24hr_ticker () . await }) } } # [pyclass] # [derive (Clone)] pub struct PingResponse { inner : venues :: PingResponse , } # [pymethods] impl PingResponse { # [staticmethod] fn from_inner (inner : PingResponse) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn ping <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . ping () . await }) } } # [pyclass] # [derive (Clone)] pub struct TickerRequest { inner : venues :: TickerRequest , } # [pymethods] impl TickerRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn symbols (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbols . clone () . into ()) } # [getter] fn window_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . window_size . clone () . into ()) } # [getter] fn ticker_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ticker_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Ticker { inner : venues :: Ticker , } # [pymethods] impl Ticker { # [staticmethod] fn from_inner (inner : Ticker) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price_change (& self) -> PyResult < String > { Ok (self . inner . price_change . clone () . into ()) } # [getter] fn price_change_percent (& self) -> PyResult < String > { Ok (self . inner . price_change_percent . clone () . into ()) } # [getter] fn weighted_avg_price (& self) -> PyResult < String > { Ok (self . inner . weighted_avg_price . clone () . into ()) } # [getter] fn open_price (& self) -> PyResult < String > { Ok (self . inner . open_price . clone () . into ()) } # [getter] fn high_price (& self) -> PyResult < String > { Ok (self . inner . high_price . clone () . into ()) } # [getter] fn low_price (& self) -> PyResult < String > { Ok (self . inner . low_price . clone () . into ()) } # [getter] fn last_price (& self) -> PyResult < String > { Ok (self . inner . last_price . clone () . into ()) } # [getter] fn volume (& self) -> PyResult < String > { Ok (self . inner . volume . clone () . into ()) } # [getter] fn quote_volume (& self) -> PyResult < String > { Ok (self . inner . quote_volume . clone () . into ()) } # [getter] fn open_time (& self) -> PyResult < u64 > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn close_time (& self) -> PyResult < u64 > { Ok (self . inner . close_time . clone () . into ()) } # [getter] fn first_id (& self) -> PyResult < u64 > { Ok (self . inner . first_id . clone () . into ()) } # [getter] fn last_id (& self) -> PyResult < u64 > { Ok (self . inner . last_id . clone () . into ()) } # [getter] fn count (& self) -> PyResult < u64 > { Ok (self . inner . count . clone () . into ()) } } # [pymethods] impl RestClient { fn get_ticker <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_ticker () . await }) } } # [pyclass] # [derive (Clone)] pub struct UiKlinesRequest { inner : venues :: UiKlinesRequest , } # [pymethods] impl UiKlinesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < String > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn time_zone (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_zone . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pymethods] impl RestClient { fn get_ui_klines <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_ui_klines () . await }) } } # [pyclass] # [derive (Clone)] pub struct ServerTimeResponse { inner : venues :: ServerTimeResponse , } # [pymethods] impl ServerTimeResponse { # [staticmethod] fn from_inner (inner : ServerTimeResponse) -> Self { Self { inner } } # [getter] fn server_time (& self) -> PyResult < u64 > { Ok (self . inner . server_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_server_time <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_server_time () . await }) } } # [pyclass] # [derive (Clone)] pub struct DepthRequest { inner : venues :: DepthRequest , } # [pymethods] impl DepthRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct DepthResponse { inner : venues :: DepthResponse , } # [pymethods] impl DepthResponse { # [staticmethod] fn from_inner (inner : DepthResponse) -> Self { Self { inner } } # [getter] fn last_update_id (& self) -> PyResult < u64 > { Ok (self . inner . last_update_id . clone () . into ()) } # [getter] fn bids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . bids . clone () . into ()) } # [getter] fn asks (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . asks . clone () . into ()) } } # [pymethods] impl RestClient { fn get_depth <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_depth () . await }) } } # [pyclass] # [derive (Clone)] pub struct TradesRequest { inner : venues :: TradesRequest , } # [pymethods] impl TradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Trade { inner : venues :: Trade , } # [pymethods] impl Trade { # [staticmethod] fn from_inner (inner : Trade) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < u64 > { Ok (self . inner . id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < String > { Ok (self . inner . qty . clone () . into ()) } # [getter] fn quote_qty (& self) -> PyResult < String > { Ok (self . inner . quote_qty . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn is_buyer_maker (& self) -> PyResult < bool > { Ok (self . inner . is_buyer_maker . clone () . into ()) } # [getter] fn is_best_match (& self) -> PyResult < bool > { Ok (self . inner . is_best_match . clone () . into ()) } } # [pymethods] impl RestClient { fn get_recent_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_recent_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct TickerPriceRequest { inner : venues :: TickerPriceRequest , } # [pymethods] impl TickerPriceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn symbols (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbols . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TickerPrice { inner : venues :: TickerPrice , } # [pymethods] impl TickerPrice { # [staticmethod] fn from_inner (inner : TickerPrice) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } } # [pymethods] impl RestClient { fn get_price_ticker <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_price_ticker () . await }) } } # [pyclass] # [derive (Clone)] pub struct TickerBookRequest { inner : venues :: TickerBookRequest , } # [pymethods] impl TickerBookRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn symbols (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbols . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TickerBook { inner : venues :: TickerBook , } # [pymethods] impl TickerBook { # [staticmethod] fn from_inner (inner : TickerBook) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn bid_price (& self) -> PyResult < String > { Ok (self . inner . bid_price . clone () . into ()) } # [getter] fn bid_qty (& self) -> PyResult < String > { Ok (self . inner . bid_qty . clone () . into ()) } # [getter] fn ask_price (& self) -> PyResult < String > { Ok (self . inner . ask_price . clone () . into ()) } # [getter] fn ask_qty (& self) -> PyResult < String > { Ok (self . inner . ask_qty . clone () . into ()) } } # [pymethods] impl RestClient { fn get_book_ticker <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_book_ticker () . await }) } } # [pyclass] # [derive (Clone)] pub struct TickerTradingDayRequest { inner : venues :: TickerTradingDayRequest , } # [pymethods] impl TickerTradingDayRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn symbols (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbols . clone () . into ()) } # [getter] fn time_zone (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_zone . clone () . into ()) } # [getter] fn ticker_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ticker_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TickerTradingDay { inner : venues :: TickerTradingDay , } # [pymethods] impl TickerTradingDay { # [staticmethod] fn from_inner (inner : TickerTradingDay) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price_change (& self) -> PyResult < String > { Ok (self . inner . price_change . clone () . into ()) } # [getter] fn price_change_percent (& self) -> PyResult < String > { Ok (self . inner . price_change_percent . clone () . into ()) } # [getter] fn weighted_avg_price (& self) -> PyResult < String > { Ok (self . inner . weighted_avg_price . clone () . into ()) } # [getter] fn open_price (& self) -> PyResult < String > { Ok (self . inner . open_price . clone () . into ()) } # [getter] fn high_price (& self) -> PyResult < String > { Ok (self . inner . high_price . clone () . into ()) } # [getter] fn low_price (& self) -> PyResult < String > { Ok (self . inner . low_price . clone () . into ()) } # [getter] fn last_price (& self) -> PyResult < String > { Ok (self . inner . last_price . clone () . into ()) } # [getter] fn volume (& self) -> PyResult < String > { Ok (self . inner . volume . clone () . into ()) } # [getter] fn quote_volume (& self) -> PyResult < String > { Ok (self . inner . quote_volume . clone () . into ()) } # [getter] fn open_time (& self) -> PyResult < u64 > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn close_time (& self) -> PyResult < u64 > { Ok (self . inner . close_time . clone () . into ()) } # [getter] fn first_id (& self) -> PyResult < u64 > { Ok (self . inner . first_id . clone () . into ()) } # [getter] fn last_id (& self) -> PyResult < u64 > { Ok (self . inner . last_id . clone () . into ()) } # [getter] fn count (& self) -> PyResult < u64 > { Ok (self . inner . count . clone () . into ()) } } # [pymethods] impl RestClient { fn get_trading_day_ticker <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_trading_day_ticker () . await }) } } # [pyclass] # [derive (Clone)] pub struct AmendOrderRequest { inner : venues :: AmendOrderRequest , } # [pymethods] impl AmendOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AmendOrderResponse { inner : venues :: AmendOrderResponse , } # [pymethods] impl AmendOrderResponse { # [staticmethod] fn from_inner (inner : AmendOrderResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_list_id (& self) -> PyResult < i64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn transact_time (& self) -> PyResult < u64 > { Ok (self . inner . transact_time . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cummulative_quote_qty (& self) -> PyResult < String > { Ok (self . inner . cummulative_quote_qty . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg_qty . clone () . into ()) } # [getter] fn working_time (& self) -> PyResult < u64 > { Ok (self . inner . working_time . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pymethods] impl RestClient { fn amend_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . amend_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct MyTradesRequest { inner : venues :: MyTradesRequest , } # [pymethods] impl MyTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn from_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_id . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MyTrade { inner : venues :: MyTrade , } # [pymethods] impl MyTrade { # [staticmethod] fn from_inner (inner : MyTrade) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn id (& self) -> PyResult < u64 > { Ok (self . inner . id . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_list_id (& self) -> PyResult < i64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < String > { Ok (self . inner . qty . clone () . into ()) } # [getter] fn quote_qty (& self) -> PyResult < String > { Ok (self . inner . quote_qty . clone () . into ()) } # [getter] fn commission (& self) -> PyResult < String > { Ok (self . inner . commission . clone () . into ()) } # [getter] fn commission_asset (& self) -> PyResult < String > { Ok (self . inner . commission_asset . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn is_buyer (& self) -> PyResult < bool > { Ok (self . inner . is_buyer . clone () . into ()) } # [getter] fn is_maker (& self) -> PyResult < bool > { Ok (self . inner . is_maker . clone () . into ()) } # [getter] fn is_best_match (& self) -> PyResult < bool > { Ok (self . inner . is_best_match . clone () . into ()) } } # [pymethods] impl RestClient { fn get_my_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_my_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct AllOrdersRequest { inner : venues :: AllOrdersRequest , } # [pymethods] impl AllOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AllOrder { inner : venues :: AllOrder , } # [pymethods] impl AllOrder { # [staticmethod] fn from_inner (inner : AllOrder) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_list_id (& self) -> PyResult < i64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cummulative_quote_qty (& self) -> PyResult < String > { Ok (self . inner . cummulative_quote_qty . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg_qty . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn is_working (& self) -> PyResult < bool > { Ok (self . inner . is_working . clone () . into ()) } # [getter] fn working_time (& self) -> PyResult < u64 > { Ok (self . inner . working_time . clone () . into ()) } # [getter] fn orig_quote_order_qty (& self) -> PyResult < String > { Ok (self . inner . orig_quote_order_qty . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pymethods] impl RestClient { fn get_all_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_all_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct NewOrderRequest { inner : venues :: NewOrderRequest , } # [pymethods] impl NewOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn quote_order_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quote_order_qty . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn new_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_client_order_id . clone () . into ()) } # [getter] fn strategy_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . strategy_id . clone () . into ()) } # [getter] fn strategy_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . strategy_type . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn trailing_delta (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trailing_delta . clone () . into ()) } # [getter] fn iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg_qty . clone () . into ()) } # [getter] fn new_order_resp_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_order_resp_type . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderAckResponse { inner : venues :: OrderAckResponse , } # [pymethods] impl OrderAckResponse { # [staticmethod] fn from_inner (inner : OrderAckResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_list_id (& self) -> PyResult < i64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn transact_time (& self) -> PyResult < u64 > { Ok (self . inner . transact_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderResultResponse { inner : venues :: OrderResultResponse , } # [pymethods] impl OrderResultResponse { # [staticmethod] fn from_inner (inner : OrderResultResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_list_id (& self) -> PyResult < i64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn transact_time (& self) -> PyResult < u64 > { Ok (self . inner . transact_time . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cummulative_quote_qty (& self) -> PyResult < String > { Ok (self . inner . cummulative_quote_qty . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn working_time (& self) -> PyResult < u64 > { Ok (self . inner . working_time . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderFullResponse { inner : venues :: OrderFullResponse , } # [pymethods] impl OrderFullResponse { # [staticmethod] fn from_inner (inner : OrderFullResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_list_id (& self) -> PyResult < i64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn transact_time (& self) -> PyResult < u64 > { Ok (self . inner . transact_time . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cummulative_quote_qty (& self) -> PyResult < String > { Ok (self . inner . cummulative_quote_qty . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg_qty . clone () . into ()) } # [getter] fn working_time (& self) -> PyResult < u64 > { Ok (self . inner . working_time . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } # [getter] fn fills (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . fills . clone () . into ()) } } # [pymethods] impl RestClient { fn new_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . new_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct OrderAmendmentsRequest { inner : venues :: OrderAmendmentsRequest , } # [pymethods] impl OrderAmendmentsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn from_execution_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_execution_id . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderAmendment { inner : venues :: OrderAmendment , } # [pymethods] impl OrderAmendment { # [staticmethod] fn from_inner (inner : OrderAmendment) -> Self { Self { inner } } # [getter] fn amendment_id (& self) -> PyResult < u64 > { Ok (self . inner . amendment_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < String > { Ok (self . inner . qty . clone () . into ()) } # [getter] fn orig_price (& self) -> PyResult < String > { Ok (self . inner . orig_price . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn status (& self) -> PyResult < String > { Ok (self . inner . status . clone () . into ()) } # [getter] fn execution_id (& self) -> PyResult < u64 > { Ok (self . inner . execution_id . clone () . into ()) } } # [pymethods] impl RestClient { fn get_order_amendments <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_order_amendments () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct QueryOrderRequest { inner : venues :: QueryOrderRequest , } # [pymethods] impl QueryOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct QueryOrderResponse { inner : venues :: QueryOrderResponse , } # [pymethods] impl QueryOrderResponse { # [staticmethod] fn from_inner (inner : QueryOrderResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_list_id (& self) -> PyResult < i64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cummulative_quote_qty (& self) -> PyResult < String > { Ok (self . inner . cummulative_quote_qty . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg_qty . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn is_working (& self) -> PyResult < bool > { Ok (self . inner . is_working . clone () . into ()) } # [getter] fn working_time (& self) -> PyResult < u64 > { Ok (self . inner . working_time . clone () . into ()) } # [getter] fn orig_quote_order_qty (& self) -> PyResult < String > { Ok (self . inner . orig_quote_order_qty . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pymethods] impl RestClient { fn query_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . query_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOrdersRequest { inner : venues :: CancelAllOrdersRequest , } # [pymethods] impl CancelAllOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOrdersResponseItem { inner : venues :: CancelAllOrdersResponseItem , } # [pymethods] impl CancelAllOrdersResponseItem { # [staticmethod] fn from_inner (inner : CancelAllOrdersResponseItem) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < String > { Ok (self . inner . orig_client_order_id . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_list_id (& self) -> PyResult < i64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn transact_time (& self) -> PyResult < u64 > { Ok (self . inner . transact_time . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cummulative_quote_qty (& self) -> PyResult < String > { Ok (self . inner . cummulative_quote_qty . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg_qty . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_all_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_all_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct AccountCommissionRequest { inner : venues :: AccountCommissionRequest , } # [pymethods] impl AccountCommissionRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountCommissionResponse { inner : venues :: AccountCommissionResponse , } # [pymethods] impl AccountCommissionResponse { # [staticmethod] fn from_inner (inner : AccountCommissionResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn standard_commission (& self) -> PyResult < PyObject > { Ok (self . inner . standard_commission . clone () . into ()) } # [getter] fn tax_commission (& self) -> PyResult < PyObject > { Ok (self . inner . tax_commission . clone () . into ()) } # [getter] fn discount (& self) -> PyResult < PyObject > { Ok (self . inner . discount . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_commission <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_commission () . await }) } } # [pyclass] # [derive (Clone)] pub struct SorOrderRequest { inner : venues :: SorOrderRequest , } # [pymethods] impl SorOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn new_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_client_order_id . clone () . into ()) } # [getter] fn strategy_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . strategy_id . clone () . into ()) } # [getter] fn strategy_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . strategy_type . clone () . into ()) } # [getter] fn iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg_qty . clone () . into ()) } # [getter] fn new_order_resp_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_order_resp_type . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pymethods] impl RestClient { fn new_sor_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . new_sor_order () . await }) } fn test_sor_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . test_sor_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct OtoOrderRequest { inner : venues :: OtoOrderRequest , } # [pymethods] impl OtoOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn list_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . list_client_order_id . clone () . into ()) } # [getter] fn new_order_resp_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_order_resp_type . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < PyObject > { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn working_side (& self) -> PyResult < PyObject > { Ok (self . inner . working_side . clone () . into ()) } # [getter] fn working_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . working_client_order_id . clone () . into ()) } # [getter] fn working_quantity (& self) -> PyResult < String > { Ok (self . inner . working_quantity . clone () . into ()) } # [getter] fn working_price (& self) -> PyResult < String > { Ok (self . inner . working_price . clone () . into ()) } # [getter] fn working_time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . working_time_in_force . clone () . into ()) } # [getter] fn working_strategy_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . working_strategy_id . clone () . into ()) } # [getter] fn working_strategy_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . working_strategy_type . clone () . into ()) } # [getter] fn working_iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . working_iceberg_qty . clone () . into ()) } # [getter] fn pending_type (& self) -> PyResult < PyObject > { Ok (self . inner . pending_type . clone () . into ()) } # [getter] fn pending_side (& self) -> PyResult < PyObject > { Ok (self . inner . pending_side . clone () . into ()) } # [getter] fn pending_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_client_order_id . clone () . into ()) } # [getter] fn pending_quantity (& self) -> PyResult < String > { Ok (self . inner . pending_quantity . clone () . into ()) } # [getter] fn pending_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_price . clone () . into ()) } # [getter] fn pending_stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_stop_price . clone () . into ()) } # [getter] fn pending_trailing_delta (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_trailing_delta . clone () . into ()) } # [getter] fn pending_time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_time_in_force . clone () . into ()) } # [getter] fn pending_strategy_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_strategy_id . clone () . into ()) } # [getter] fn pending_strategy_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_strategy_type . clone () . into ()) } # [getter] fn pending_iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_iceberg_qty . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OtoOrderResponse { inner : venues :: OtoOrderResponse , } # [pymethods] impl OtoOrderResponse { # [staticmethod] fn from_inner (inner : OtoOrderResponse) -> Self { Self { inner } } # [getter] fn order_list_id (& self) -> PyResult < u64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn contingency_type (& self) -> PyResult < PyObject > { Ok (self . inner . contingency_type . clone () . into ()) } # [getter] fn list_status_type (& self) -> PyResult < PyObject > { Ok (self . inner . list_status_type . clone () . into ()) } # [getter] fn list_order_status (& self) -> PyResult < PyObject > { Ok (self . inner . list_order_status . clone () . into ()) } # [getter] fn list_client_order_id (& self) -> PyResult < String > { Ok (self . inner . list_client_order_id . clone () . into ()) } # [getter] fn transaction_time (& self) -> PyResult < u64 > { Ok (self . inner . transaction_time . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . orders . clone () . into ()) } # [getter] fn order_reports (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_reports . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OtoOrder { inner : venues :: OtoOrder , } # [pymethods] impl OtoOrder { # [staticmethod] fn from_inner (inner : OtoOrder) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn new_oto_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . new_oto_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelReplaceOrderRequest { inner : venues :: CancelReplaceOrderRequest , } # [pymethods] impl CancelReplaceOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn cancel_replace_mode (& self) -> PyResult < PyObject > { Ok (self . inner . cancel_replace_mode . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn quote_order_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quote_order_qty . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn cancel_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cancel_order_id . clone () . into ()) } # [getter] fn cancel_orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cancel_orig_client_order_id . clone () . into ()) } # [getter] fn cancel_new_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cancel_new_client_order_id . clone () . into ()) } # [getter] fn new_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_client_order_id . clone () . into ()) } # [getter] fn strategy_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . strategy_id . clone () . into ()) } # [getter] fn strategy_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . strategy_type . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn trailing_delta (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trailing_delta . clone () . into ()) } # [getter] fn iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg_qty . clone () . into ()) } # [getter] fn new_order_resp_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_order_resp_type . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } # [getter] fn cancel_restrictions (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cancel_restrictions . clone () . into ()) } # [getter] fn order_rate_limit_exceeded_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_rate_limit_exceeded_mode . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_replace_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_replace_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct OpenOrdersRequest { inner : venues :: OpenOrdersRequest , } # [pymethods] impl OpenOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OpenOrder { inner : venues :: OpenOrder , } # [pymethods] impl OpenOrder { # [staticmethod] fn from_inner (inner : OpenOrder) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_list_id (& self) -> PyResult < i64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cummulative_quote_qty (& self) -> PyResult < String > { Ok (self . inner . cummulative_quote_qty . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg_qty . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn is_working (& self) -> PyResult < bool > { Ok (self . inner . is_working . clone () . into ()) } # [getter] fn working_time (& self) -> PyResult < u64 > { Ok (self . inner . working_time . clone () . into ()) } # [getter] fn orig_quote_order_qty (& self) -> PyResult < String > { Ok (self . inner . orig_quote_order_qty . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pymethods] impl RestClient { fn get_open_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_open_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderRequest { inner : venues :: CancelOrderRequest , } # [pymethods] impl CancelOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } # [getter] fn new_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_client_order_id . clone () . into ()) } # [getter] fn cancel_restrictions (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cancel_restrictions . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderResponse { inner : venues :: CancelOrderResponse , } # [pymethods] impl CancelOrderResponse { # [staticmethod] fn from_inner (inner : CancelOrderResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < String > { Ok (self . inner . orig_client_order_id . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_list_id (& self) -> PyResult < i64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn transact_time (& self) -> PyResult < u64 > { Ok (self . inner . transact_time . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cummulative_quote_qty (& self) -> PyResult < String > { Ok (self . inner . cummulative_quote_qty . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg_qty . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct AccountRequest { inner : venues :: AccountRequest , } # [pymethods] impl AccountRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn omit_zero_balances (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . omit_zero_balances . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountResponse { inner : venues :: AccountResponse , } # [pymethods] impl AccountResponse { # [staticmethod] fn from_inner (inner : AccountResponse) -> Self { Self { inner } } # [getter] fn maker_commission (& self) -> PyResult < u64 > { Ok (self . inner . maker_commission . clone () . into ()) } # [getter] fn taker_commission (& self) -> PyResult < u64 > { Ok (self . inner . taker_commission . clone () . into ()) } # [getter] fn buyer_commission (& self) -> PyResult < u64 > { Ok (self . inner . buyer_commission . clone () . into ()) } # [getter] fn seller_commission (& self) -> PyResult < u64 > { Ok (self . inner . seller_commission . clone () . into ()) } # [getter] fn commission_rates (& self) -> PyResult < PyObject > { Ok (self . inner . commission_rates . clone () . into ()) } # [getter] fn can_trade (& self) -> PyResult < bool > { Ok (self . inner . can_trade . clone () . into ()) } # [getter] fn can_withdraw (& self) -> PyResult < bool > { Ok (self . inner . can_withdraw . clone () . into ()) } # [getter] fn can_deposit (& self) -> PyResult < bool > { Ok (self . inner . can_deposit . clone () . into ()) } # [getter] fn brokered (& self) -> PyResult < bool > { Ok (self . inner . brokered . clone () . into ()) } # [getter] fn require_self_trade_prevention (& self) -> PyResult < bool > { Ok (self . inner . require_self_trade_prevention . clone () . into ()) } # [getter] fn prevent_sor (& self) -> PyResult < bool > { Ok (self . inner . prevent_sor . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn account_type (& self) -> PyResult < String > { Ok (self . inner . account_type . clone () . into ()) } # [getter] fn balances (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . balances . clone () . into ()) } # [getter] fn permissions (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . permissions . clone () . into ()) } # [getter] fn uid (& self) -> PyResult < u64 > { Ok (self . inner . uid . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Balance { inner : venues :: Balance , } # [pymethods] impl Balance { # [staticmethod] fn from_inner (inner : Balance) -> Self { Self { inner } } # [getter] fn asset (& self) -> PyResult < String > { Ok (self . inner . asset . clone () . into ()) } # [getter] fn free (& self) -> PyResult < String > { Ok (self . inner . free . clone () . into ()) } # [getter] fn locked (& self) -> PyResult < String > { Ok (self . inner . locked . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account () . await }) } } # [pyclass] # [derive (Clone)] pub struct MyPreventedMatchesRequest { inner : venues :: MyPreventedMatchesRequest , } # [pymethods] impl MyPreventedMatchesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn prevented_match_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . prevented_match_id . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn from_prevented_match_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_prevented_match_id . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pymethods] impl RestClient { fn get_my_prevented_matches <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_my_prevented_matches () . await }) } } # [pyclass] # [derive (Clone)] pub struct OcoOrderListRequest { inner : venues :: OcoOrderListRequest , } # [pymethods] impl OcoOrderListRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn list_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . list_client_order_id . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn above_type (& self) -> PyResult < PyObject > { Ok (self . inner . above_type . clone () . into ()) } # [getter] fn above_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . above_client_order_id . clone () . into ()) } # [getter] fn above_iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . above_iceberg_qty . clone () . into ()) } # [getter] fn above_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . above_price . clone () . into ()) } # [getter] fn above_stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . above_stop_price . clone () . into ()) } # [getter] fn above_trailing_delta (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . above_trailing_delta . clone () . into ()) } # [getter] fn above_time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . above_time_in_force . clone () . into ()) } # [getter] fn above_strategy_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . above_strategy_id . clone () . into ()) } # [getter] fn above_strategy_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . above_strategy_type . clone () . into ()) } # [getter] fn below_type (& self) -> PyResult < PyObject > { Ok (self . inner . below_type . clone () . into ()) } # [getter] fn below_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . below_client_order_id . clone () . into ()) } # [getter] fn below_iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . below_iceberg_qty . clone () . into ()) } # [getter] fn below_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . below_price . clone () . into ()) } # [getter] fn below_stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . below_stop_price . clone () . into ()) } # [getter] fn below_trailing_delta (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . below_trailing_delta . clone () . into ()) } # [getter] fn below_time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . below_time_in_force . clone () . into ()) } # [getter] fn below_strategy_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . below_strategy_id . clone () . into ()) } # [getter] fn below_strategy_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . below_strategy_type . clone () . into ()) } # [getter] fn new_order_resp_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_order_resp_type . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OcoOrderListResponse { inner : venues :: OcoOrderListResponse , } # [pymethods] impl OcoOrderListResponse { # [staticmethod] fn from_inner (inner : OcoOrderListResponse) -> Self { Self { inner } } # [getter] fn order_list_id (& self) -> PyResult < u64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn contingency_type (& self) -> PyResult < PyObject > { Ok (self . inner . contingency_type . clone () . into ()) } # [getter] fn list_status_type (& self) -> PyResult < PyObject > { Ok (self . inner . list_status_type . clone () . into ()) } # [getter] fn list_order_status (& self) -> PyResult < PyObject > { Ok (self . inner . list_order_status . clone () . into ()) } # [getter] fn list_client_order_id (& self) -> PyResult < String > { Ok (self . inner . list_client_order_id . clone () . into ()) } # [getter] fn transaction_time (& self) -> PyResult < u64 > { Ok (self . inner . transaction_time . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . orders . clone () . into ()) } # [getter] fn order_reports (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_reports . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OcoOrderListOrder { inner : venues :: OcoOrderListOrder , } # [pymethods] impl OcoOrderListOrder { # [staticmethod] fn from_inner (inner : OcoOrderListOrder) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn new_oco_orderlist <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . new_oco_orderlist () . await }) } } # [pyclass] # [derive (Clone)] pub struct OtocoOrderRequest { inner : venues :: OtocoOrderRequest , } # [pymethods] impl OtocoOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn list_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . list_client_order_id . clone () . into ()) } # [getter] fn new_order_resp_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_order_resp_type . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } # [getter] fn working_type (& self) -> PyResult < PyObject > { Ok (self . inner . working_type . clone () . into ()) } # [getter] fn working_side (& self) -> PyResult < PyObject > { Ok (self . inner . working_side . clone () . into ()) } # [getter] fn working_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . working_client_order_id . clone () . into ()) } # [getter] fn working_quantity (& self) -> PyResult < String > { Ok (self . inner . working_quantity . clone () . into ()) } # [getter] fn working_price (& self) -> PyResult < String > { Ok (self . inner . working_price . clone () . into ()) } # [getter] fn working_time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . working_time_in_force . clone () . into ()) } # [getter] fn working_strategy_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . working_strategy_id . clone () . into ()) } # [getter] fn working_strategy_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . working_strategy_type . clone () . into ()) } # [getter] fn working_iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . working_iceberg_qty . clone () . into ()) } # [getter] fn pending_side (& self) -> PyResult < PyObject > { Ok (self . inner . pending_side . clone () . into ()) } # [getter] fn pending_quantity (& self) -> PyResult < String > { Ok (self . inner . pending_quantity . clone () . into ()) } # [getter] fn pending_above_type (& self) -> PyResult < PyObject > { Ok (self . inner . pending_above_type . clone () . into ()) } # [getter] fn pending_above_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_above_client_order_id . clone () . into ()) } # [getter] fn pending_above_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_above_price . clone () . into ()) } # [getter] fn pending_above_stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_above_stop_price . clone () . into ()) } # [getter] fn pending_above_trailing_delta (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_above_trailing_delta . clone () . into ()) } # [getter] fn pending_above_iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_above_iceberg_qty . clone () . into ()) } # [getter] fn pending_above_time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_above_time_in_force . clone () . into ()) } # [getter] fn pending_above_strategy_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_above_strategy_id . clone () . into ()) } # [getter] fn pending_above_strategy_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_above_strategy_type . clone () . into ()) } # [getter] fn pending_below_type (& self) -> PyResult < PyObject > { Ok (self . inner . pending_below_type . clone () . into ()) } # [getter] fn pending_below_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_below_client_order_id . clone () . into ()) } # [getter] fn pending_below_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_below_price . clone () . into ()) } # [getter] fn pending_below_stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_below_stop_price . clone () . into ()) } # [getter] fn pending_below_trailing_delta (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_below_trailing_delta . clone () . into ()) } # [getter] fn pending_below_iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_below_iceberg_qty . clone () . into ()) } # [getter] fn pending_below_time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_below_time_in_force . clone () . into ()) } # [getter] fn pending_below_strategy_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_below_strategy_id . clone () . into ()) } # [getter] fn pending_below_strategy_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_below_strategy_type . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OtocoOrderResponse { inner : venues :: OtocoOrderResponse , } # [pymethods] impl OtocoOrderResponse { # [staticmethod] fn from_inner (inner : OtocoOrderResponse) -> Self { Self { inner } } # [getter] fn order_list_id (& self) -> PyResult < u64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn contingency_type (& self) -> PyResult < PyObject > { Ok (self . inner . contingency_type . clone () . into ()) } # [getter] fn list_status_type (& self) -> PyResult < PyObject > { Ok (self . inner . list_status_type . clone () . into ()) } # [getter] fn list_order_status (& self) -> PyResult < PyObject > { Ok (self . inner . list_order_status . clone () . into ()) } # [getter] fn list_client_order_id (& self) -> PyResult < String > { Ok (self . inner . list_client_order_id . clone () . into ()) } # [getter] fn transaction_time (& self) -> PyResult < u64 > { Ok (self . inner . transaction_time . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . orders . clone () . into ()) } # [getter] fn order_reports (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_reports . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OtocoOrder { inner : venues :: OtocoOrder , } # [pymethods] impl OtocoOrder { # [staticmethod] fn from_inner (inner : OtocoOrder) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn new_otoco_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . new_otoco_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct QueryOrderListRequest { inner : venues :: QueryOrderListRequest , } # [pymethods] impl QueryOrderListRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn order_list_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn orig_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . orig_client_order_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct QueryOrderListResponse { inner : venues :: QueryOrderListResponse , } # [pymethods] impl QueryOrderListResponse { # [staticmethod] fn from_inner (inner : QueryOrderListResponse) -> Self { Self { inner } } # [getter] fn order_list_id (& self) -> PyResult < u64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn contingency_type (& self) -> PyResult < PyObject > { Ok (self . inner . contingency_type . clone () . into ()) } # [getter] fn list_status_type (& self) -> PyResult < PyObject > { Ok (self . inner . list_status_type . clone () . into ()) } # [getter] fn list_order_status (& self) -> PyResult < PyObject > { Ok (self . inner . list_order_status . clone () . into ()) } # [getter] fn list_client_order_id (& self) -> PyResult < String > { Ok (self . inner . list_client_order_id . clone () . into ()) } # [getter] fn transaction_time (& self) -> PyResult < u64 > { Ok (self . inner . transaction_time . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . orders . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct QueryOrderListOrder { inner : venues :: QueryOrderListOrder , } # [pymethods] impl QueryOrderListOrder { # [staticmethod] fn from_inner (inner : QueryOrderListOrder) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cummulative_quote_qty (& self) -> PyResult < String > { Ok (self . inner . cummulative_quote_qty . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg_qty . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn is_working (& self) -> PyResult < bool > { Ok (self . inner . is_working . clone () . into ()) } # [getter] fn orig_quote_order_qty (& self) -> PyResult < String > { Ok (self . inner . orig_quote_order_qty . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pymethods] impl RestClient { fn query_order_list <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . query_order_list () . await }) } } # [pyclass] # [derive (Clone)] pub struct OpenOrderListRequest { inner : venues :: OpenOrderListRequest , } # [pymethods] impl OpenOrderListRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OpenOrderList { inner : venues :: OpenOrderList , } # [pymethods] impl OpenOrderList { # [staticmethod] fn from_inner (inner : OpenOrderList) -> Self { Self { inner } } # [getter] fn order_list_id (& self) -> PyResult < u64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn contingency_type (& self) -> PyResult < PyObject > { Ok (self . inner . contingency_type . clone () . into ()) } # [getter] fn list_status_type (& self) -> PyResult < PyObject > { Ok (self . inner . list_status_type . clone () . into ()) } # [getter] fn list_order_status (& self) -> PyResult < PyObject > { Ok (self . inner . list_order_status . clone () . into ()) } # [getter] fn list_client_order_id (& self) -> PyResult < String > { Ok (self . inner . list_client_order_id . clone () . into ()) } # [getter] fn transaction_time (& self) -> PyResult < u64 > { Ok (self . inner . transaction_time . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . orders . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OpenOrderListOrder { inner : venues :: OpenOrderListOrder , } # [pymethods] impl OpenOrderListOrder { # [staticmethod] fn from_inner (inner : OpenOrderListOrder) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn orig_qty (& self) -> PyResult < String > { Ok (self . inner . orig_qty . clone () . into ()) } # [getter] fn executed_qty (& self) -> PyResult < String > { Ok (self . inner . executed_qty . clone () . into ()) } # [getter] fn cummulative_quote_qty (& self) -> PyResult < String > { Ok (self . inner . cummulative_quote_qty . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg_qty . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < u64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn is_working (& self) -> PyResult < bool > { Ok (self . inner . is_working . clone () . into ()) } # [getter] fn orig_quote_order_qty (& self) -> PyResult < String > { Ok (self . inner . orig_quote_order_qty . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < PyObject > { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } } # [pymethods] impl RestClient { fn get_open_order_lists <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_open_order_lists () . await }) } } # [pyclass] # [derive (Clone)] pub struct TestNewOrderRequest { inner : venues :: TestNewOrderRequest , } # [pymethods] impl TestNewOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn quote_order_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quote_order_qty . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn new_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_client_order_id . clone () . into ()) } # [getter] fn strategy_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . strategy_id . clone () . into ()) } # [getter] fn strategy_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . strategy_type . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn trailing_delta (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trailing_delta . clone () . into ()) } # [getter] fn iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg_qty . clone () . into ()) } # [getter] fn new_order_resp_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_order_resp_type . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } # [getter] fn compute_commission_rates (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . compute_commission_rates . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TestOrderResponse { inner : venues :: TestOrderResponse , } # [pymethods] impl TestOrderResponse { # [staticmethod] fn from_inner (inner : TestOrderResponse) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct CommissionRatesResponse { inner : venues :: CommissionRatesResponse , } # [pymethods] impl CommissionRatesResponse { # [staticmethod] fn from_inner (inner : CommissionRatesResponse) -> Self { Self { inner } } # [getter] fn standard_commission (& self) -> PyResult < PyObject > { Ok (self . inner . standard_commission . clone () . into ()) } # [getter] fn tax_commission (& self) -> PyResult < PyObject > { Ok (self . inner . tax_commission . clone () . into ()) } # [getter] fn discount (& self) -> PyResult < PyObject > { Ok (self . inner . discount . clone () . into ()) } } # [pymethods] impl RestClient { fn test_new_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . test_new_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderListRequest { inner : venues :: CancelOrderListRequest , } # [pymethods] impl CancelOrderListRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_list_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn list_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . list_client_order_id . clone () . into ()) } # [getter] fn new_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_client_order_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderListResponse { inner : venues :: CancelOrderListResponse , } # [pymethods] impl CancelOrderListResponse { # [staticmethod] fn from_inner (inner : CancelOrderListResponse) -> Self { Self { inner } } # [getter] fn order_list_id (& self) -> PyResult < u64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn contingency_type (& self) -> PyResult < PyObject > { Ok (self . inner . contingency_type . clone () . into ()) } # [getter] fn list_status_type (& self) -> PyResult < PyObject > { Ok (self . inner . list_status_type . clone () . into ()) } # [getter] fn list_order_status (& self) -> PyResult < PyObject > { Ok (self . inner . list_order_status . clone () . into ()) } # [getter] fn list_client_order_id (& self) -> PyResult < String > { Ok (self . inner . list_client_order_id . clone () . into ()) } # [getter] fn transaction_time (& self) -> PyResult < u64 > { Ok (self . inner . transaction_time . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . orders . clone () . into ()) } # [getter] fn order_reports (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_reports . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderListOrder { inner : venues :: CancelOrderListOrder , } # [pymethods] impl CancelOrderListOrder { # [staticmethod] fn from_inner (inner : CancelOrderListOrder) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_order_list <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_order_list () . await }) } } # [pyclass] # [derive (Clone)] pub struct MyAllocationsRequest { inner : venues :: MyAllocationsRequest , } # [pymethods] impl MyAllocationsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn from_allocation_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_allocation_id . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pymethods] impl RestClient { fn get_my_allocations <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_my_allocations () . await }) } } # [pyclass] # [derive (Clone)] pub struct RateLimitOrderRequest { inner : venues :: RateLimitOrderRequest , } # [pymethods] impl RateLimitOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimitOrderResponse { inner : venues :: RateLimitOrderResponse , } # [pymethods] impl RateLimitOrderResponse { # [staticmethod] fn from_inner (inner : RateLimitOrderResponse) -> Self { Self { inner } } # [getter] fn rate_limit_type (& self) -> PyResult < String > { Ok (self . inner . rate_limit_type . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < String > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn interval_num (& self) -> PyResult < u64 > { Ok (self . inner . interval_num . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < u64 > { Ok (self . inner . limit . clone () . into ()) } # [getter] fn count (& self) -> PyResult < u64 > { Ok (self . inner . count . clone () . into ()) } } # [pymethods] impl RestClient { fn get_rate_limit_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_rate_limit_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct AllOrderListRequest { inner : venues :: AllOrderListRequest , } # [pymethods] impl AllOrderListRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn from_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AllOrderList { inner : venues :: AllOrderList , } # [pymethods] impl AllOrderList { # [staticmethod] fn from_inner (inner : AllOrderList) -> Self { Self { inner } } # [getter] fn order_list_id (& self) -> PyResult < u64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn contingency_type (& self) -> PyResult < PyObject > { Ok (self . inner . contingency_type . clone () . into ()) } # [getter] fn list_status_type (& self) -> PyResult < PyObject > { Ok (self . inner . list_status_type . clone () . into ()) } # [getter] fn list_order_status (& self) -> PyResult < PyObject > { Ok (self . inner . list_order_status . clone () . into ()) } # [getter] fn list_client_order_id (& self) -> PyResult < String > { Ok (self . inner . list_client_order_id . clone () . into ()) } # [getter] fn transaction_time (& self) -> PyResult < u64 > { Ok (self . inner . transaction_time . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . orders . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AllOrderListOrder { inner : venues :: AllOrderListOrder , } # [pymethods] impl AllOrderListOrder { # [staticmethod] fn from_inner (inner : AllOrderListOrder) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn get_all_order_lists <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_all_order_lists () . await }) } } # [pyclass] # [derive (Clone)] pub struct OcoOrderRequest { inner : venues :: OcoOrderRequest , } # [pymethods] impl OcoOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn list_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . list_client_order_id . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn quantity (& self) -> PyResult < String > { Ok (self . inner . quantity . clone () . into ()) } # [getter] fn limit_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit_client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn limit_iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit_iceberg_qty . clone () . into ()) } # [getter] fn stop_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_client_order_id . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < String > { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn stop_limit_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_limit_price . clone () . into ()) } # [getter] fn stop_limit_time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_limit_time_in_force . clone () . into ()) } # [getter] fn stop_iceberg_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_iceberg_qty . clone () . into ()) } # [getter] fn stop_strategy_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_strategy_id . clone () . into ()) } # [getter] fn stop_strategy_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_strategy_type . clone () . into ()) } # [getter] fn new_order_resp_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_order_resp_type . clone () . into ()) } # [getter] fn self_trade_prevention_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . self_trade_prevention_mode . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OcoOrderResponse { inner : venues :: OcoOrderResponse , } # [pymethods] impl OcoOrderResponse { # [staticmethod] fn from_inner (inner : OcoOrderResponse) -> Self { Self { inner } } # [getter] fn order_list_id (& self) -> PyResult < u64 > { Ok (self . inner . order_list_id . clone () . into ()) } # [getter] fn contingency_type (& self) -> PyResult < PyObject > { Ok (self . inner . contingency_type . clone () . into ()) } # [getter] fn list_status_type (& self) -> PyResult < PyObject > { Ok (self . inner . list_status_type . clone () . into ()) } # [getter] fn list_order_status (& self) -> PyResult < PyObject > { Ok (self . inner . list_order_status . clone () . into ()) } # [getter] fn list_client_order_id (& self) -> PyResult < String > { Ok (self . inner . list_client_order_id . clone () . into ()) } # [getter] fn transaction_time (& self) -> PyResult < u64 > { Ok (self . inner . transaction_time . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . orders . clone () . into ()) } # [getter] fn order_reports (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_reports . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OcoOrder { inner : venues :: OcoOrder , } # [pymethods] impl OcoOrder { # [staticmethod] fn from_inner (inner : OcoOrder) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < u64 > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn new_oco_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . new_oco_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct ErrorResponse { inner : venues :: ErrorResponse , } # [pymethods] impl ErrorResponse { # [staticmethod] fn from_inner (inner : ErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum RateLimitType { RequestWeight , Orders , RawRequests , } # [pyclass] # [derive (Clone)] pub enum RateLimitInterval { Second , Minute , Day , } # [pyclass] # [derive (Clone)] pub enum IntervalUnit { Second , Minute , Hour , Day , } # [pyclass] # [derive (Clone)] pub struct RateLimitHeader { inner : venues :: RateLimitHeader , } # [pymethods] impl RateLimitHeader { # [staticmethod] fn from_inner (inner : RateLimitHeader) -> Self { Self { inner } } # [getter] fn kind (& self) -> PyResult < PyObject > { Ok (self . inner . kind . clone () . into ()) } # [getter] fn interval_value (& self) -> PyResult < u64 > { Ok (self . inner . interval_value . clone () . into ()) } # [getter] fn interval_unit (& self) -> PyResult < PyObject > { Ok (self . inner . interval_unit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum RateLimitHeaderKind { UsedWeight , OrderCount , } # [pyclass] # [derive (Clone)] pub struct RateLimitUsage { inner : venues :: RateLimitUsage , } # [pymethods] impl RateLimitUsage { # [staticmethod] fn from_inner (inner : RateLimitUsage) -> Self { Self { inner } } # [getter] fn raw_request_timestamps (& self) -> PyResult < PyObject > { Ok (self . inner . raw_request_timestamps . clone () . into ()) } # [getter] fn order_timestamps_10s (& self) -> PyResult < PyObject > { Ok (self . inner . order_timestamps_10s . clone () . into ()) } # [getter] fn order_timestamps_1d (& self) -> PyResult < PyObject > { Ok (self . inner . order_timestamps_1d . clone () . into ()) } # [getter] fn used_weight_1m (& self) -> PyResult < u64 > { Ok (self . inner . used_weight_1m . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimiter { inner : venues :: RateLimiter , } # [pymethods] impl RateLimiter { # [staticmethod] fn from_inner (inner : RateLimiter) -> Self { Self { inner } } } # [doc = " Create the Python module for binance"] pub fn create_module (py : Python) -> PyResult <& PyModule > { let m = PyModule :: new (py , "binance") ?; Ok (m) }