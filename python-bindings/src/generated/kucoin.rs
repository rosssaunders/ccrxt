# ! [doc = " Python bindings for kucoin venue"] # ! [doc = ""] # ! [doc = " This module is automatically generated from the Rust source code."] # ! [doc = " Do not edit this file directly."] use pyo3 :: prelude ::*; use pyo3_asyncio ; use venues ; # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn base_url (& self) -> PyResult < String > { Ok (self . inner . base_url . clone () . into ()) } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn rate_limiter (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limiter . clone () . into ()) } } # [pymethods] impl RestClient { fn new_default (& self) -> PyResult < () > { self . inner . new_default () ; Ok (()) } fn get <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetCurrentFundingRateRequest { inner : venues :: GetCurrentFundingRateRequest , } # [pymethods] impl GetCurrentFundingRateRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetFundingRateHistoryRequest { inner : venues :: GetFundingRateHistoryRequest , } # [pymethods] impl GetFundingRateHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn from (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from . clone () . into ()) } # [getter] fn to (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . to . clone () . into ()) } # [getter] fn offset (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . offset . clone () . into ()) } # [getter] fn forward (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . forward . clone () . into ()) } # [getter] fn max_count (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_count . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct FundingRateHistoryItem { inner : venues :: FundingRateHistoryItem , } # [pymethods] impl FundingRateHistoryItem { # [staticmethod] fn from_inner (inner : FundingRateHistoryItem) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn granularity (& self) -> PyResult < i64 > { Ok (self . inner . granularity . clone () . into ()) } # [getter] fn time_point (& self) -> PyResult < i64 > { Ok (self . inner . time_point . clone () . into ()) } # [getter] fn value (& self) -> PyResult < f64 > { Ok (self . inner . value . clone () . into ()) } } # [pymethods] impl RestClient { fn get_current_funding_rate <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_current_funding_rate () . await }) } fn get_funding_rate_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_funding_rate_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetContractRequest { inner : venues :: GetContractRequest , } # [pymethods] impl GetContractRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ContractInfo { inner : venues :: ContractInfo , } # [pymethods] impl ContractInfo { # [staticmethod] fn from_inner (inner : ContractInfo) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn root_symbol (& self) -> PyResult < String > { Ok (self . inner . root_symbol . clone () . into ()) } # [getter] fn contract_type (& self) -> PyResult < PyObject > { Ok (self . inner . contract_type . clone () . into ()) } # [getter] fn first_open_date (& self) -> PyResult < i64 > { Ok (self . inner . first_open_date . clone () . into ()) } # [getter] fn expire_date (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . expire_date . clone () . into ()) } # [getter] fn settle_date (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . settle_date . clone () . into ()) } # [getter] fn base_currency (& self) -> PyResult < String > { Ok (self . inner . base_currency . clone () . into ()) } # [getter] fn quote_currency (& self) -> PyResult < String > { Ok (self . inner . quote_currency . clone () . into ()) } # [getter] fn settle_currency (& self) -> PyResult < String > { Ok (self . inner . settle_currency . clone () . into ()) } # [getter] fn max_order_qty (& self) -> PyResult < f64 > { Ok (self . inner . max_order_qty . clone () . into ()) } # [getter] fn max_price (& self) -> PyResult < f64 > { Ok (self . inner . max_price . clone () . into ()) } # [getter] fn lot_size (& self) -> PyResult < f64 > { Ok (self . inner . lot_size . clone () . into ()) } # [getter] fn tick_size (& self) -> PyResult < f64 > { Ok (self . inner . tick_size . clone () . into ()) } # [getter] fn index_price_tick_size (& self) -> PyResult < f64 > { Ok (self . inner . index_price_tick_size . clone () . into ()) } # [getter] fn multiplier (& self) -> PyResult < f64 > { Ok (self . inner . multiplier . clone () . into ()) } # [getter] fn initial_margin (& self) -> PyResult < f64 > { Ok (self . inner . initial_margin . clone () . into ()) } # [getter] fn maintenance_margin (& self) -> PyResult < f64 > { Ok (self . inner . maintenance_margin . clone () . into ()) } # [getter] fn max_risk_limit (& self) -> PyResult < f64 > { Ok (self . inner . max_risk_limit . clone () . into ()) } # [getter] fn min_risk_limit (& self) -> PyResult < f64 > { Ok (self . inner . min_risk_limit . clone () . into ()) } # [getter] fn risk_limit_step (& self) -> PyResult < f64 > { Ok (self . inner . risk_limit_step . clone () . into ()) } # [getter] fn maker_fee_rate (& self) -> PyResult < f64 > { Ok (self . inner . maker_fee_rate . clone () . into ()) } # [getter] fn taker_fee_rate (& self) -> PyResult < f64 > { Ok (self . inner . taker_fee_rate . clone () . into ()) } # [getter] fn taker_fixed_fee (& self) -> PyResult < f64 > { Ok (self . inner . taker_fixed_fee . clone () . into ()) } # [getter] fn maker_fixed_fee (& self) -> PyResult < f64 > { Ok (self . inner . maker_fixed_fee . clone () . into ()) } # [getter] fn settlement_fee (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . settlement_fee . clone () . into ()) } # [getter] fn is_quanto (& self) -> PyResult < bool > { Ok (self . inner . is_quanto . clone () . into ()) } # [getter] fn is_inverse (& self) -> PyResult < bool > { Ok (self . inner . is_inverse . clone () . into ()) } # [getter] fn mark_method (& self) -> PyResult < String > { Ok (self . inner . mark_method . clone () . into ()) } # [getter] fn fair_method (& self) -> PyResult < String > { Ok (self . inner . fair_method . clone () . into ()) } # [getter] fn funding_base_symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . funding_base_symbol . clone () . into ()) } # [getter] fn funding_quote_symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . funding_quote_symbol . clone () . into ()) } # [getter] fn funding_rate_symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . funding_rate_symbol . clone () . into ()) } # [getter] fn index_symbol (& self) -> PyResult < String > { Ok (self . inner . index_symbol . clone () . into ()) } # [getter] fn settlement_symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . settlement_symbol . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn fund_fee_begin_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . fund_fee_begin_time . clone () . into ()) } # [getter] fn fund_fee_end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . fund_fee_end_time . clone () . into ()) } # [getter] fn fund_interval (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . fund_interval . clone () . into ()) } # [getter] fn delivery_fee (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . delivery_fee . clone () . into ()) } # [getter] fn position_limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . position_limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetAllContractsRequest { inner : venues :: GetAllContractsRequest , } # [pymethods] impl GetAllContractsRequest { # [staticmethod] fn from_inner (inner : GetAllContractsRequest) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn get_contract <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_contract () . await }) } fn get_all_contracts <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_all_contracts () . await }) } } # [pyclass] # [derive (Clone)] pub struct ChangeMarginModeRequest { inner : venues :: ChangeMarginModeRequest , } # [pymethods] impl ChangeMarginModeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn margin_mode (& self) -> PyResult < PyObject > { Ok (self . inner . margin_mode . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ChangeMarginModeResponse { inner : venues :: ChangeMarginModeResponse , } # [pymethods] impl ChangeMarginModeResponse { # [staticmethod] fn from_inner (inner : ChangeMarginModeResponse) -> Self { Self { inner } } # [getter] fn result (& self) -> PyResult < bool > { Ok (self . inner . result . clone () . into ()) } } # [pymethods] impl RestClient { fn change_margin_mode <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . change_margin_mode () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOrderRequest { inner : venues :: GetOrderRequest , } # [pymethods] impl GetOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderDetails { inner : venues :: OrderDetails , } # [pymethods] impl OrderDetails { # [staticmethod] fn from_inner (inner : OrderDetails) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < String > { Ok (self . inner . id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn deal_size (& self) -> PyResult < String > { Ok (self . inner . deal_size . clone () . into ()) } # [getter] fn deal_funds (& self) -> PyResult < String > { Ok (self . inner . deal_funds . clone () . into ()) } # [getter] fn fee (& self) -> PyResult < String > { Ok (self . inner . fee . clone () . into ()) } # [getter] fn fee_currency (& self) -> PyResult < String > { Ok (self . inner . fee_currency . clone () . into ()) } # [getter] fn stop (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < bool > { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn hidden (& self) -> PyResult < bool > { Ok (self . inner . hidden . clone () . into ()) } # [getter] fn iceberg (& self) -> PyResult < bool > { Ok (self . inner . iceberg . clone () . into ()) } # [getter] fn leverage (& self) -> PyResult < String > { Ok (self . inner . leverage . clone () . into ()) } # [getter] fn force_hold (& self) -> PyResult < bool > { Ok (self . inner . force_hold . clone () . into ()) } # [getter] fn close_order (& self) -> PyResult < bool > { Ok (self . inner . close_order . clone () . into ()) } # [getter] fn visible_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . visible_size . clone () . into ()) } # [getter] fn client_oid (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_oid . clone () . into ()) } # [getter] fn remark (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . remark . clone () . into ()) } # [getter] fn tags (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tags . clone () . into ()) } # [getter] fn is_active (& self) -> PyResult < bool > { Ok (self . inner . is_active . clone () . into ()) } # [getter] fn cancel_exist_stop (& self) -> PyResult < bool > { Ok (self . inner . cancel_exist_stop . clone () . into ()) } # [getter] fn created_at (& self) -> PyResult < i64 > { Ok (self . inner . created_at . clone () . into ()) } # [getter] fn updated_at (& self) -> PyResult < i64 > { Ok (self . inner . updated_at . clone () . into ()) } # [getter] fn end_at (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_at . clone () . into ()) } # [getter] fn order_time (& self) -> PyResult < i64 > { Ok (self . inner . order_time . clone () . into ()) } # [getter] fn settle_currency (& self) -> PyResult < String > { Ok (self . inner . settle_currency . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn filled_value (& self) -> PyResult < String > { Ok (self . inner . filled_value . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } } # [pymethods] impl RestClient { fn get_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMarginModeRequest { inner : venues :: GetMarginModeRequest , } # [pymethods] impl GetMarginModeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MarginModeResponse { inner : venues :: MarginModeResponse , } # [pymethods] impl MarginModeResponse { # [staticmethod] fn from_inner (inner : MarginModeResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn margin_mode (& self) -> PyResult < PyObject > { Ok (self . inner . margin_mode . clone () . into ()) } # [getter] fn cross_margin_leverage (& self) -> PyResult < String > { Ok (self . inner . cross_margin_leverage . clone () . into ()) } # [getter] fn isolated_margin_leverage (& self) -> PyResult < String > { Ok (self . inner . isolated_margin_leverage . clone () . into ()) } } # [pymethods] impl RestClient { fn get_margin_mode <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_margin_mode () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn base_url (& self) -> PyResult < String > { Ok (self . inner . base_url . clone () . into ()) } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn rate_limiter (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limiter . clone () . into ()) } } # [pymethods] impl RestClient { fn new_with_credentials (& self) -> PyResult < () > { self . inner . new_with_credentials () ; Ok (()) } fn new_sandbox (& self) -> PyResult < () > { self . inner . new_sandbox () ; Ok (()) } fn get <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get () . await }) } fn post <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . post () . await }) } fn delete <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . delete () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOrdersRequest { inner : venues :: CancelAllOrdersRequest , } # [pymethods] impl CancelAllOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOrdersResponse { inner : venues :: CancelAllOrdersResponse , } # [pymethods] impl CancelAllOrdersResponse { # [staticmethod] fn from_inner (inner : CancelAllOrdersResponse) -> Self { Self { inner } } # [getter] fn cancelled_order_ids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . cancelled_order_ids . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_all_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_all_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetPositionRequest { inner : venues :: GetPositionRequest , } # [pymethods] impl GetPositionRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Position { inner : venues :: Position , } # [pymethods] impl Position { # [staticmethod] fn from_inner (inner : Position) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn cross_mode (& self) -> PyResult < bool > { Ok (self . inner . cross_mode . clone () . into ()) } # [getter] fn deleverage_percentage (& self) -> PyResult < f64 > { Ok (self . inner . deleverage_percentage . clone () . into ()) } # [getter] fn open_size (& self) -> PyResult < String > { Ok (self . inner . open_size . clone () . into ()) } # [getter] fn value (& self) -> PyResult < String > { Ok (self . inner . value . clone () . into ()) } # [getter] fn leverage (& self) -> PyResult < String > { Ok (self . inner . leverage . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn pnl (& self) -> PyResult < String > { Ok (self . inner . pnl . clone () . into ()) } # [getter] fn unrealized_pnl (& self) -> PyResult < String > { Ok (self . inner . unrealized_pnl . clone () . into ()) } # [getter] fn unrealized_cost (& self) -> PyResult < String > { Ok (self . inner . unrealized_cost . clone () . into ()) } # [getter] fn unrealized_roi (& self) -> PyResult < String > { Ok (self . inner . unrealized_roi . clone () . into ()) } # [getter] fn unrealized_pnl_pct (& self) -> PyResult < String > { Ok (self . inner . unrealized_pnl_pct . clone () . into ()) } # [getter] fn current_qty (& self) -> PyResult < String > { Ok (self . inner . current_qty . clone () . into ()) } # [getter] fn current_cost (& self) -> PyResult < String > { Ok (self . inner . current_cost . clone () . into ()) } # [getter] fn current_comm (& self) -> PyResult < String > { Ok (self . inner . current_comm . clone () . into ()) } # [getter] fn realized_cost (& self) -> PyResult < String > { Ok (self . inner . realized_cost . clone () . into ()) } # [getter] fn realized_pnl (& self) -> PyResult < String > { Ok (self . inner . realized_pnl . clone () . into ()) } # [getter] fn realized_roi (& self) -> PyResult < String > { Ok (self . inner . realized_roi . clone () . into ()) } # [getter] fn realized_comm (& self) -> PyResult < String > { Ok (self . inner . realized_comm . clone () . into ()) } # [getter] fn open_time (& self) -> PyResult < i64 > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn current_timestamp (& self) -> PyResult < i64 > { Ok (self . inner . current_timestamp . clone () . into ()) } # [getter] fn auto_deposit_status (& self) -> PyResult < PyObject > { Ok (self . inner . auto_deposit_status . clone () . into ()) } # [getter] fn risk_limit (& self) -> PyResult < i64 > { Ok (self . inner . risk_limit . clone () . into ()) } # [getter] fn real_leverage (& self) -> PyResult < f64 > { Ok (self . inner . real_leverage . clone () . into ()) } # [getter] fn maintenance_margin (& self) -> PyResult < String > { Ok (self . inner . maintenance_margin . clone () . into ()) } # [getter] fn risk_limit_level (& self) -> PyResult < i64 > { Ok (self . inner . risk_limit_level . clone () . into ()) } # [getter] fn settle_currency (& self) -> PyResult < String > { Ok (self . inner . settle_currency . clone () . into ()) } # [getter] fn mark_price (& self) -> PyResult < String > { Ok (self . inner . mark_price . clone () . into ()) } # [getter] fn position_margin (& self) -> PyResult < String > { Ok (self . inner . position_margin . clone () . into ()) } # [getter] fn user_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . user_id . clone () . into ()) } # [getter] fn cross_margin (& self) -> PyResult < f64 > { Ok (self . inner . cross_margin . clone () . into ()) } # [getter] fn isolated_margin (& self) -> PyResult < f64 > { Ok (self . inner . isolated_margin . clone () . into ()) } # [getter] fn available_balance (& self) -> PyResult < f64 > { Ok (self . inner . available_balance . clone () . into ()) } } # [pymethods] impl RestClient { fn get_position <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_position () . await }) } } # [pyclass] # [derive (Clone)] pub struct AutoDepositMarginRequest { inner : venues :: AutoDepositMarginRequest , } # [pymethods] impl AutoDepositMarginRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AutoDepositMarginResponse { inner : venues :: AutoDepositMarginResponse , } # [pymethods] impl AutoDepositMarginResponse { # [staticmethod] fn from_inner (inner : AutoDepositMarginResponse) -> Self { Self { inner } } # [getter] fn result (& self) -> PyResult < bool > { Ok (self . inner . result . clone () . into ()) } } # [pymethods] impl RestClient { fn auto_deposit_margin <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . auto_deposit_margin () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAllPositionsRequest { inner : venues :: GetAllPositionsRequest , } # [pymethods] impl GetAllPositionsRequest { # [staticmethod] fn from_inner (inner : GetAllPositionsRequest) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn get_all_positions <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_all_positions () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderRequest { inner : venues :: CancelOrderRequest , } # [pymethods] impl CancelOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderResponse { inner : venues :: CancelOrderResponse , } # [pymethods] impl CancelOrderResponse { # [staticmethod] fn from_inner (inner : CancelOrderResponse) -> Self { Self { inner } } # [getter] fn cancelled_order_ids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . cancelled_order_ids . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct PlaceOrderRequest { inner : venues :: PlaceOrderRequest , } # [pymethods] impl PlaceOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn client_oid (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_oid . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn leverage (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . leverage . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn close_order (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . close_order . clone () . into ()) } # [getter] fn force_hold (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . force_hold . clone () . into ()) } # [getter] fn size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . size . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn hidden (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . hidden . clone () . into ()) } # [getter] fn iceberg (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg . clone () . into ()) } # [getter] fn visible_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . visible_size . clone () . into ()) } # [getter] fn remark (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . remark . clone () . into ()) } # [getter] fn stop (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop . clone () . into ()) } # [getter] fn stop_price_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price_type . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_price . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PlaceOrderResponse { inner : venues :: PlaceOrderResponse , } # [pymethods] impl PlaceOrderResponse { # [staticmethod] fn from_inner (inner : PlaceOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn place_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . place_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct AddMarginRequest { inner : venues :: AddMarginRequest , } # [pymethods] impl AddMarginRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn margin (& self) -> PyResult < String > { Ok (self . inner . margin . clone () . into ()) } # [getter] fn biz_no (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . biz_no . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AddMarginResponse { inner : venues :: AddMarginResponse , } # [pymethods] impl AddMarginResponse { # [staticmethod] fn from_inner (inner : AddMarginResponse) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < String > { Ok (self . inner . id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn auto_deposit_status (& self) -> PyResult < PyObject > { Ok (self . inner . auto_deposit_status . clone () . into ()) } # [getter] fn margin (& self) -> PyResult < String > { Ok (self . inner . margin . clone () . into ()) } # [getter] fn risk_limit (& self) -> PyResult < i64 > { Ok (self . inner . risk_limit . clone () . into ()) } # [getter] fn realized_roi (& self) -> PyResult < String > { Ok (self . inner . realized_roi . clone () . into ()) } # [getter] fn cross_mode (& self) -> PyResult < bool > { Ok (self . inner . cross_mode . clone () . into ()) } # [getter] fn deleverage_percentage (& self) -> PyResult < f64 > { Ok (self . inner . deleverage_percentage . clone () . into ()) } # [getter] fn open_size (& self) -> PyResult < String > { Ok (self . inner . open_size . clone () . into ()) } # [getter] fn value (& self) -> PyResult < String > { Ok (self . inner . value . clone () . into ()) } # [getter] fn available_balance (& self) -> PyResult < f64 > { Ok (self . inner . available_balance . clone () . into ()) } } # [pymethods] impl RestClient { fn add_margin <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . add_margin () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOrdersRequest { inner : venues :: GetOrdersRequest , } # [pymethods] impl GetOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn status (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . status . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn start_at (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_at . clone () . into ()) } # [getter] fn end_at (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_at . clone () . into ()) } # [getter] fn current_page (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . page_size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PaginatedOrdersResponse { inner : venues :: PaginatedOrdersResponse , } # [pymethods] impl PaginatedOrdersResponse { # [staticmethod] fn from_inner (inner : PaginatedOrdersResponse) -> Self { Self { inner } } # [getter] fn current_page (& self) -> PyResult < i64 > { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < i64 > { Ok (self . inner . page_size . clone () . into ()) } # [getter] fn total_num (& self) -> PyResult < i64 > { Ok (self . inner . total_num . clone () . into ()) } # [getter] fn total_page (& self) -> PyResult < i64 > { Ok (self . inner . total_page . clone () . into ()) } # [getter] fn items (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . items . clone () . into ()) } } # [pymethods] impl RestClient { fn get_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_orders () . await }) } } # [pyclass] # [derive (Clone)] pub enum OrderSide { Buy , Sell , } # [pyclass] # [derive (Clone)] pub enum OrderType { Limit , Market , } # [pyclass] # [derive (Clone)] pub enum TimeInForce { GoodTillCanceled , GoodTillTime , ImmediateOrCancel , FillOrKill , } # [pyclass] # [derive (Clone)] pub enum OrderStatus { Active , Done , } # [pyclass] # [derive (Clone)] pub enum TradeSide { Buy , Sell , } # [pyclass] # [derive (Clone)] pub enum KlineInterval { OneMinute , ThreeMinutes , FiveMinutes , FifteenMinutes , ThirtyMinutes , OneHour , TwoHours , FourHours , SixHours , EightHours , TwelveHours , OneDay , OneWeek , } # [pyclass] # [derive (Clone)] pub enum Market { Bitcoin , Ethereum , Tether , UsdCoin , KuCoinShares , } # [pyclass] # [derive (Clone)] pub enum AccountType { Main , Trade , Margin , Pool , } # [pyclass] # [derive (Clone)] pub enum TransferDirection { In , Out , } # [pyclass] # [derive (Clone)] pub enum DepositStatus { Processing , Success , Failure , } # [pyclass] # [derive (Clone)] pub enum WithdrawalStatus { Processing , WalletProcessing , Success , Failure , } # [pyclass] # [derive (Clone)] pub enum FeeDeductType { Internal , External , } # [pyclass] # [derive (Clone)] pub enum PositionSide { Long , Short , } # [pyclass] # [derive (Clone)] pub enum MarginMode { CrossMargin , IsolatedMargin , } # [pyclass] # [derive (Clone)] pub enum StopType { Up , Down , } # [pyclass] # [derive (Clone)] pub enum Leverage { One , Two , Three , Five , Ten , Twenty , Fifty , OneHundred , } # [pyclass] # [derive (Clone)] pub enum ContractType { Perpetual , Futures , } # [pyclass] # [derive (Clone)] pub enum ContractStatus { Open , BeingSettled , Paused , CancelOnly , PostOnly , } # [pyclass] # [derive (Clone)] pub enum PositionStatus { Opened , Closed , } # [pyclass] # [derive (Clone)] pub enum AutoDepositStatus { On , Off , } # [pyclass] # [derive (Clone)] pub struct RestResponse { inner : venues :: RestResponse , } # [pymethods] impl RestResponse { # [staticmethod] fn from_inner (inner : RestResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetSymbolRequest { inner : venues :: GetSymbolRequest , } # [pymethods] impl GetSymbolRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SymbolInfo { inner : venues :: SymbolInfo , } # [pymethods] impl SymbolInfo { # [staticmethod] fn from_inner (inner : SymbolInfo) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn name (& self) -> PyResult < String > { Ok (self . inner . name . clone () . into ()) } # [getter] fn base_currency (& self) -> PyResult < String > { Ok (self . inner . base_currency . clone () . into ()) } # [getter] fn quote_currency (& self) -> PyResult < String > { Ok (self . inner . quote_currency . clone () . into ()) } # [getter] fn fee_currency (& self) -> PyResult < String > { Ok (self . inner . fee_currency . clone () . into ()) } # [getter] fn market (& self) -> PyResult < String > { Ok (self . inner . market . clone () . into ()) } # [getter] fn base_min_size (& self) -> PyResult < String > { Ok (self . inner . base_min_size . clone () . into ()) } # [getter] fn quote_min_size (& self) -> PyResult < String > { Ok (self . inner . quote_min_size . clone () . into ()) } # [getter] fn base_max_size (& self) -> PyResult < String > { Ok (self . inner . base_max_size . clone () . into ()) } # [getter] fn quote_max_size (& self) -> PyResult < String > { Ok (self . inner . quote_max_size . clone () . into ()) } # [getter] fn base_increment (& self) -> PyResult < String > { Ok (self . inner . base_increment . clone () . into ()) } # [getter] fn quote_increment (& self) -> PyResult < String > { Ok (self . inner . quote_increment . clone () . into ()) } # [getter] fn price_increment (& self) -> PyResult < String > { Ok (self . inner . price_increment . clone () . into ()) } # [getter] fn price_limit_rate (& self) -> PyResult < String > { Ok (self . inner . price_limit_rate . clone () . into ()) } # [getter] fn enable_trading (& self) -> PyResult < bool > { Ok (self . inner . enable_trading . clone () . into ()) } # [getter] fn is_margin_enabled (& self) -> PyResult < bool > { Ok (self . inner . is_margin_enabled . clone () . into ()) } # [getter] fn fee_category (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . fee_category . clone () . into ()) } } # [pymethods] impl RestClient { fn get_symbol <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_symbol () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAllTickersRequest { inner : venues :: GetAllTickersRequest , } # [pymethods] impl GetAllTickersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pyclass] # [derive (Clone)] pub struct TickerStatistics { inner : venues :: TickerStatistics , } # [pymethods] impl TickerStatistics { # [staticmethod] fn from_inner (inner : TickerStatistics) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn name (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . name . clone () . into ()) } # [getter] fn last_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . last_price . clone () . into ()) } # [getter] fn change_percentage (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . change_percentage . clone () . into ()) } # [getter] fn change_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . change_price . clone () . into ()) } # [getter] fn high (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . high . clone () . into ()) } # [getter] fn low (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . low . clone () . into ()) } # [getter] fn vol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . vol . clone () . into ()) } # [getter] fn vol_value (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . vol_value . clone () . into ()) } # [getter] fn last_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . last_size . clone () . into ()) } # [getter] fn time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AllTickersResponse { inner : venues :: AllTickersResponse , } # [pymethods] impl AllTickersResponse { # [staticmethod] fn from_inner (inner : AllTickersResponse) -> Self { Self { inner } } # [getter] fn time (& self) -> PyResult < i64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn ticker (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . ticker . clone () . into ()) } } # [pymethods] impl RestClient { fn get_all_tickers <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_all_tickers () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn base_url (& self) -> PyResult < String > { Ok (self . inner . base_url . clone () . into ()) } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn rate_limiter (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limiter . clone () . into ()) } } # [pymethods] impl RestClient { fn new_default (& self) -> PyResult < () > { self . inner . new_default () ; Ok (()) } fn get <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetKlinesRequest { inner : venues :: GetKlinesRequest , } # [pymethods] impl GetKlinesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Kline { inner : venues :: Kline , } # [pymethods] impl Kline { # [staticmethod] fn from_inner (inner : Kline) -> Self { Self { inner } } # [getter] fn open_time (& self) -> PyResult < i64 > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn open (& self) -> PyResult < String > { Ok (self . inner . open . clone () . into ()) } # [getter] fn close (& self) -> PyResult < String > { Ok (self . inner . close . clone () . into ()) } # [getter] fn high (& self) -> PyResult < String > { Ok (self . inner . high . clone () . into ()) } # [getter] fn low (& self) -> PyResult < String > { Ok (self . inner . low . clone () . into ()) } # [getter] fn volume (& self) -> PyResult < String > { Ok (self . inner . volume . clone () . into ()) } # [getter] fn quote_volume (& self) -> PyResult < String > { Ok (self . inner . quote_volume . clone () . into ()) } } # [pymethods] impl RestClient { fn get_klines <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_klines () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetTickerRequest { inner : venues :: GetTickerRequest , } # [pymethods] impl GetTickerRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TickerStatistics { inner : venues :: TickerStatistics , } # [pymethods] impl TickerStatistics { # [staticmethod] fn from_inner (inner : TickerStatistics) -> Self { Self { inner } } # [getter] fn time (& self) -> PyResult < i64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn buy (& self) -> PyResult < String > { Ok (self . inner . buy . clone () . into ()) } # [getter] fn sell (& self) -> PyResult < String > { Ok (self . inner . sell . clone () . into ()) } # [getter] fn change_rate (& self) -> PyResult < String > { Ok (self . inner . change_rate . clone () . into ()) } # [getter] fn change_price (& self) -> PyResult < String > { Ok (self . inner . change_price . clone () . into ()) } # [getter] fn high (& self) -> PyResult < String > { Ok (self . inner . high . clone () . into ()) } # [getter] fn low (& self) -> PyResult < String > { Ok (self . inner . low . clone () . into ()) } # [getter] fn vol (& self) -> PyResult < String > { Ok (self . inner . vol . clone () . into ()) } # [getter] fn vol_value (& self) -> PyResult < String > { Ok (self . inner . vol_value . clone () . into ()) } # [getter] fn last (& self) -> PyResult < String > { Ok (self . inner . last . clone () . into ()) } # [getter] fn average_price (& self) -> PyResult < String > { Ok (self . inner . average_price . clone () . into ()) } # [getter] fn taker_fee_rate (& self) -> PyResult < String > { Ok (self . inner . taker_fee_rate . clone () . into ()) } # [getter] fn maker_fee_rate (& self) -> PyResult < String > { Ok (self . inner . maker_fee_rate . clone () . into ()) } # [getter] fn taker_coefficient (& self) -> PyResult < String > { Ok (self . inner . taker_coefficient . clone () . into ()) } # [getter] fn maker_coefficient (& self) -> PyResult < String > { Ok (self . inner . maker_coefficient . clone () . into ()) } } # [pymethods] impl RestClient { fn get_ticker <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_ticker () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetPartOrderBookRequest { inner : venues :: GetPartOrderBookRequest , } # [pymethods] impl GetPartOrderBookRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn level (& self) -> PyResult < PyObject > { Ok (self . inner . level . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum OrderBookLevel { Twenty , OneHundred , } # [pyclass] # [derive (Clone)] pub struct PartOrderBookResponse { inner : venues :: PartOrderBookResponse , } # [pymethods] impl PartOrderBookResponse { # [staticmethod] fn from_inner (inner : PartOrderBookResponse) -> Self { Self { inner } } # [getter] fn time (& self) -> PyResult < i64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn sequence (& self) -> PyResult < String > { Ok (self . inner . sequence . clone () . into ()) } # [getter] fn bids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . bids . clone () . into ()) } # [getter] fn asks (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . asks . clone () . into ()) } } # [pymethods] impl RestClient { fn get_part_order_book <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_part_order_book () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAllCurrenciesRequest { inner : venues :: GetAllCurrenciesRequest , } # [pymethods] impl GetAllCurrenciesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pymethods] impl RestClient { fn get_all_currencies <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_all_currencies () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAllSymbolsRequest { inner : venues :: GetAllSymbolsRequest , } # [pymethods] impl GetAllSymbolsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn market (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . market . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SymbolInfo { inner : venues :: SymbolInfo , } # [pymethods] impl SymbolInfo { # [staticmethod] fn from_inner (inner : SymbolInfo) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn name (& self) -> PyResult < String > { Ok (self . inner . name . clone () . into ()) } # [getter] fn base_currency (& self) -> PyResult < String > { Ok (self . inner . base_currency . clone () . into ()) } # [getter] fn quote_currency (& self) -> PyResult < String > { Ok (self . inner . quote_currency . clone () . into ()) } # [getter] fn fee_currency (& self) -> PyResult < String > { Ok (self . inner . fee_currency . clone () . into ()) } # [getter] fn market (& self) -> PyResult < String > { Ok (self . inner . market . clone () . into ()) } # [getter] fn base_min_size (& self) -> PyResult < String > { Ok (self . inner . base_min_size . clone () . into ()) } # [getter] fn quote_min_size (& self) -> PyResult < String > { Ok (self . inner . quote_min_size . clone () . into ()) } # [getter] fn base_max_size (& self) -> PyResult < String > { Ok (self . inner . base_max_size . clone () . into ()) } # [getter] fn quote_max_size (& self) -> PyResult < String > { Ok (self . inner . quote_max_size . clone () . into ()) } # [getter] fn base_increment (& self) -> PyResult < String > { Ok (self . inner . base_increment . clone () . into ()) } # [getter] fn quote_increment (& self) -> PyResult < String > { Ok (self . inner . quote_increment . clone () . into ()) } # [getter] fn price_increment (& self) -> PyResult < String > { Ok (self . inner . price_increment . clone () . into ()) } # [getter] fn price_limit_rate (& self) -> PyResult < String > { Ok (self . inner . price_limit_rate . clone () . into ()) } # [getter] fn enable_trading (& self) -> PyResult < bool > { Ok (self . inner . enable_trading . clone () . into ()) } # [getter] fn is_margin_enabled (& self) -> PyResult < bool > { Ok (self . inner . is_margin_enabled . clone () . into ()) } # [getter] fn fee_category (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . fee_category . clone () . into ()) } } # [pymethods] impl RestClient { fn get_all_symbols <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_all_symbols () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetCurrencyRequest { inner : venues :: GetCurrencyRequest , } # [pymethods] impl GetCurrencyRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } } # [pymethods] impl RestClient { fn get_currency <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_currency () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetServerTimeRequest { inner : venues :: GetServerTimeRequest , } # [pymethods] impl GetServerTimeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pyclass] # [derive (Clone)] pub struct GetServerTimeResponse { inner : venues :: GetServerTimeResponse , } # [pymethods] impl GetServerTimeResponse { # [staticmethod] fn from_inner (inner : GetServerTimeResponse) -> Self { Self { inner } } # [getter] fn timestamp (& self) -> PyResult < i64 > { Ok (self . inner . timestamp . clone () . into ()) } } # [pymethods] impl RestClient { fn get_server_time <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_server_time () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetTradesRequest { inner : venues :: GetTradesRequest , } # [pymethods] impl GetTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Trade { inner : venues :: Trade , } # [pymethods] impl Trade { # [staticmethod] fn from_inner (inner : Trade) -> Self { Self { inner } } # [getter] fn sequence (& self) -> PyResult < String > { Ok (self . inner . sequence . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn time (& self) -> PyResult < i64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetDepositAddressRequest { inner : venues :: GetDepositAddressRequest , } # [pymethods] impl GetDepositAddressRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn chain (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . chain . clone () . into ()) } } # [pymethods] impl RestClient { fn get_deposit_address <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_deposit_address () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOrderRequest { inner : venues :: GetOrderRequest , } # [pymethods] impl GetOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Order { inner : venues :: Order , } # [pymethods] impl Order { # [staticmethod] fn from_inner (inner : Order) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < String > { Ok (self . inner . id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn operation_type (& self) -> PyResult < String > { Ok (self . inner . operation_type . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < String > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn funds (& self) -> PyResult < String > { Ok (self . inner . funds . clone () . into ()) } # [getter] fn deal_amount (& self) -> PyResult < String > { Ok (self . inner . deal_amount . clone () . into ()) } # [getter] fn deal_funds (& self) -> PyResult < String > { Ok (self . inner . deal_funds . clone () . into ()) } # [getter] fn fee (& self) -> PyResult < String > { Ok (self . inner . fee . clone () . into ()) } # [getter] fn fee_currency (& self) -> PyResult < String > { Ok (self . inner . fee_currency . clone () . into ()) } # [getter] fn stp (& self) -> PyResult < String > { Ok (self . inner . stp . clone () . into ()) } # [getter] fn stop (& self) -> PyResult < String > { Ok (self . inner . stop . clone () . into ()) } # [getter] fn stop_triggered (& self) -> PyResult < bool > { Ok (self . inner . stop_triggered . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < String > { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < String > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < bool > { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn hidden (& self) -> PyResult < bool > { Ok (self . inner . hidden . clone () . into ()) } # [getter] fn iceberg (& self) -> PyResult < bool > { Ok (self . inner . iceberg . clone () . into ()) } # [getter] fn visible_size (& self) -> PyResult < String > { Ok (self . inner . visible_size . clone () . into ()) } # [getter] fn cancel_after (& self) -> PyResult < i64 > { Ok (self . inner . cancel_after . clone () . into ()) } # [getter] fn channel (& self) -> PyResult < String > { Ok (self . inner . channel . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn remark (& self) -> PyResult < String > { Ok (self . inner . remark . clone () . into ()) } # [getter] fn tags (& self) -> PyResult < String > { Ok (self . inner . tags . clone () . into ()) } # [getter] fn is_active (& self) -> PyResult < bool > { Ok (self . inner . is_active . clone () . into ()) } # [getter] fn cancel_exist (& self) -> PyResult < bool > { Ok (self . inner . cancel_exist . clone () . into ()) } # [getter] fn created_at (& self) -> PyResult < i64 > { Ok (self . inner . created_at . clone () . into ()) } # [getter] fn trade_type (& self) -> PyResult < String > { Ok (self . inner . trade_type . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } } # [pymethods] impl RestClient { fn get_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct ModifyLeverageRequest { inner : venues :: ModifyLeverageRequest , } # [pymethods] impl ModifyLeverageRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn is_isolated (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . is_isolated . clone () . into ()) } # [getter] fn leverage (& self) -> PyResult < String > { Ok (self . inner . leverage . clone () . into ()) } } # [pymethods] impl RestClient { fn modify_leverage <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . modify_leverage () . await }) } } # [pyclass] # [derive (Clone)] pub struct PurchaseRequest { inner : venues :: PurchaseRequest , } # [pymethods] impl PurchaseRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn interest_rate (& self) -> PyResult < String > { Ok (self . inner . interest_rate . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PurchaseResponse { inner : venues :: PurchaseResponse , } # [pymethods] impl PurchaseResponse { # [staticmethod] fn from_inner (inner : PurchaseResponse) -> Self { Self { inner } } # [getter] fn order_no (& self) -> PyResult < String > { Ok (self . inner . order_no . clone () . into ()) } } # [pymethods] impl RestClient { fn purchase <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . purchase () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetRepayHistoryRequest { inner : venues :: GetRepayHistoryRequest , } # [pymethods] impl GetRepayHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn is_isolated (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . is_isolated . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_no (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_no . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn current_page (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . page_size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RepayHistoryItem { inner : venues :: RepayHistoryItem , } # [pymethods] impl RepayHistoryItem { # [staticmethod] fn from_inner (inner : RepayHistoryItem) -> Self { Self { inner } } # [getter] fn order_no (& self) -> PyResult < String > { Ok (self . inner . order_no . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn principal (& self) -> PyResult < String > { Ok (self . inner . principal . clone () . into ()) } # [getter] fn interest (& self) -> PyResult < String > { Ok (self . inner . interest . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn created_time (& self) -> PyResult < i64 > { Ok (self . inner . created_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RepayHistoryResponse { inner : venues :: RepayHistoryResponse , } # [pymethods] impl RepayHistoryResponse { # [staticmethod] fn from_inner (inner : RepayHistoryResponse) -> Self { Self { inner } } # [getter] fn timestamp (& self) -> PyResult < i64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn current_page (& self) -> PyResult < i64 > { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < i64 > { Ok (self . inner . page_size . clone () . into ()) } # [getter] fn total_num (& self) -> PyResult < i64 > { Ok (self . inner . total_num . clone () . into ()) } # [getter] fn total_page (& self) -> PyResult < i64 > { Ok (self . inner . total_page . clone () . into ()) } # [getter] fn items (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . items . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum OrderStatus { Pending , Success , Failed , } # [pymethods] impl RestClient { fn get_repay_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_repay_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn base_url (& self) -> PyResult < String > { Ok (self . inner . base_url . clone () . into ()) } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn rate_limiter (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limiter . clone () . into ()) } } # [pymethods] impl RestClient { fn new_with_credentials (& self) -> PyResult < () > { self . inner . new_with_credentials () ; Ok (()) } fn new_sandbox (& self) -> PyResult < () > { self . inner . new_sandbox () ; Ok (()) } fn get <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get () . await }) } fn post <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . post () . await }) } fn delete <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . delete () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOrdersRequest { inner : venues :: CancelAllOrdersRequest , } # [pymethods] impl CancelAllOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn trade_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trade_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOrdersResponse { inner : venues :: CancelAllOrdersResponse , } # [pymethods] impl CancelAllOrdersResponse { # [staticmethod] fn from_inner (inner : CancelAllOrdersResponse) -> Self { Self { inner } } # [getter] fn cancelled_order_ids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . cancelled_order_ids . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_all_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_all_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct RedeemRequest { inner : venues :: RedeemRequest , } # [pymethods] impl RedeemRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn purchase_order_no (& self) -> PyResult < String > { Ok (self . inner . purchase_order_no . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RedeemResponse { inner : venues :: RedeemResponse , } # [pymethods] impl RedeemResponse { # [staticmethod] fn from_inner (inner : RedeemResponse) -> Self { Self { inner } } # [getter] fn order_no (& self) -> PyResult < String > { Ok (self . inner . order_no . clone () . into ()) } } # [pymethods] impl RestClient { fn redeem <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . redeem () . await }) } } # [pyclass] # [derive (Clone)] pub struct RepayRequest { inner : venues :: RepayRequest , } # [pymethods] impl RepayRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn is_isolated (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . is_isolated . clone () . into ()) } # [getter] fn is_hf (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . is_hf . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RepayResponse { inner : venues :: RepayResponse , } # [pymethods] impl RepayResponse { # [staticmethod] fn from_inner (inner : RepayResponse) -> Self { Self { inner } } # [getter] fn order_no (& self) -> PyResult < String > { Ok (self . inner . order_no . clone () . into ()) } } # [pymethods] impl RestClient { fn repay <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . repay () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetRecentFillsRequest { inner : venues :: GetRecentFillsRequest , } # [pymethods] impl GetRecentFillsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pymethods] impl RestClient { fn get_recent_fills <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_recent_fills () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAccountsRequest { inner : venues :: GetAccountsRequest , } # [pymethods] impl GetAccountsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } # [getter] fn account_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . account_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Account { inner : venues :: Account , } # [pymethods] impl Account { # [staticmethod] fn from_inner (inner : Account) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < String > { Ok (self . inner . id . clone () . into ()) } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn account_type (& self) -> PyResult < String > { Ok (self . inner . account_type . clone () . into ()) } # [getter] fn balance (& self) -> PyResult < String > { Ok (self . inner . balance . clone () . into ()) } # [getter] fn available (& self) -> PyResult < String > { Ok (self . inner . available . clone () . into ()) } # [getter] fn holds (& self) -> PyResult < String > { Ok (self . inner . holds . clone () . into ()) } } # [pymethods] impl RestClient { fn get_accounts <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_accounts () . await }) } } # [pyclass] # [derive (Clone)] pub enum PurchaseOrderStatus { Done , Pending , } # [pyclass] # [derive (Clone)] pub struct GetPurchaseOrdersRequest { inner : venues :: GetPurchaseOrdersRequest , } # [pymethods] impl GetPurchaseOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } # [getter] fn purchase_order_no (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . purchase_order_no . clone () . into ()) } # [getter] fn current_page (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . page_size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PurchaseOrder { inner : venues :: PurchaseOrder , } # [pymethods] impl PurchaseOrder { # [staticmethod] fn from_inner (inner : PurchaseOrder) -> Self { Self { inner } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn purchase_order_no (& self) -> PyResult < String > { Ok (self . inner . purchase_order_no . clone () . into ()) } # [getter] fn purchase_size (& self) -> PyResult < String > { Ok (self . inner . purchase_size . clone () . into ()) } # [getter] fn match_size (& self) -> PyResult < String > { Ok (self . inner . match_size . clone () . into ()) } # [getter] fn redeem_size (& self) -> PyResult < String > { Ok (self . inner . redeem_size . clone () . into ()) } # [getter] fn interest_rate (& self) -> PyResult < String > { Ok (self . inner . interest_rate . clone () . into ()) } # [getter] fn income_size (& self) -> PyResult < String > { Ok (self . inner . income_size . clone () . into ()) } # [getter] fn apply_time (& self) -> PyResult < String > { Ok (self . inner . apply_time . clone () . into ()) } # [getter] fn status (& self) -> PyResult < String > { Ok (self . inner . status . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PurchaseOrdersResponse { inner : venues :: PurchaseOrdersResponse , } # [pymethods] impl PurchaseOrdersResponse { # [staticmethod] fn from_inner (inner : PurchaseOrdersResponse) -> Self { Self { inner } } # [getter] fn current_page (& self) -> PyResult < i64 > { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < i64 > { Ok (self . inner . page_size . clone () . into ()) } # [getter] fn total_num (& self) -> PyResult < i64 > { Ok (self . inner . total_num . clone () . into ()) } # [getter] fn total_page (& self) -> PyResult < i64 > { Ok (self . inner . total_page . clone () . into ()) } # [getter] fn items (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . items . clone () . into ()) } } # [pymethods] impl RestClient { fn get_purchase_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_purchase_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetWithdrawalsRequest { inner : venues :: GetWithdrawalsRequest , } # [pymethods] impl GetWithdrawalsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn status (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . status . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct WithdrawalsResponse { inner : venues :: WithdrawalsResponse , } # [pymethods] impl WithdrawalsResponse { # [staticmethod] fn from_inner (inner : WithdrawalsResponse) -> Self { Self { inner } } # [getter] fn current_page (& self) -> PyResult < i64 > { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < i64 > { Ok (self . inner . page_size . clone () . into ()) } # [getter] fn total_num (& self) -> PyResult < i64 > { Ok (self . inner . total_num . clone () . into ()) } # [getter] fn total_page (& self) -> PyResult < i64 > { Ok (self . inner . total_page . clone () . into ()) } # [getter] fn items (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . items . clone () . into ()) } } # [pymethods] impl RestClient { fn get_withdrawals <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_withdrawals () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetInnerTransfersRequest { inner : venues :: GetInnerTransfersRequest , } # [pymethods] impl GetInnerTransfersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } # [getter] fn from (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from . clone () . into ()) } # [getter] fn to (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . to . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct InnerTransfersResponse { inner : venues :: InnerTransfersResponse , } # [pymethods] impl InnerTransfersResponse { # [staticmethod] fn from_inner (inner : InnerTransfersResponse) -> Self { Self { inner } } # [getter] fn current_page (& self) -> PyResult < i64 > { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < i64 > { Ok (self . inner . page_size . clone () . into ()) } # [getter] fn total_num (& self) -> PyResult < i64 > { Ok (self . inner . total_num . clone () . into ()) } # [getter] fn total_page (& self) -> PyResult < i64 > { Ok (self . inner . total_page . clone () . into ()) } # [getter] fn items (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . items . clone () . into ()) } } # [pymethods] impl RestClient { fn get_inner_transfers <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_inner_transfers () . await }) } } # [pyclass] # [derive (Clone)] pub enum RedeemOrderStatus { Done , Pending , } # [pyclass] # [derive (Clone)] pub struct GetRedeemOrdersRequest { inner : venues :: GetRedeemOrdersRequest , } # [pymethods] impl GetRedeemOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } # [getter] fn redeem_order_no (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . redeem_order_no . clone () . into ()) } # [getter] fn current_page (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . page_size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RedeemOrder { inner : venues :: RedeemOrder , } # [pymethods] impl RedeemOrder { # [staticmethod] fn from_inner (inner : RedeemOrder) -> Self { Self { inner } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn purchase_order_no (& self) -> PyResult < String > { Ok (self . inner . purchase_order_no . clone () . into ()) } # [getter] fn redeem_order_no (& self) -> PyResult < String > { Ok (self . inner . redeem_order_no . clone () . into ()) } # [getter] fn redeem_size (& self) -> PyResult < String > { Ok (self . inner . redeem_size . clone () . into ()) } # [getter] fn receipt_size (& self) -> PyResult < String > { Ok (self . inner . receipt_size . clone () . into ()) } # [getter] fn apply_time (& self) -> PyResult < String > { Ok (self . inner . apply_time . clone () . into ()) } # [getter] fn status (& self) -> PyResult < String > { Ok (self . inner . status . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RedeemOrdersResponse { inner : venues :: RedeemOrdersResponse , } # [pymethods] impl RedeemOrdersResponse { # [staticmethod] fn from_inner (inner : RedeemOrdersResponse) -> Self { Self { inner } } # [getter] fn current_page (& self) -> PyResult < i64 > { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < i64 > { Ok (self . inner . page_size . clone () . into ()) } # [getter] fn total_num (& self) -> PyResult < i64 > { Ok (self . inner . total_num . clone () . into ()) } # [getter] fn total_page (& self) -> PyResult < i64 > { Ok (self . inner . total_page . clone () . into ()) } # [getter] fn items (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . items . clone () . into ()) } } # [pymethods] impl RestClient { fn get_redeem_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_redeem_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct CreateSubTransferRequest { inner : venues :: CreateSubTransferRequest , } # [pymethods] impl CreateSubTransferRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn direction (& self) -> PyResult < String > { Ok (self . inner . direction . clone () . into ()) } # [getter] fn account_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . account_type . clone () . into ()) } # [getter] fn sub_user_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sub_user_id . clone () . into ()) } # [getter] fn sub_account_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sub_account_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SubTransferResponse { inner : venues :: SubTransferResponse , } # [pymethods] impl SubTransferResponse { # [staticmethod] fn from_inner (inner : SubTransferResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn create_sub_transfer <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . create_sub_transfer () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderRequest { inner : venues :: CancelOrderRequest , } # [pymethods] impl CancelOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderResponse { inner : venues :: CancelOrderResponse , } # [pymethods] impl CancelOrderResponse { # [staticmethod] fn from_inner (inner : CancelOrderResponse) -> Self { Self { inner } } # [getter] fn cancelled_order_ids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . cancelled_order_ids . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct ModifyPurchaseRequest { inner : venues :: ModifyPurchaseRequest , } # [pymethods] impl ModifyPurchaseRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn interest_rate (& self) -> PyResult < String > { Ok (self . inner . interest_rate . clone () . into ()) } # [getter] fn purchase_order_no (& self) -> PyResult < String > { Ok (self . inner . purchase_order_no . clone () . into ()) } } # [pymethods] impl RestClient { fn modify_purchase <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . modify_purchase () . await }) } } # [pyclass] # [derive (Clone)] pub struct BorrowRequest { inner : venues :: BorrowRequest , } # [pymethods] impl BorrowRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn is_isolated (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . is_isolated . clone () . into ()) } # [getter] fn is_hf (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . is_hf . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BorrowResponse { inner : venues :: BorrowResponse , } # [pymethods] impl BorrowResponse { # [staticmethod] fn from_inner (inner : BorrowResponse) -> Self { Self { inner } } # [getter] fn order_no (& self) -> PyResult < String > { Ok (self . inner . order_no . clone () . into ()) } # [getter] fn actual_size (& self) -> PyResult < String > { Ok (self . inner . actual_size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum TimeInForce { ImmediateOrCancel , FillOrKill , } # [pymethods] impl RestClient { fn borrow <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . borrow () . await }) } } # [pyclass] # [derive (Clone)] pub enum MarginOrderSide { Buy , Sell , } # [pyclass] # [derive (Clone)] pub enum MarginOrderType { Limit , Market , } # [pyclass] # [derive (Clone)] pub enum MarginOrderStp { CancelNewest , CancelOldest , CancelBoth , DecrementAndCancel , } # [pyclass] # [derive (Clone)] pub enum MarginOrderTimeInForce { GoodTillCancelled , ImmediateOrCancel , FillOrKill , } # [pyclass] # [derive (Clone)] pub struct AddMarginOrderRequest { inner : venues :: AddMarginOrderRequest , } # [pymethods] impl AddMarginOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn client_oid (& self) -> PyResult < String > { Ok (self . inner . client_oid . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn r#type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . r#type . clone () . into ()) } # [getter] fn stp (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stp . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . size . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn hidden (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . hidden . clone () . into ()) } # [getter] fn iceberg (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AddMarginOrderResponse { inner : venues :: AddMarginOrderResponse , } # [pymethods] impl AddMarginOrderResponse { # [staticmethod] fn from_inner (inner : AddMarginOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn add_margin_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . add_margin_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetSubAccountBalanceRequest { inner : venues :: GetSubAccountBalanceRequest , } # [pymethods] impl GetSubAccountBalanceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn sub_user_id (& self) -> PyResult < String > { Ok (self . inner . sub_user_id . clone () . into ()) } # [getter] fn include_base_amount (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . include_base_amount . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Account { inner : venues :: Account , } # [pymethods] impl Account { # [staticmethod] fn from_inner (inner : Account) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < String > { Ok (self . inner . id . clone () . into ()) } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn account_type (& self) -> PyResult < String > { Ok (self . inner . account_type . clone () . into ()) } # [getter] fn balance (& self) -> PyResult < String > { Ok (self . inner . balance . clone () . into ()) } # [getter] fn available (& self) -> PyResult < String > { Ok (self . inner . available . clone () . into ()) } # [getter] fn holds (& self) -> PyResult < String > { Ok (self . inner . holds . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SubAccountBalance { inner : venues :: SubAccountBalance , } # [pymethods] impl SubAccountBalance { # [staticmethod] fn from_inner (inner : SubAccountBalance) -> Self { Self { inner } } # [getter] fn sub_user_id (& self) -> PyResult < String > { Ok (self . inner . sub_user_id . clone () . into ()) } # [getter] fn sub_name (& self) -> PyResult < String > { Ok (self . inner . sub_name . clone () . into ()) } # [getter] fn main_accounts (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . main_accounts . clone () . into ()) } # [getter] fn trade_accounts (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . trade_accounts . clone () . into ()) } # [getter] fn margin_accounts (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . margin_accounts . clone () . into ()) } } # [pymethods] impl RestClient { fn get_sub_account_balance <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_sub_account_balance () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetFillsRequest { inner : venues :: GetFillsRequest , } # [pymethods] impl GetFillsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn side (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . side . clone () . into ()) } # [getter] fn trade_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trade_type . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct FillsResponse { inner : venues :: FillsResponse , } # [pymethods] impl FillsResponse { # [staticmethod] fn from_inner (inner : FillsResponse) -> Self { Self { inner } } # [getter] fn current_page (& self) -> PyResult < i64 > { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < i64 > { Ok (self . inner . page_size . clone () . into ()) } # [getter] fn total_num (& self) -> PyResult < i64 > { Ok (self . inner . total_num . clone () . into ()) } # [getter] fn total_page (& self) -> PyResult < i64 > { Ok (self . inner . total_page . clone () . into ()) } # [getter] fn items (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . items . clone () . into ()) } } # [pymethods] impl RestClient { fn get_fills <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_fills () . await }) } } # [pyclass] # [derive (Clone)] pub struct PlaceOrderRequest { inner : venues :: PlaceOrderRequest , } # [pymethods] impl PlaceOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn remark (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . remark . clone () . into ()) } # [getter] fn stp (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stp . clone () . into ()) } # [getter] fn trade_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trade_type . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . size . clone () . into ()) } # [getter] fn funds (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . funds . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn cancel_after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cancel_after . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn hidden (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . hidden . clone () . into ()) } # [getter] fn iceberg (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iceberg . clone () . into ()) } # [getter] fn visible_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . visible_size . clone () . into ()) } # [getter] fn tags (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tags . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PlaceOrderResponse { inner : venues :: PlaceOrderResponse , } # [pymethods] impl PlaceOrderResponse { # [staticmethod] fn from_inner (inner : PlaceOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn place_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . place_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetStopOrdersRequest { inner : venues :: GetStopOrdersRequest , } # [pymethods] impl GetStopOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_ids (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_ids . clone () . into ()) } # [getter] fn current_page (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . page_size . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Order { inner : venues :: Order , } # [pymethods] impl Order { # [staticmethod] fn from_inner (inner : Order) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < String > { Ok (self . inner . id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn operation_type (& self) -> PyResult < String > { Ok (self . inner . operation_type . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < String > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn funds (& self) -> PyResult < String > { Ok (self . inner . funds . clone () . into ()) } # [getter] fn deal_amount (& self) -> PyResult < String > { Ok (self . inner . deal_amount . clone () . into ()) } # [getter] fn deal_funds (& self) -> PyResult < String > { Ok (self . inner . deal_funds . clone () . into ()) } # [getter] fn fee (& self) -> PyResult < String > { Ok (self . inner . fee . clone () . into ()) } # [getter] fn fee_currency (& self) -> PyResult < String > { Ok (self . inner . fee_currency . clone () . into ()) } # [getter] fn stp (& self) -> PyResult < String > { Ok (self . inner . stp . clone () . into ()) } # [getter] fn stop (& self) -> PyResult < String > { Ok (self . inner . stop . clone () . into ()) } # [getter] fn stop_triggered (& self) -> PyResult < bool > { Ok (self . inner . stop_triggered . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < String > { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < String > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < bool > { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn hidden (& self) -> PyResult < bool > { Ok (self . inner . hidden . clone () . into ()) } # [getter] fn iceberg (& self) -> PyResult < bool > { Ok (self . inner . iceberg . clone () . into ()) } # [getter] fn visible_size (& self) -> PyResult < String > { Ok (self . inner . visible_size . clone () . into ()) } # [getter] fn cancel_after (& self) -> PyResult < i64 > { Ok (self . inner . cancel_after . clone () . into ()) } # [getter] fn channel (& self) -> PyResult < String > { Ok (self . inner . channel . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn remark (& self) -> PyResult < String > { Ok (self . inner . remark . clone () . into ()) } # [getter] fn tags (& self) -> PyResult < String > { Ok (self . inner . tags . clone () . into ()) } # [getter] fn is_active (& self) -> PyResult < bool > { Ok (self . inner . is_active . clone () . into ()) } # [getter] fn cancel_exist (& self) -> PyResult < bool > { Ok (self . inner . cancel_exist . clone () . into ()) } # [getter] fn created_at (& self) -> PyResult < i64 > { Ok (self . inner . created_at . clone () . into ()) } # [getter] fn trade_type (& self) -> PyResult < String > { Ok (self . inner . trade_type . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrdersResponse { inner : venues :: OrdersResponse , } # [pymethods] impl OrdersResponse { # [staticmethod] fn from_inner (inner : OrdersResponse) -> Self { Self { inner } } # [getter] fn current_page (& self) -> PyResult < i64 > { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < i64 > { Ok (self . inner . page_size . clone () . into ()) } # [getter] fn total_num (& self) -> PyResult < i64 > { Ok (self . inner . total_num . clone () . into ()) } # [getter] fn total_page (& self) -> PyResult < i64 > { Ok (self . inner . total_page . clone () . into ()) } # [getter] fn items (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . items . clone () . into ()) } } # [pymethods] impl RestClient { fn get_stop_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_stop_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetInterestHistoryRequest { inner : venues :: GetInterestHistoryRequest , } # [pymethods] impl GetInterestHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } # [getter] fn is_isolated (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . is_isolated . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn current_page (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . page_size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct InterestHistoryItem { inner : venues :: InterestHistoryItem , } # [pymethods] impl InterestHistoryItem { # [staticmethod] fn from_inner (inner : InterestHistoryItem) -> Self { Self { inner } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn day_ratio (& self) -> PyResult < String > { Ok (self . inner . day_ratio . clone () . into ()) } # [getter] fn interest_amount (& self) -> PyResult < String > { Ok (self . inner . interest_amount . clone () . into ()) } # [getter] fn created_time (& self) -> PyResult < i64 > { Ok (self . inner . created_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct InterestHistoryResponse { inner : venues :: InterestHistoryResponse , } # [pymethods] impl InterestHistoryResponse { # [staticmethod] fn from_inner (inner : InterestHistoryResponse) -> Self { Self { inner } } # [getter] fn timestamp (& self) -> PyResult < i64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn current_page (& self) -> PyResult < i64 > { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < i64 > { Ok (self . inner . page_size . clone () . into ()) } # [getter] fn total_num (& self) -> PyResult < i64 > { Ok (self . inner . total_num . clone () . into ()) } # [getter] fn total_page (& self) -> PyResult < i64 > { Ok (self . inner . total_page . clone () . into ()) } # [getter] fn items (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . items . clone () . into ()) } } # [pymethods] impl RestClient { fn get_interest_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_interest_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetTransferableRequest { inner : venues :: GetTransferableRequest , } # [pymethods] impl GetTransferableRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn account_type (& self) -> PyResult < String > { Ok (self . inner . account_type . clone () . into ()) } # [getter] fn tag (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tag . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TransferableBalance { inner : venues :: TransferableBalance , } # [pymethods] impl TransferableBalance { # [staticmethod] fn from_inner (inner : TransferableBalance) -> Self { Self { inner } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn balance (& self) -> PyResult < String > { Ok (self . inner . balance . clone () . into ()) } # [getter] fn available (& self) -> PyResult < String > { Ok (self . inner . available . clone () . into ()) } # [getter] fn holds (& self) -> PyResult < String > { Ok (self . inner . holds . clone () . into ()) } # [getter] fn transferable (& self) -> PyResult < String > { Ok (self . inner . transferable . clone () . into ()) } } # [pymethods] impl RestClient { fn get_transferable <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_transferable () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMarginRiskLimitRequest { inner : venues :: GetMarginRiskLimitRequest , } # [pymethods] impl GetMarginRiskLimitRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn is_isolated (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . is_isolated . clone () . into ()) } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MarginRiskLimitInfo { inner : venues :: MarginRiskLimitInfo , } # [pymethods] impl MarginRiskLimitInfo { # [staticmethod] fn from_inner (inner : MarginRiskLimitInfo) -> Self { Self { inner } } # [getter] fn timestamp (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } # [getter] fn borrow_max_amount (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . borrow_max_amount . clone () . into ()) } # [getter] fn buy_max_amount (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . buy_max_amount . clone () . into ()) } # [getter] fn hold_max_amount (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . hold_max_amount . clone () . into ()) } # [getter] fn borrow_coefficient (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . borrow_coefficient . clone () . into ()) } # [getter] fn margin_coefficient (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . margin_coefficient . clone () . into ()) } # [getter] fn precision (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . precision . clone () . into ()) } # [getter] fn borrow_min_amount (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . borrow_min_amount . clone () . into ()) } # [getter] fn borrow_min_unit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . borrow_min_unit . clone () . into ()) } # [getter] fn borrow_enabled (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . borrow_enabled . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn base_max_borrow_amount (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_max_borrow_amount . clone () . into ()) } # [getter] fn quote_max_borrow_amount (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quote_max_borrow_amount . clone () . into ()) } # [getter] fn base_max_buy_amount (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_max_buy_amount . clone () . into ()) } # [getter] fn quote_max_buy_amount (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quote_max_buy_amount . clone () . into ()) } # [getter] fn base_max_hold_amount (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_max_hold_amount . clone () . into ()) } # [getter] fn quote_max_hold_amount (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quote_max_hold_amount . clone () . into ()) } # [getter] fn base_precision (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_precision . clone () . into ()) } # [getter] fn quote_precision (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quote_precision . clone () . into ()) } # [getter] fn base_borrow_min_amount (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_borrow_min_amount . clone () . into ()) } # [getter] fn quote_borrow_min_amount (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quote_borrow_min_amount . clone () . into ()) } # [getter] fn base_borrow_min_unit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_borrow_min_unit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetMarginRiskLimitResponse { inner : venues :: GetMarginRiskLimitResponse , } # [pymethods] impl GetMarginRiskLimitResponse { # [staticmethod] fn from_inner (inner : GetMarginRiskLimitResponse) -> Self { Self { inner } } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_margin_risk_limit <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_margin_risk_limit () . await }) } } # [pyclass] # [derive (Clone)] pub struct CreateInnerTransferRequest { inner : venues :: CreateInnerTransferRequest , } # [pymethods] impl CreateInnerTransferRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn from (& self) -> PyResult < String > { Ok (self . inner . from . clone () . into ()) } # [getter] fn to (& self) -> PyResult < String > { Ok (self . inner . to . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn from_account_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_account_id . clone () . into ()) } # [getter] fn to_account_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . to_account_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct InnerTransferResponse { inner : venues :: InnerTransferResponse , } # [pymethods] impl InnerTransferResponse { # [staticmethod] fn from_inner (inner : InnerTransferResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn create_inner_transfer <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . create_inner_transfer () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetFullOrderBookRequest { inner : venues :: GetFullOrderBookRequest , } # [pymethods] impl GetFullOrderBookRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct FullOrderBookResponse { inner : venues :: FullOrderBookResponse , } # [pymethods] impl FullOrderBookResponse { # [staticmethod] fn from_inner (inner : FullOrderBookResponse) -> Self { Self { inner } } # [getter] fn time (& self) -> PyResult < i64 > { Ok (self . inner . time . clone () . into ()) } # [getter] fn sequence (& self) -> PyResult < String > { Ok (self . inner . sequence . clone () . into ()) } # [getter] fn bids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . bids . clone () . into ()) } # [getter] fn asks (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . asks . clone () . into ()) } } # [pymethods] impl RestClient { fn get_full_order_book <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_full_order_book () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAccountLedgersRequest { inner : venues :: GetAccountLedgersRequest , } # [pymethods] impl GetAccountLedgersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } # [getter] fn direction (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . direction . clone () . into ()) } # [getter] fn business_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . business_type . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountLedger { inner : venues :: AccountLedger , } # [pymethods] impl AccountLedger { # [staticmethod] fn from_inner (inner : AccountLedger) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < String > { Ok (self . inner . id . clone () . into ()) } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn fee (& self) -> PyResult < String > { Ok (self . inner . fee . clone () . into ()) } # [getter] fn balance (& self) -> PyResult < String > { Ok (self . inner . balance . clone () . into ()) } # [getter] fn account_type (& self) -> PyResult < String > { Ok (self . inner . account_type . clone () . into ()) } # [getter] fn business_type (& self) -> PyResult < String > { Ok (self . inner . business_type . clone () . into ()) } # [getter] fn direction (& self) -> PyResult < String > { Ok (self . inner . direction . clone () . into ()) } # [getter] fn created_at (& self) -> PyResult < i64 > { Ok (self . inner . created_at . clone () . into ()) } # [getter] fn context (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . context . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountLedgersResponse { inner : venues :: AccountLedgersResponse , } # [pymethods] impl AccountLedgersResponse { # [staticmethod] fn from_inner (inner : AccountLedgersResponse) -> Self { Self { inner } } # [getter] fn current_page (& self) -> PyResult < i64 > { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < i64 > { Ok (self . inner . page_size . clone () . into ()) } # [getter] fn total_num (& self) -> PyResult < i64 > { Ok (self . inner . total_num . clone () . into ()) } # [getter] fn total_page (& self) -> PyResult < i64 > { Ok (self . inner . total_page . clone () . into ()) } # [getter] fn items (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . items . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_ledgers <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_ledgers () . await }) } } # [pyclass] # [derive (Clone)] pub struct CreateWithdrawalRequest { inner : venues :: CreateWithdrawalRequest , } # [pymethods] impl CreateWithdrawalRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn address (& self) -> PyResult < String > { Ok (self . inner . address . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn memo (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . memo . clone () . into ()) } # [getter] fn is_inner (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . is_inner . clone () . into ()) } # [getter] fn remark (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . remark . clone () . into ()) } # [getter] fn chain (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . chain . clone () . into ()) } # [getter] fn fee_deduct_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . fee_deduct_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct WithdrawalResponse { inner : venues :: WithdrawalResponse , } # [pymethods] impl WithdrawalResponse { # [staticmethod] fn from_inner (inner : WithdrawalResponse) -> Self { Self { inner } } # [getter] fn withdrawal_id (& self) -> PyResult < String > { Ok (self . inner . withdrawal_id . clone () . into ()) } } # [pymethods] impl RestClient { fn create_withdrawal <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . create_withdrawal () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetLoanMarketRequest { inner : venues :: GetLoanMarketRequest , } # [pymethods] impl GetLoanMarketRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } } # [pymethods] impl RestClient { fn get_loan_market <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_loan_market () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetLoanMarketInterestRateRequest { inner : venues :: GetLoanMarketInterestRateRequest , } # [pymethods] impl GetLoanMarketInterestRateRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } } # [pymethods] impl RestClient { fn get_loan_market_interest_rate <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_loan_market_interest_rate () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetWithdrawalQuotasRequest { inner : venues :: GetWithdrawalQuotasRequest , } # [pymethods] impl GetWithdrawalQuotasRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn chain (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . chain . clone () . into ()) } } # [pymethods] impl RestClient { fn get_withdrawal_quotas <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_withdrawal_quotas () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetDepositsRequest { inner : venues :: GetDepositsRequest , } # [pymethods] impl GetDepositsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn status (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . status . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct DepositsResponse { inner : venues :: DepositsResponse , } # [pymethods] impl DepositsResponse { # [staticmethod] fn from_inner (inner : DepositsResponse) -> Self { Self { inner } } # [getter] fn current_page (& self) -> PyResult < i64 > { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < i64 > { Ok (self . inner . page_size . clone () . into ()) } # [getter] fn total_num (& self) -> PyResult < i64 > { Ok (self . inner . total_num . clone () . into ()) } # [getter] fn total_page (& self) -> PyResult < i64 > { Ok (self . inner . total_page . clone () . into ()) } # [getter] fn items (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . items . clone () . into ()) } } # [pymethods] impl RestClient { fn get_deposits <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_deposits () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMarginSymbolsRequest { inner : venues :: GetMarginSymbolsRequest , } # [pymethods] impl GetMarginSymbolsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MarginSymbolInfo { inner : venues :: MarginSymbolInfo , } # [pymethods] impl MarginSymbolInfo { # [staticmethod] fn from_inner (inner : MarginSymbolInfo) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn name (& self) -> PyResult < String > { Ok (self . inner . name . clone () . into ()) } # [getter] fn enable_trading (& self) -> PyResult < bool > { Ok (self . inner . enable_trading . clone () . into ()) } # [getter] fn market (& self) -> PyResult < String > { Ok (self . inner . market . clone () . into ()) } # [getter] fn base_currency (& self) -> PyResult < String > { Ok (self . inner . base_currency . clone () . into ()) } # [getter] fn quote_currency (& self) -> PyResult < String > { Ok (self . inner . quote_currency . clone () . into ()) } # [getter] fn base_increment (& self) -> PyResult < String > { Ok (self . inner . base_increment . clone () . into ()) } # [getter] fn base_min_size (& self) -> PyResult < String > { Ok (self . inner . base_min_size . clone () . into ()) } # [getter] fn quote_increment (& self) -> PyResult < String > { Ok (self . inner . quote_increment . clone () . into ()) } # [getter] fn quote_min_size (& self) -> PyResult < String > { Ok (self . inner . quote_min_size . clone () . into ()) } # [getter] fn base_max_size (& self) -> PyResult < String > { Ok (self . inner . base_max_size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetMarginSymbolsResponse { inner : venues :: GetMarginSymbolsResponse , } # [pymethods] impl GetMarginSymbolsResponse { # [staticmethod] fn from_inner (inner : GetMarginSymbolsResponse) -> Self { Self { inner } } # [getter] fn timestamp (& self) -> PyResult < i64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn items (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . items . clone () . into ()) } } # [pymethods] impl RestClient { fn get_margin_symbols <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_margin_symbols () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetBorrowHistoryRequest { inner : venues :: GetBorrowHistoryRequest , } # [pymethods] impl GetBorrowHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn is_isolated (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . is_isolated . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_no (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_no . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn current_page (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . page_size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BorrowHistoryItem { inner : venues :: BorrowHistoryItem , } # [pymethods] impl BorrowHistoryItem { # [staticmethod] fn from_inner (inner : BorrowHistoryItem) -> Self { Self { inner } } # [getter] fn order_no (& self) -> PyResult < String > { Ok (self . inner . order_no . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn principal (& self) -> PyResult < String > { Ok (self . inner . principal . clone () . into ()) } # [getter] fn interest (& self) -> PyResult < String > { Ok (self . inner . interest . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn created_time (& self) -> PyResult < i64 > { Ok (self . inner . created_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BorrowHistoryResponse { inner : venues :: BorrowHistoryResponse , } # [pymethods] impl BorrowHistoryResponse { # [staticmethod] fn from_inner (inner : BorrowHistoryResponse) -> Self { Self { inner } } # [getter] fn timestamp (& self) -> PyResult < i64 > { Ok (self . inner . timestamp . clone () . into ()) } # [getter] fn current_page (& self) -> PyResult < i64 > { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < i64 > { Ok (self . inner . page_size . clone () . into ()) } # [getter] fn total_num (& self) -> PyResult < i64 > { Ok (self . inner . total_num . clone () . into ()) } # [getter] fn total_page (& self) -> PyResult < i64 > { Ok (self . inner . total_page . clone () . into ()) } # [getter] fn items (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . items . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum OrderStatus { Pending , Success , Failed , } # [pymethods] impl RestClient { fn get_borrow_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_borrow_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAccountBalanceRequest { inner : venues :: GetAccountBalanceRequest , } # [pymethods] impl GetAccountBalanceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } # [getter] fn account_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . account_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountBalance { inner : venues :: AccountBalance , } # [pymethods] impl AccountBalance { # [staticmethod] fn from_inner (inner : AccountBalance) -> Self { Self { inner } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn balance (& self) -> PyResult < String > { Ok (self . inner . balance . clone () . into ()) } # [getter] fn available (& self) -> PyResult < String > { Ok (self . inner . available . clone () . into ()) } # [getter] fn holds (& self) -> PyResult < String > { Ok (self . inner . holds . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_balance <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_balance () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOrdersRequest { inner : venues :: GetOrdersRequest , } # [pymethods] impl GetOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn status (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . status . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Order { inner : venues :: Order , } # [pymethods] impl Order { # [staticmethod] fn from_inner (inner : Order) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < String > { Ok (self . inner . id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn operation_type (& self) -> PyResult < String > { Ok (self . inner . operation_type . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < String > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn funds (& self) -> PyResult < String > { Ok (self . inner . funds . clone () . into ()) } # [getter] fn deal_amount (& self) -> PyResult < String > { Ok (self . inner . deal_amount . clone () . into ()) } # [getter] fn deal_funds (& self) -> PyResult < String > { Ok (self . inner . deal_funds . clone () . into ()) } # [getter] fn fee (& self) -> PyResult < String > { Ok (self . inner . fee . clone () . into ()) } # [getter] fn fee_currency (& self) -> PyResult < String > { Ok (self . inner . fee_currency . clone () . into ()) } # [getter] fn stp (& self) -> PyResult < String > { Ok (self . inner . stp . clone () . into ()) } # [getter] fn stop (& self) -> PyResult < String > { Ok (self . inner . stop . clone () . into ()) } # [getter] fn stop_triggered (& self) -> PyResult < bool > { Ok (self . inner . stop_triggered . clone () . into ()) } # [getter] fn stop_price (& self) -> PyResult < String > { Ok (self . inner . stop_price . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < String > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn post_only (& self) -> PyResult < bool > { Ok (self . inner . post_only . clone () . into ()) } # [getter] fn hidden (& self) -> PyResult < bool > { Ok (self . inner . hidden . clone () . into ()) } # [getter] fn iceberg (& self) -> PyResult < bool > { Ok (self . inner . iceberg . clone () . into ()) } # [getter] fn visible_size (& self) -> PyResult < String > { Ok (self . inner . visible_size . clone () . into ()) } # [getter] fn cancel_after (& self) -> PyResult < i64 > { Ok (self . inner . cancel_after . clone () . into ()) } # [getter] fn channel (& self) -> PyResult < String > { Ok (self . inner . channel . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn remark (& self) -> PyResult < String > { Ok (self . inner . remark . clone () . into ()) } # [getter] fn tags (& self) -> PyResult < String > { Ok (self . inner . tags . clone () . into ()) } # [getter] fn is_active (& self) -> PyResult < bool > { Ok (self . inner . is_active . clone () . into ()) } # [getter] fn cancel_exist (& self) -> PyResult < bool > { Ok (self . inner . cancel_exist . clone () . into ()) } # [getter] fn created_at (& self) -> PyResult < i64 > { Ok (self . inner . created_at . clone () . into ()) } # [getter] fn trade_type (& self) -> PyResult < String > { Ok (self . inner . trade_type . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrdersResponse { inner : venues :: OrdersResponse , } # [pymethods] impl OrdersResponse { # [staticmethod] fn from_inner (inner : OrdersResponse) -> Self { Self { inner } } # [getter] fn current_page (& self) -> PyResult < i64 > { Ok (self . inner . current_page . clone () . into ()) } # [getter] fn page_size (& self) -> PyResult < i64 > { Ok (self . inner . page_size . clone () . into ()) } # [getter] fn total_num (& self) -> PyResult < i64 > { Ok (self . inner . total_num . clone () . into ()) } # [getter] fn total_page (& self) -> PyResult < i64 > { Ok (self . inner . total_page . clone () . into ()) } # [getter] fn items (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . items . clone () . into ()) } } # [pymethods] impl RestClient { fn get_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct ErrorResponse { inner : venues :: ErrorResponse , } # [pymethods] impl ErrorResponse { # [staticmethod] fn from_inner (inner : ErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum VipLevel { Vip0 , Vip1 , Vip2 , Vip3 , Vip4 , Vip5 , Vip6 , Vip7 , Vip8 , Vip9 , Vip10 , Vip11 , Vip12 , } # [pyclass] # [derive (Clone)] pub enum ResourcePool { Spot , Futures , Management , Earn , CopyTrading , Public , } # [pyclass] # [derive (Clone)] pub struct RateLimiter { inner : venues :: RateLimiter , } # [pymethods] impl RateLimiter { # [staticmethod] fn from_inner (inner : RateLimiter) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct RateLimitStatus { inner : venues :: RateLimitStatus , } # [pymethods] impl RateLimitStatus { # [staticmethod] fn from_inner (inner : RateLimitStatus) -> Self { Self { inner } } # [getter] fn limit (& self) -> PyResult < u64 > { Ok (self . inner . limit . clone () . into ()) } # [getter] fn remaining (& self) -> PyResult < u64 > { Ok (self . inner . remaining . clone () . into ()) } # [getter] fn reset_time_ms (& self) -> PyResult < u64 > { Ok (self . inner . reset_time_ms . clone () . into ()) } # [getter] fn used (& self) -> PyResult < u64 > { Ok (self . inner . used . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimitHeader { inner : venues :: RateLimitHeader , } # [pymethods] impl RateLimitHeader { # [staticmethod] fn from_inner (inner : RateLimitHeader) -> Self { Self { inner } } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn remaining (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . remaining . clone () . into ()) } # [getter] fn reset (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . reset . clone () . into ()) } } # [doc = " Create the Python module for kucoin"] pub fn create_module (py : Python) -> PyResult <& PyModule > { let m = PyModule :: new (py , "kucoin") ?; Ok (m) }