# ! [doc = " Python bindings for bitget venue"] # ! [doc = ""] # ! [doc = " This module is automatically generated from the Rust source code."] # ! [doc = " Do not edit this file directly."] use pyo3 :: prelude ::*; use pyo3_asyncio ; use venues ; # [pyclass] # [derive (Clone)] pub enum OrderSide { Buy , Sell , } # [pyclass] # [derive (Clone)] pub enum OrderType { Limit , Market , } # [pyclass] # [derive (Clone)] pub enum TimeInForce { GTC , IOC , FOK , } # [pyclass] # [derive (Clone)] pub enum OrderStatus { Init , New , PartiallyFilled , Filled , Cancelled , } # [pyclass] # [derive (Clone)] pub enum AssetType { HoldOnly , All , } # [pyclass] # [derive (Clone)] pub enum RateLimitInterval { Second , Minute , } # [pyclass] # [derive (Clone)] pub enum RateLimitType { RequestFrequency , Orders , } # [pyclass] # [derive (Clone)] pub enum SymbolStatus { Online , Offline , Halt , Gray , } # [pyclass] # [derive (Clone)] pub enum PricePrecision { Scale0 , Scale1 , Scale2 , Scale3 , } # [pyclass] # [derive (Clone)] pub enum DepthType { Step0 , Step1 , Step2 , Step3 , Step4 , Step5 , } # [pyclass] # [derive (Clone)] pub enum CandlestickGranularity { OneMinute , ThreeMinutes , FiveMinutes , FifteenMinutes , ThirtyMinutes , OneHour , FourHours , SixHours , TwelveHours , OneDay , ThreeDays , OneWeek , OneMonth , SixHoursUtc , TwelveHoursUtc , OneDayUtc , ThreeDaysUtc , OneWeekUtc , OneMonthUtc , } # [pyclass] # [derive (Clone)] pub enum TradeScope { Taker , Maker , } # [pyclass] # [derive (Clone)] pub enum AccountType { Spot , P2p , CoinFutures , UsdtFutures , UsdcFutures , CrossedMargin , IsolatedMargin , } # [pyclass] # [derive (Clone)] pub enum WithdrawType { OnChain , InternalTransfer , } # [pyclass] # [derive (Clone)] pub enum InnerTransferType { Email , Mobile , Uid , } # [pyclass] # [derive (Clone)] pub enum IdentityType { User , Company , } # [pyclass] # [derive (Clone)] pub enum ProductType { UsdtFutures , UsdcFutures , CoinFutures , SUsdtFutures , SUsdcFutures , SCoinFutures , } # [pyclass] # [derive (Clone)] pub enum HoldSide { Long , Short , } # [pyclass] # [derive (Clone)] pub enum MarginMode { Isolated , Crossed , } # [pyclass] # [derive (Clone)] pub enum MarginCoin { Usdt , Usdc , } # [pyclass] # [derive (Clone)] pub enum TriggerType { FillPrice , MarkPrice , } # [pyclass] # [derive (Clone)] pub enum PlanType { NormalPlan , ProfitPlan , LossPlan , PosProfit , PosLoss , MovingPlan , TrackPlan , } # [pyclass] # [derive (Clone)] pub enum PlanStatus { NotTrigger , Triggered , Cancel , Fail , } # [pyclass] # [derive (Clone)] pub enum PositionMode { OneWayMode , HedgeMode , } # [pyclass] # [derive (Clone)] pub enum TransferRole { Initiator , Receiver , } # [pyclass] # [derive (Clone)] pub enum DepositAccountType { UsdtFutures , UsdcFutures , CoinFutures , Spot , } # [pyclass] # [derive (Clone)] pub enum BgbDeductStatus { On , Off , } # [pyclass] # [derive (Clone)] pub struct ResponseHeaders { inner : venues :: ResponseHeaders , } # [pymethods] impl ResponseHeaders { # [staticmethod] fn from_inner (inner : ResponseHeaders) -> Self { Self { inner } } # [getter] fn values (& self) -> PyResult < PyObject > { Ok (self . inner . values . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RestResponse { inner : venues :: RestResponse , } # [pymethods] impl RestResponse { # [staticmethod] fn from_inner (inner : RestResponse) -> Self { Self { inner } } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } # [getter] fn headers (& self) -> PyResult < PyObject > { Ok (self . inner . headers . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetCoinInfoRequest { inner : venues :: GetCoinInfoRequest , } # [pymethods] impl GetCoinInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . coin . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ChainInfo { inner : venues :: ChainInfo , } # [pymethods] impl ChainInfo { # [staticmethod] fn from_inner (inner : ChainInfo) -> Self { Self { inner } } # [getter] fn chain (& self) -> PyResult < String > { Ok (self . inner . chain . clone () . into ()) } # [getter] fn need_tag (& self) -> PyResult < bool > { Ok (self . inner . need_tag . clone () . into ()) } # [getter] fn withdrawable (& self) -> PyResult < bool > { Ok (self . inner . withdrawable . clone () . into ()) } # [getter] fn rechargeable (& self) -> PyResult < bool > { Ok (self . inner . rechargeable . clone () . into ()) } # [getter] fn withdraw_fee (& self) -> PyResult < String > { Ok (self . inner . withdraw_fee . clone () . into ()) } # [getter] fn extra_withdraw_fee (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . extra_withdraw_fee . clone () . into ()) } # [getter] fn deposit_confirm (& self) -> PyResult < String > { Ok (self . inner . deposit_confirm . clone () . into ()) } # [getter] fn withdraw_confirm (& self) -> PyResult < String > { Ok (self . inner . withdraw_confirm . clone () . into ()) } # [getter] fn min_deposit_amount (& self) -> PyResult < String > { Ok (self . inner . min_deposit_amount . clone () . into ()) } # [getter] fn min_withdraw_amount (& self) -> PyResult < String > { Ok (self . inner . min_withdraw_amount . clone () . into ()) } # [getter] fn browser_url (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . browser_url . clone () . into ()) } # [getter] fn contract_address (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . contract_address . clone () . into ()) } # [getter] fn withdraw_step (& self) -> PyResult < String > { Ok (self . inner . withdraw_step . clone () . into ()) } # [getter] fn withdraw_min_scale (& self) -> PyResult < String > { Ok (self . inner . withdraw_min_scale . clone () . into ()) } # [getter] fn congestion (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . congestion . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CoinInfo { inner : venues :: CoinInfo , } # [pymethods] impl CoinInfo { # [staticmethod] fn from_inner (inner : CoinInfo) -> Self { Self { inner } } # [getter] fn coin_id (& self) -> PyResult < String > { Ok (self . inner . coin_id . clone () . into ()) } # [getter] fn coin (& self) -> PyResult < String > { Ok (self . inner . coin . clone () . into ()) } # [getter] fn transfer (& self) -> PyResult < bool > { Ok (self . inner . transfer . clone () . into ()) } # [getter] fn chains (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . chains . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetCoinInfoResponse { inner : venues :: GetCoinInfoResponse , } # [pymethods] impl GetCoinInfoResponse { # [staticmethod] fn from_inner (inner : GetCoinInfoResponse) -> Self { Self { inner } } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_coin_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_coin_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMergeDepthRequest { inner : venues :: GetMergeDepthRequest , } # [pymethods] impl GetMergeDepthRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn precision (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . precision . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MergeDepth { inner : venues :: MergeDepth , } # [pymethods] impl MergeDepth { # [staticmethod] fn from_inner (inner : MergeDepth) -> Self { Self { inner } } # [getter] fn asks (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . asks . clone () . into ()) } # [getter] fn bids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . bids . clone () . into ()) } # [getter] fn precision (& self) -> PyResult < String > { Ok (self . inner . precision . clone () . into ()) } # [getter] fn scale (& self) -> PyResult < String > { Ok (self . inner . scale . clone () . into ()) } # [getter] fn is_max_precision (& self) -> PyResult < String > { Ok (self . inner . is_max_precision . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } } # [pymethods] impl RestClient { fn get_merge_depth <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_merge_depth () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn base_url (& self) -> PyResult < String > { Ok (self . inner . base_url . clone () . into ()) } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn rate_limiter (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limiter . clone () . into ()) } } # [pymethods] impl RestClient { fn get <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get () . await }) } } # [pymethods] impl RestClient { fn get_vip_fee_rate <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_vip_fee_rate () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetHistoryCandlestickRequest { inner : venues :: GetHistoryCandlestickRequest , } # [pymethods] impl GetHistoryCandlestickRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn granularity (& self) -> PyResult < PyObject > { Ok (self . inner . granularity . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < u64 > { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pymethods] impl RestClient { fn get_history_candlestick <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_history_candlestick () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetTickerRequest { inner : venues :: GetTickerRequest , } # [pymethods] impl GetTickerRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Ticker { inner : venues :: Ticker , } # [pymethods] impl Ticker { # [staticmethod] fn from_inner (inner : Ticker) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn high24h (& self) -> PyResult < String > { Ok (self . inner . high24h . clone () . into ()) } # [getter] fn open (& self) -> PyResult < String > { Ok (self . inner . open . clone () . into ()) } # [getter] fn last_price (& self) -> PyResult < String > { Ok (self . inner . last_price . clone () . into ()) } # [getter] fn low24h (& self) -> PyResult < String > { Ok (self . inner . low24h . clone () . into ()) } # [getter] fn quote_volume (& self) -> PyResult < String > { Ok (self . inner . quote_volume . clone () . into ()) } # [getter] fn base_volume (& self) -> PyResult < String > { Ok (self . inner . base_volume . clone () . into ()) } # [getter] fn usdt_volume (& self) -> PyResult < String > { Ok (self . inner . usdt_volume . clone () . into ()) } # [getter] fn bid_price (& self) -> PyResult < String > { Ok (self . inner . bid_price . clone () . into ()) } # [getter] fn ask_price (& self) -> PyResult < String > { Ok (self . inner . ask_price . clone () . into ()) } # [getter] fn bid_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . bid_size . clone () . into ()) } # [getter] fn ask_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ask_size . clone () . into ()) } # [getter] fn open_utc (& self) -> PyResult < String > { Ok (self . inner . open_utc . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } # [getter] fn change_utc_24h (& self) -> PyResult < String > { Ok (self . inner . change_utc_24h . clone () . into ()) } # [getter] fn change24h (& self) -> PyResult < String > { Ok (self . inner . change24h . clone () . into ()) } } # [pymethods] impl RestClient { fn get_ticker <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_ticker () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetRecentTradesRequest { inner : venues :: GetRecentTradesRequest , } # [pymethods] impl GetRecentTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RecentTrade { inner : venues :: RecentTrade , } # [pymethods] impl RecentTrade { # [staticmethod] fn from_inner (inner : RecentTrade) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn trade_id (& self) -> PyResult < String > { Ok (self . inner . trade_id . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } } # [pymethods] impl RestClient { fn get_recent_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_recent_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetCandlestickRequest { inner : venues :: GetCandlestickRequest , } # [pymethods] impl GetCandlestickRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn granularity (& self) -> PyResult < PyObject > { Ok (self . inner . granularity . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pymethods] impl RestClient { fn get_candlestick <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_candlestick () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetSymbolInfoRequest { inner : venues :: GetSymbolInfoRequest , } # [pymethods] impl GetSymbolInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SymbolInfo { inner : venues :: SymbolInfo , } # [pymethods] impl SymbolInfo { # [staticmethod] fn from_inner (inner : SymbolInfo) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn base_coin (& self) -> PyResult < String > { Ok (self . inner . base_coin . clone () . into ()) } # [getter] fn quote_coin (& self) -> PyResult < String > { Ok (self . inner . quote_coin . clone () . into ()) } # [getter] fn min_trade_amount (& self) -> PyResult < String > { Ok (self . inner . min_trade_amount . clone () . into ()) } # [getter] fn max_trade_amount (& self) -> PyResult < String > { Ok (self . inner . max_trade_amount . clone () . into ()) } # [getter] fn taker_fee_rate (& self) -> PyResult < String > { Ok (self . inner . taker_fee_rate . clone () . into ()) } # [getter] fn maker_fee_rate (& self) -> PyResult < String > { Ok (self . inner . maker_fee_rate . clone () . into ()) } # [getter] fn price_precision (& self) -> PyResult < String > { Ok (self . inner . price_precision . clone () . into ()) } # [getter] fn quantity_precision (& self) -> PyResult < String > { Ok (self . inner . quantity_precision . clone () . into ()) } # [getter] fn quote_precision (& self) -> PyResult < String > { Ok (self . inner . quote_precision . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn min_trade_usdt (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . min_trade_usdt . clone () . into ()) } # [getter] fn buy_limit_price_ratio (& self) -> PyResult < String > { Ok (self . inner . buy_limit_price_ratio . clone () . into ()) } # [getter] fn sell_limit_price_ratio (& self) -> PyResult < String > { Ok (self . inner . sell_limit_price_ratio . clone () . into ()) } # [getter] fn area_symbol (& self) -> PyResult < String > { Ok (self . inner . area_symbol . clone () . into ()) } # [getter] fn order_quantity (& self) -> PyResult < String > { Ok (self . inner . order_quantity . clone () . into ()) } # [getter] fn open_time (& self) -> PyResult < String > { Ok (self . inner . open_time . clone () . into ()) } # [getter] fn off_time (& self) -> PyResult < String > { Ok (self . inner . off_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_symbol_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_symbol_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMarketTradesRequest { inner : venues :: GetMarketTradesRequest , } # [pymethods] impl GetMarketTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MarketTrade { inner : venues :: MarketTrade , } # [pymethods] impl MarketTrade { # [staticmethod] fn from_inner (inner : MarketTrade) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn trade_id (& self) -> PyResult < String > { Ok (self . inner . trade_id . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } } # [pymethods] impl RestClient { fn get_market_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_market_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOrderbookRequest { inner : venues :: GetOrderbookRequest , } # [pymethods] impl GetOrderbookRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn depth_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . depth_type . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Orderbook { inner : venues :: Orderbook , } # [pymethods] impl Orderbook { # [staticmethod] fn from_inner (inner : Orderbook) -> Self { Self { inner } } # [getter] fn asks (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . asks . clone () . into ()) } # [getter] fn bids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . bids . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } } # [pymethods] impl RestClient { fn get_orderbook <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_orderbook () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetTransferRecordRequest { inner : venues :: GetTransferRecordRequest , } # [pymethods] impl GetTransferRecordRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn coin (& self) -> PyResult < String > { Ok (self . inner . coin . clone () . into ()) } # [getter] fn from_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . from_type . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn client_oid (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_oid . clone () . into ()) } # [getter] fn page_num (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . page_num . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn id_less_than (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . id_less_than . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetTransferRecordResponse { inner : venues :: GetTransferRecordResponse , } # [pymethods] impl GetTransferRecordResponse { # [staticmethod] fn from_inner (inner : GetTransferRecordResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < u64 > { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_transfer_record <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_transfer_record () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetDepositAddressRequest { inner : venues :: GetDepositAddressRequest , } # [pymethods] impl GetDepositAddressRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn coin (& self) -> PyResult < String > { Ok (self . inner . coin . clone () . into ()) } # [getter] fn chain (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . chain . clone () . into ()) } # [getter] fn size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetDepositAddressResponse { inner : venues :: GetDepositAddressResponse , } # [pymethods] impl GetDepositAddressResponse { # [staticmethod] fn from_inner (inner : GetDepositAddressResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < u64 > { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct DepositAddressInfo { inner : venues :: DepositAddressInfo , } # [pymethods] impl DepositAddressInfo { # [staticmethod] fn from_inner (inner : DepositAddressInfo) -> Self { Self { inner } } # [getter] fn address (& self) -> PyResult < String > { Ok (self . inner . address . clone () . into ()) } # [getter] fn chain (& self) -> PyResult < String > { Ok (self . inner . chain . clone () . into ()) } # [getter] fn coin (& self) -> PyResult < String > { Ok (self . inner . coin . clone () . into ()) } # [getter] fn tag (& self) -> PyResult < String > { Ok (self . inner . tag . clone () . into ()) } # [getter] fn url (& self) -> PyResult < String > { Ok (self . inner . url . clone () . into ()) } } # [pymethods] impl RestClient { fn get_deposit_address <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_deposit_address () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetSubaccountDepositRecordsRequest { inner : venues :: GetSubaccountDepositRecordsRequest , } # [pymethods] impl GetSubaccountDepositRecordsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn sub_uid (& self) -> PyResult < String > { Ok (self . inner . sub_uid . clone () . into ()) } # [getter] fn coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . coin . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn id_less_than (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . id_less_than . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetSubaccountDepositRecordsResponse { inner : venues :: GetSubaccountDepositRecordsResponse , } # [pymethods] impl GetSubaccountDepositRecordsResponse { # [staticmethod] fn from_inner (inner : GetSubaccountDepositRecordsResponse) -> Self { Self { inner } } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_subaccount_deposit_records <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_subaccount_deposit_records () . await }) } } # [pyclass] # [derive (Clone)] pub struct CurrentPlanOrderRequest { inner : venues :: CurrentPlanOrderRequest , } # [pymethods] impl CurrentPlanOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn plan_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . plan_type . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn id_less_than (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . id_less_than . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum PlanOrderStatus { NotTrigger , Triggered , Cancelled , FailTrigger , } # [pyclass] # [derive (Clone)] pub struct PlanOrderInfo { inner : venues :: PlanOrderInfo , } # [pymethods] impl PlanOrderInfo { # [staticmethod] fn from_inner (inner : PlanOrderInfo) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn plan_type (& self) -> PyResult < PyObject > { Ok (self . inner . plan_type . clone () . into ()) } # [getter] fn trigger_type (& self) -> PyResult < PyObject > { Ok (self . inner . trigger_type . clone () . into ()) } # [getter] fn trigger_price (& self) -> PyResult < String > { Ok (self . inner . trigger_price . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn callback_ratio (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . callback_ratio . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < i64 > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < i64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn execute_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . execute_order_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CurrentPlanOrderResponse { inner : venues :: CurrentPlanOrderResponse , } # [pymethods] impl CurrentPlanOrderResponse { # [staticmethod] fn from_inner (inner : CurrentPlanOrderResponse) -> Self { Self { inner } } # [getter] fn order_list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_list . clone () . into ()) } # [getter] fn max_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_id . clone () . into ()) } # [getter] fn min_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . min_id . clone () . into ()) } } # [pymethods] impl RestClient { fn current_plan_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . current_plan_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct BatchOrderItem { inner : venues :: BatchOrderItem , } # [pymethods] impl BatchOrderItem { # [staticmethod] fn from_inner (inner : BatchOrderItem) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn force (& self) -> PyResult < PyObject > { Ok (self . inner . force . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn stp_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stp_mode . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchOrdersRequest { inner : venues :: BatchOrdersRequest , } # [pymethods] impl BatchOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn order_list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_list . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn receive_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . receive_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchOrderResult { inner : venues :: BatchOrderResult , } # [pymethods] impl BatchOrderResult { # [staticmethod] fn from_inner (inner : BatchOrderResult) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn success (& self) -> PyResult < bool > { Ok (self . inner . success . clone () . into ()) } # [getter] fn error_code (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . error_code . clone () . into ()) } # [getter] fn error_msg (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . error_msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchOrdersResponse { inner : venues :: BatchOrdersResponse , } # [pymethods] impl BatchOrdersResponse { # [staticmethod] fn from_inner (inner : BatchOrdersResponse) -> Self { Self { inner } } # [getter] fn order_info (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_info . clone () . into ()) } # [getter] fn failure (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . failure . clone () . into ()) } # [getter] fn success (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . success . clone () . into ()) } } # [pymethods] impl RestClient { fn batch_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . batch_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelWithdrawalRequest { inner : venues :: CancelWithdrawalRequest , } # [pymethods] impl CancelWithdrawalRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelWithdrawalResponse { inner : venues :: CancelWithdrawalResponse , } # [pymethods] impl CancelWithdrawalResponse { # [staticmethod] fn from_inner (inner : CancelWithdrawalResponse) -> Self { Self { inner } } # [getter] fn data (& self) -> PyResult < String > { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_withdrawal <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_withdrawal () . await }) } } # [pyclass] # [derive (Clone)] pub struct SubTransferRequest { inner : venues :: SubTransferRequest , } # [pymethods] impl SubTransferRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn from_type (& self) -> PyResult < PyObject > { Ok (self . inner . from_type . clone () . into ()) } # [getter] fn to_type (& self) -> PyResult < PyObject > { Ok (self . inner . to_type . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn coin (& self) -> PyResult < String > { Ok (self . inner . coin . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn client_oid (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_oid . clone () . into ()) } # [getter] fn from_user_id (& self) -> PyResult < String > { Ok (self . inner . from_user_id . clone () . into ()) } # [getter] fn to_user_id (& self) -> PyResult < String > { Ok (self . inner . to_user_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SubTransferResponse { inner : venues :: SubTransferResponse , } # [pymethods] impl SubTransferResponse { # [staticmethod] fn from_inner (inner : SubTransferResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < u64 > { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SubTransferResult { inner : venues :: SubTransferResult , } # [pymethods] impl SubTransferResult { # [staticmethod] fn from_inner (inner : SubTransferResult) -> Self { Self { inner } } # [getter] fn transfer_id (& self) -> PyResult < String > { Ok (self . inner . transfer_id . clone () . into ()) } # [getter] fn client_oid (& self) -> PyResult < String > { Ok (self . inner . client_oid . clone () . into ()) } } # [pymethods] impl RestClient { fn sub_transfer <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . sub_transfer () . await }) } } # [pyclass] # [derive (Clone)] pub struct AccountInfoRequest { inner : venues :: AccountInfoRequest , } # [pymethods] impl AccountInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn request_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn receive_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . receive_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct VipInfo { inner : venues :: VipInfo , } # [pymethods] impl VipInfo { # [staticmethod] fn from_inner (inner : VipInfo) -> Self { Self { inner } } # [getter] fn level (& self) -> PyResult < String > { Ok (self . inner . level . clone () . into ()) } # [getter] fn next_level (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . next_level . clone () . into ()) } # [getter] fn next_level_volume (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . next_level_volume . clone () . into ()) } # [getter] fn current_volume (& self) -> PyResult < String > { Ok (self . inner . current_volume . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountInfo { inner : venues :: AccountInfo , } # [pymethods] impl AccountInfo { # [staticmethod] fn from_inner (inner : AccountInfo) -> Self { Self { inner } } # [getter] fn user_id (& self) -> PyResult < String > { Ok (self . inner . user_id . clone () . into ()) } # [getter] fn spot_account_id (& self) -> PyResult < String > { Ok (self . inner . spot_account_id . clone () . into ()) } # [getter] fn status (& self) -> PyResult < String > { Ok (self . inner . status . clone () . into ()) } # [getter] fn can_trade (& self) -> PyResult < bool > { Ok (self . inner . can_trade . clone () . into ()) } # [getter] fn can_withdraw (& self) -> PyResult < bool > { Ok (self . inner . can_withdraw . clone () . into ()) } # [getter] fn can_deposit (& self) -> PyResult < bool > { Ok (self . inner . can_deposit . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < i64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn vip_info (& self) -> PyResult < PyObject > { Ok (self . inner . vip_info . clone () . into ()) } # [getter] fn kyc_flag (& self) -> PyResult < bool > { Ok (self . inner . kyc_flag . clone () . into ()) } # [getter] fn kyc_level (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . kyc_level . clone () . into ()) } # [getter] fn parent_user_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . parent_user_id . clone () . into ()) } # [getter] fn account_type (& self) -> PyResult < String > { Ok (self . inner . account_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountInfoResponse { inner : venues :: AccountInfoResponse , } # [pymethods] impl AccountInfoResponse { # [staticmethod] fn from_inner (inner : AccountInfoResponse) -> Self { Self { inner } } # [getter] fn account_info (& self) -> PyResult < PyObject > { Ok (self . inner . account_info . clone () . into ()) } } # [pymethods] impl RestClient { fn account_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . account_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOrderHistoryRequest { inner : venues :: GetOrderHistoryRequest , } # [pymethods] impl GetOrderHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn id_less_than (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . id_less_than . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn tpsl_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tpsl_type . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn receive_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . receive_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderHistoryInfo { inner : venues :: OrderHistoryInfo , } # [pymethods] impl OrderHistoryInfo { # [staticmethod] fn from_inner (inner : OrderHistoryInfo) -> Self { Self { inner } } # [getter] fn user_id (& self) -> PyResult < String > { Ok (self . inner . user_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn price_avg (& self) -> PyResult < String > { Ok (self . inner . price_avg . clone () . into ()) } # [getter] fn base_volume (& self) -> PyResult < String > { Ok (self . inner . base_volume . clone () . into ()) } # [getter] fn quote_volume (& self) -> PyResult < String > { Ok (self . inner . quote_volume . clone () . into ()) } # [getter] fn entry_point_source (& self) -> PyResult < PyObject > { Ok (self . inner . entry_point_source . clone () . into ()) } # [getter] fn order_source (& self) -> PyResult < PyObject > { Ok (self . inner . order_source . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < String > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < String > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn fee_detail (& self) -> PyResult < String > { Ok (self . inner . fee_detail . clone () . into ()) } # [getter] fn tpsl_type (& self) -> PyResult < String > { Ok (self . inner . tpsl_type . clone () . into ()) } # [getter] fn cancel_reason (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cancel_reason . clone () . into ()) } # [getter] fn trigger_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trigger_price . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetOrderHistoryResponse { inner : venues :: GetOrderHistoryResponse , } # [pymethods] impl GetOrderHistoryResponse { # [staticmethod] fn from_inner (inner : GetOrderHistoryResponse) -> Self { Self { inner } } # [getter] fn orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . orders . clone () . into ()) } } # [pymethods] impl RestClient { fn get_order_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_order_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct ModifyPlanOrderRequest { inner : venues :: ModifyPlanOrderRequest , } # [pymethods] impl ModifyPlanOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn side (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . force . clone () . into ()) } # [getter] fn plan_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . plan_type . clone () . into ()) } # [getter] fn trigger_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trigger_type . clone () . into ()) } # [getter] fn trigger_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trigger_price . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . size . clone () . into ()) } # [getter] fn callback_ratio (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . callback_ratio . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn receive_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . receive_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ModifyPlanOrderResponse { inner : venues :: ModifyPlanOrderResponse , } # [pymethods] impl ModifyPlanOrderResponse { # [staticmethod] fn from_inner (inner : ModifyPlanOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn modify_plan_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . modify_plan_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct WithdrawRequest { inner : venues :: WithdrawRequest , } # [pymethods] impl WithdrawRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn coin (& self) -> PyResult < String > { Ok (self . inner . coin . clone () . into ()) } # [getter] fn transfer_type (& self) -> PyResult < PyObject > { Ok (self . inner . transfer_type . clone () . into ()) } # [getter] fn address (& self) -> PyResult < String > { Ok (self . inner . address . clone () . into ()) } # [getter] fn chain (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . chain . clone () . into ()) } # [getter] fn inner_to_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inner_to_type . clone () . into ()) } # [getter] fn area_code (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . area_code . clone () . into ()) } # [getter] fn tag (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tag . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn remark (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . remark . clone () . into ()) } # [getter] fn client_oid (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_oid . clone () . into ()) } # [getter] fn member_code (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . member_code . clone () . into ()) } # [getter] fn identity_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . identity_type . clone () . into ()) } # [getter] fn company_name (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . company_name . clone () . into ()) } # [getter] fn first_name (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . first_name . clone () . into ()) } # [getter] fn last_name (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . last_name . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct WithdrawResponse { inner : venues :: WithdrawResponse , } # [pymethods] impl WithdrawResponse { # [staticmethod] fn from_inner (inner : WithdrawResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < u64 > { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct WithdrawResult { inner : venues :: WithdrawResult , } # [pymethods] impl WithdrawResult { # [staticmethod] fn from_inner (inner : WithdrawResult) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_oid (& self) -> PyResult < String > { Ok (self . inner . client_oid . clone () . into ()) } } # [pymethods] impl RestClient { fn withdraw <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . withdraw () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelSymbolOrderRequest { inner : venues :: CancelSymbolOrderRequest , } # [pymethods] impl CancelSymbolOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn receive_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . receive_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelSymbolOrderResult { inner : venues :: CancelSymbolOrderResult , } # [pymethods] impl CancelSymbolOrderResult { # [staticmethod] fn from_inner (inner : CancelSymbolOrderResult) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn success (& self) -> PyResult < bool > { Ok (self . inner . success . clone () . into ()) } # [getter] fn error_code (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . error_code . clone () . into ()) } # [getter] fn error_msg (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . error_msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelSymbolOrderResponse { inner : venues :: CancelSymbolOrderResponse , } # [pymethods] impl CancelSymbolOrderResponse { # [staticmethod] fn from_inner (inner : CancelSymbolOrderResponse) -> Self { Self { inner } } # [getter] fn order_info (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_info . clone () . into ()) } # [getter] fn failure (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . failure . clone () . into ()) } # [getter] fn success (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . success . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_symbol_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_symbol_order () . await }) } } # [pyclass] # [derive (Clone)] pub enum PlanType { NormalPlan , TrackPlan , } # [pyclass] # [derive (Clone)] pub enum TriggerType { FillPrice , MarkPrice , } # [pyclass] # [derive (Clone)] pub struct PlacePlanOrderRequest { inner : venues :: PlacePlanOrderRequest , } # [pymethods] impl PlacePlanOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn force (& self) -> PyResult < PyObject > { Ok (self . inner . force . clone () . into ()) } # [getter] fn plan_type (& self) -> PyResult < PyObject > { Ok (self . inner . plan_type . clone () . into ()) } # [getter] fn trigger_type (& self) -> PyResult < PyObject > { Ok (self . inner . trigger_type . clone () . into ()) } # [getter] fn trigger_price (& self) -> PyResult < String > { Ok (self . inner . trigger_price . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn stp_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stp_mode . clone () . into ()) } # [getter] fn callback_ratio (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . callback_ratio . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn receive_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . receive_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PlacePlanOrderResponse { inner : venues :: PlacePlanOrderResponse , } # [pymethods] impl PlacePlanOrderResponse { # [staticmethod] fn from_inner (inner : PlacePlanOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn place_plan_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . place_plan_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelPlanOrderRequest { inner : venues :: CancelPlanOrderRequest , } # [pymethods] impl CancelPlanOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn receive_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . receive_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelPlanOrderResponse { inner : venues :: CancelPlanOrderResponse , } # [pymethods] impl CancelPlanOrderResponse { # [staticmethod] fn from_inner (inner : CancelPlanOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_plan_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_plan_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetSubaccountDepositAddressRequest { inner : venues :: GetSubaccountDepositAddressRequest , } # [pymethods] impl GetSubaccountDepositAddressRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn sub_uid (& self) -> PyResult < String > { Ok (self . inner . sub_uid . clone () . into ()) } # [getter] fn coin (& self) -> PyResult < String > { Ok (self . inner . coin . clone () . into ()) } # [getter] fn chain (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . chain . clone () . into ()) } # [getter] fn size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetSubaccountDepositAddressResponse { inner : venues :: GetSubaccountDepositAddressResponse , } # [pymethods] impl GetSubaccountDepositAddressResponse { # [staticmethod] fn from_inner (inner : GetSubaccountDepositAddressResponse) -> Self { Self { inner } } # [getter] fn address (& self) -> PyResult < String > { Ok (self . inner . address . clone () . into ()) } # [getter] fn chain (& self) -> PyResult < String > { Ok (self . inner . chain . clone () . into ()) } # [getter] fn coin (& self) -> PyResult < String > { Ok (self . inner . coin . clone () . into ()) } # [getter] fn tag (& self) -> PyResult < String > { Ok (self . inner . tag . clone () . into ()) } # [getter] fn url (& self) -> PyResult < String > { Ok (self . inner . url . clone () . into ()) } } # [pymethods] impl RestClient { fn get_subaccount_deposit_address <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_subaccount_deposit_address () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetDepositRecordsRequest { inner : venues :: GetDepositRecordsRequest , } # [pymethods] impl GetDepositRecordsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . coin . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < String > { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < String > { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn id_less_than (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . id_less_than . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetDepositRecordsResponse { inner : venues :: GetDepositRecordsResponse , } # [pymethods] impl GetDepositRecordsResponse { # [staticmethod] fn from_inner (inner : GetDepositRecordsResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < u64 > { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_deposit_records <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_deposit_records () . await }) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelPlanOrderItem { inner : venues :: BatchCancelPlanOrderItem , } # [pymethods] impl BatchCancelPlanOrderItem { # [staticmethod] fn from_inner (inner : BatchCancelPlanOrderItem) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelPlanOrdersRequest { inner : venues :: BatchCancelPlanOrdersRequest , } # [pymethods] impl BatchCancelPlanOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn order_list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_list . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn receive_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . receive_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelPlanOrderResult { inner : venues :: BatchCancelPlanOrderResult , } # [pymethods] impl BatchCancelPlanOrderResult { # [staticmethod] fn from_inner (inner : BatchCancelPlanOrderResult) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn success (& self) -> PyResult < bool > { Ok (self . inner . success . clone () . into ()) } # [getter] fn error_code (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . error_code . clone () . into ()) } # [getter] fn error_msg (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . error_msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelPlanOrdersResponse { inner : venues :: BatchCancelPlanOrdersResponse , } # [pymethods] impl BatchCancelPlanOrdersResponse { # [staticmethod] fn from_inner (inner : BatchCancelPlanOrdersResponse) -> Self { Self { inner } } # [getter] fn order_info (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_info . clone () . into ()) } # [getter] fn failure (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . failure . clone () . into ()) } # [getter] fn success (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . success . clone () . into ()) } } # [pymethods] impl RestClient { fn batch_cancel_plan_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . batch_cancel_plan_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderRequest { inner : venues :: CancelOrderRequest , } # [pymethods] impl CancelOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderResponse { inner : venues :: CancelOrderResponse , } # [pymethods] impl CancelOrderResponse { # [staticmethod] fn from_inner (inner : CancelOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelReplaceOrderRequest { inner : venues :: CancelReplaceOrderRequest , } # [pymethods] impl CancelReplaceOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn force (& self) -> PyResult < PyObject > { Ok (self . inner . force . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn new_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_client_order_id . clone () . into ()) } # [getter] fn stp_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stp_mode . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn receive_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . receive_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelReplaceOrderResponse { inner : venues :: CancelReplaceOrderResponse , } # [pymethods] impl CancelReplaceOrderResponse { # [staticmethod] fn from_inner (inner : CancelReplaceOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn cancel_order_id (& self) -> PyResult < String > { Ok (self . inner . cancel_order_id . clone () . into ()) } # [getter] fn cancel_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cancel_client_order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_replace_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_replace_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelReplaceOrderItem { inner : venues :: BatchCancelReplaceOrderItem , } # [pymethods] impl BatchCancelReplaceOrderItem { # [staticmethod] fn from_inner (inner : BatchCancelReplaceOrderItem) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn force (& self) -> PyResult < PyObject > { Ok (self . inner . force . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn new_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_client_order_id . clone () . into ()) } # [getter] fn stp_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stp_mode . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelReplaceOrdersRequest { inner : venues :: BatchCancelReplaceOrdersRequest , } # [pymethods] impl BatchCancelReplaceOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn order_list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_list . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn receive_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . receive_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelReplaceOrderResult { inner : venues :: BatchCancelReplaceOrderResult , } # [pymethods] impl BatchCancelReplaceOrderResult { # [staticmethod] fn from_inner (inner : BatchCancelReplaceOrderResult) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn cancel_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cancel_order_id . clone () . into ()) } # [getter] fn cancel_client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cancel_client_order_id . clone () . into ()) } # [getter] fn success (& self) -> PyResult < bool > { Ok (self . inner . success . clone () . into ()) } # [getter] fn error_code (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . error_code . clone () . into ()) } # [getter] fn error_msg (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . error_msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelReplaceOrdersResponse { inner : venues :: BatchCancelReplaceOrdersResponse , } # [pymethods] impl BatchCancelReplaceOrdersResponse { # [staticmethod] fn from_inner (inner : BatchCancelReplaceOrdersResponse) -> Self { Self { inner } } # [getter] fn order_info (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_info . clone () . into ()) } # [getter] fn failure (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . failure . clone () . into ()) } # [getter] fn success (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . success . clone () . into ()) } } # [pymethods] impl RestClient { fn batch_cancel_replace_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . batch_cancel_replace_orders () . await }) } } # [pyclass] # [derive (Clone)] pub enum TradeScope { Taker , Maker , } # [pyclass] # [derive (Clone)] pub struct GetFillsRequest { inner : venues :: GetFillsRequest , } # [pymethods] impl GetFillsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn id_less_than (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . id_less_than . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct FillInfo { inner : venues :: FillInfo , } # [pymethods] impl FillInfo { # [staticmethod] fn from_inner (inner : FillInfo) -> Self { Self { inner } } # [getter] fn user_id (& self) -> PyResult < String > { Ok (self . inner . user_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn trade_id (& self) -> PyResult < String > { Ok (self . inner . trade_id . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn price_avg (& self) -> PyResult < String > { Ok (self . inner . price_avg . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn fee_detail (& self) -> PyResult < PyObject > { Ok (self . inner . fee_detail . clone () . into ()) } # [getter] fn trade_scope (& self) -> PyResult < PyObject > { Ok (self . inner . trade_scope . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < String > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < String > { Ok (self . inner . update_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetFillsResponse { inner : venues :: GetFillsResponse , } # [pymethods] impl GetFillsResponse { # [staticmethod] fn from_inner (inner : GetFillsResponse) -> Self { Self { inner } } # [getter] fn fills (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . fills . clone () . into ()) } } # [pymethods] impl RestClient { fn get_fills <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_fills () . await }) } } # [pyclass] # [derive (Clone)] pub enum Force { GTC , PostOnly , FOK , IOC , } # [pyclass] # [derive (Clone)] pub enum STPMode { None , CancelTaker , CancelMaker , CancelBoth , } # [pyclass] # [derive (Clone)] pub struct PlaceOrderRequest { inner : venues :: PlaceOrderRequest , } # [pymethods] impl PlaceOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn force (& self) -> PyResult < PyObject > { Ok (self . inner . force . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn stp_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stp_mode . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn receive_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . receive_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PlaceOrderResponse { inner : venues :: PlaceOrderResponse , } # [pymethods] impl PlaceOrderResponse { # [staticmethod] fn from_inner (inner : PlaceOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn place_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . place_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetBgbDeductInfoRequest { inner : venues :: GetBgbDeductInfoRequest , } # [pymethods] impl GetBgbDeductInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pyclass] # [derive (Clone)] pub struct GetBgbDeductInfoResponse { inner : venues :: GetBgbDeductInfoResponse , } # [pymethods] impl GetBgbDeductInfoResponse { # [staticmethod] fn from_inner (inner : GetBgbDeductInfoResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < u64 > { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BgbDeductInfo { inner : venues :: BgbDeductInfo , } # [pymethods] impl BgbDeductInfo { # [staticmethod] fn from_inner (inner : BgbDeductInfo) -> Self { Self { inner } } # [getter] fn deduct (& self) -> PyResult < String > { Ok (self . inner . deduct . clone () . into ()) } } # [pymethods] impl RestClient { fn get_bgb_deduct_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_bgb_deduct_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetSubaccountAssetsRequest { inner : venues :: GetSubaccountAssetsRequest , } # [pymethods] impl GetSubaccountAssetsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn id_less_than (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . id_less_than . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetSubaccountAssetsResponse { inner : venues :: GetSubaccountAssetsResponse , } # [pymethods] impl GetSubaccountAssetsResponse { # [staticmethod] fn from_inner (inner : GetSubaccountAssetsResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn message (& self) -> PyResult < String > { Ok (self . inner . message . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < u64 > { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_subaccount_assets <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_subaccount_assets () . await }) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelOrderItem { inner : venues :: BatchCancelOrderItem , } # [pymethods] impl BatchCancelOrderItem { # [staticmethod] fn from_inner (inner : BatchCancelOrderItem) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelOrdersRequest { inner : venues :: BatchCancelOrdersRequest , } # [pymethods] impl BatchCancelOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn order_list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_list . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn receive_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . receive_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelOrderResult { inner : venues :: BatchCancelOrderResult , } # [pymethods] impl BatchCancelOrderResult { # [staticmethod] fn from_inner (inner : BatchCancelOrderResult) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn success (& self) -> PyResult < bool > { Ok (self . inner . success . clone () . into ()) } # [getter] fn error_code (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . error_code . clone () . into ()) } # [getter] fn error_msg (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . error_msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelOrdersResponse { inner : venues :: BatchCancelOrdersResponse , } # [pymethods] impl BatchCancelOrdersResponse { # [staticmethod] fn from_inner (inner : BatchCancelOrdersResponse) -> Self { Self { inner } } # [getter] fn order_info (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_info . clone () . into ()) } # [getter] fn failure (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . failure . clone () . into ()) } # [getter] fn success (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . success . clone () . into ()) } } # [pymethods] impl RestClient { fn batch_cancel_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . batch_cancel_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetTransferableCoinListRequest { inner : venues :: GetTransferableCoinListRequest , } # [pymethods] impl GetTransferableCoinListRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn from_type (& self) -> PyResult < PyObject > { Ok (self . inner . from_type . clone () . into ()) } # [getter] fn to_type (& self) -> PyResult < PyObject > { Ok (self . inner . to_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetTransferableCoinListResponse { inner : venues :: GetTransferableCoinListResponse , } # [pymethods] impl GetTransferableCoinListResponse { # [staticmethod] fn from_inner (inner : GetTransferableCoinListResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < u64 > { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_transferable_coin_list <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_transferable_coin_list () . await }) } } # [pyclass] # [derive (Clone)] pub struct PlanSubOrderRequest { inner : venues :: PlanSubOrderRequest , } # [pymethods] impl PlanSubOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PlanSubOrderInfo { inner : venues :: PlanSubOrderInfo , } # [pymethods] impl PlanSubOrderInfo { # [staticmethod] fn from_inner (inner : PlanSubOrderInfo) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn plan_type (& self) -> PyResult < PyObject > { Ok (self . inner . plan_type . clone () . into ()) } # [getter] fn trigger_type (& self) -> PyResult < PyObject > { Ok (self . inner . trigger_type . clone () . into ()) } # [getter] fn trigger_price (& self) -> PyResult < String > { Ok (self . inner . trigger_price . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn callback_ratio (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . callback_ratio . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < i64 > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < i64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn execute_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . execute_order_id . clone () . into ()) } # [getter] fn trigger_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trigger_time . clone () . into ()) } # [getter] fn fail_reason (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . fail_reason . clone () . into ()) } # [getter] fn force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . force . clone () . into ()) } # [getter] fn stp_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stp_mode . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PlanSubOrderResponse { inner : venues :: PlanSubOrderResponse , } # [pymethods] impl PlanSubOrderResponse { # [staticmethod] fn from_inner (inner : PlanSubOrderResponse) -> Self { Self { inner } } # [getter] fn order_info (& self) -> PyResult < PyObject > { Ok (self . inner . order_info . clone () . into ()) } } # [pymethods] impl RestClient { fn plan_sub_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . plan_sub_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMainSubTransferRecordRequest { inner : venues :: GetMainSubTransferRecordRequest , } # [pymethods] impl GetMainSubTransferRecordRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . coin . clone () . into ()) } # [getter] fn role (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . role . clone () . into ()) } # [getter] fn sub_uid (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sub_uid . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn client_oid (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_oid . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn id_less_than (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . id_less_than . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetMainSubTransferRecordResponse { inner : venues :: GetMainSubTransferRecordResponse , } # [pymethods] impl GetMainSubTransferRecordResponse { # [staticmethod] fn from_inner (inner : GetMainSubTransferRecordResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < u64 > { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_main_sub_transfer_record <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_main_sub_transfer_record () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetWithdrawalRecordsRequest { inner : venues :: GetWithdrawalRecordsRequest , } # [pymethods] impl GetWithdrawalRecordsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . coin . clone () . into ()) } # [getter] fn client_oid (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_oid . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < String > { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < String > { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn id_less_than (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . id_less_than . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetWithdrawalRecordsResponse { inner : venues :: GetWithdrawalRecordsResponse , } # [pymethods] impl GetWithdrawalRecordsResponse { # [staticmethod] fn from_inner (inner : GetWithdrawalRecordsResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < u64 > { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_withdrawal_records <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_withdrawal_records () . await }) } } # [pyclass] # [derive (Clone)] pub struct SwitchBgbDeductRequest { inner : venues :: SwitchBgbDeductRequest , } # [pymethods] impl SwitchBgbDeductRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn deduct (& self) -> PyResult < PyObject > { Ok (self . inner . deduct . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SwitchBgbDeductResponse { inner : venues :: SwitchBgbDeductResponse , } # [pymethods] impl SwitchBgbDeductResponse { # [staticmethod] fn from_inner (inner : SwitchBgbDeductResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < u64 > { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn data (& self) -> PyResult < bool > { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn switch_bgb_deduct <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . switch_bgb_deduct () . await }) } } # [pyclass] # [derive (Clone)] pub enum BusinessType { Deposit , Withdraw , SpotTrade , Transfer , Rebate , Bonus , FeeDeduction , Other , } # [pyclass] # [derive (Clone)] pub struct BillsRequest { inner : venues :: BillsRequest , } # [pymethods] impl BillsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . coin . clone () . into ()) } # [getter] fn business_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . business_type . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BillInfo { inner : venues :: BillInfo , } # [pymethods] impl BillInfo { # [staticmethod] fn from_inner (inner : BillInfo) -> Self { Self { inner } } # [getter] fn bill_id (& self) -> PyResult < String > { Ok (self . inner . bill_id . clone () . into ()) } # [getter] fn coin (& self) -> PyResult < String > { Ok (self . inner . coin . clone () . into ()) } # [getter] fn business_type (& self) -> PyResult < PyObject > { Ok (self . inner . business_type . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn balance (& self) -> PyResult < String > { Ok (self . inner . balance . clone () . into ()) } # [getter] fn fees (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . fees . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < i64 > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn remark (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . remark . clone () . into ()) } # [getter] fn transfer_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . transfer_id . clone () . into ()) } # [getter] fn account_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . account_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BillsResponse { inner : venues :: BillsResponse , } # [pymethods] impl BillsResponse { # [staticmethod] fn from_inner (inner : BillsResponse) -> Self { Self { inner } } # [getter] fn bill_list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . bill_list . clone () . into ()) } # [getter] fn max_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_id . clone () . into ()) } # [getter] fn min_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . min_id . clone () . into ()) } } # [pymethods] impl RestClient { fn bills <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . bills () . await }) } } # [pyclass] # [derive (Clone)] pub enum TPSLType { Normal , TPSL , } # [pyclass] # [derive (Clone)] pub struct GetCurrentOrdersRequest { inner : venues :: GetCurrentOrdersRequest , } # [pymethods] impl GetCurrentOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn id_less_than (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . id_less_than . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn tpsl_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tpsl_type . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn receive_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . receive_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderInfo { inner : venues :: OrderInfo , } # [pymethods] impl OrderInfo { # [staticmethod] fn from_inner (inner : OrderInfo) -> Self { Self { inner } } # [getter] fn user_id (& self) -> PyResult < String > { Ok (self . inner . user_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price_avg (& self) -> PyResult < String > { Ok (self . inner . price_avg . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn base_price (& self) -> PyResult < String > { Ok (self . inner . base_price . clone () . into ()) } # [getter] fn base_volume (& self) -> PyResult < String > { Ok (self . inner . base_volume . clone () . into ()) } # [getter] fn quote_volume (& self) -> PyResult < String > { Ok (self . inner . quote_volume . clone () . into ()) } # [getter] fn entry_point_source (& self) -> PyResult < PyObject > { Ok (self . inner . entry_point_source . clone () . into ()) } # [getter] fn order_source (& self) -> PyResult < PyObject > { Ok (self . inner . order_source . clone () . into ()) } # [getter] fn preset_take_profit_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . preset_take_profit_price . clone () . into ()) } # [getter] fn execute_take_profit_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . execute_take_profit_price . clone () . into ()) } # [getter] fn preset_stop_loss_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . preset_stop_loss_price . clone () . into ()) } # [getter] fn execute_stop_loss_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . execute_stop_loss_price . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < String > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < String > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn tpsl_type (& self) -> PyResult < String > { Ok (self . inner . tpsl_type . clone () . into ()) } # [getter] fn trigger_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trigger_price . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetCurrentOrdersResponse { inner : venues :: GetCurrentOrdersResponse , } # [pymethods] impl GetCurrentOrdersResponse { # [staticmethod] fn from_inner (inner : GetCurrentOrdersResponse) -> Self { Self { inner } } # [getter] fn orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . orders . clone () . into ()) } } # [pymethods] impl RestClient { fn get_current_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_current_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct ModifyDepositAccountRequest { inner : venues :: ModifyDepositAccountRequest , } # [pymethods] impl ModifyDepositAccountRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn coin (& self) -> PyResult < String > { Ok (self . inner . coin . clone () . into ()) } # [getter] fn account_type (& self) -> PyResult < PyObject > { Ok (self . inner . account_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ModifyDepositAccountResponse { inner : venues :: ModifyDepositAccountResponse , } # [pymethods] impl ModifyDepositAccountResponse { # [staticmethod] fn from_inner (inner : ModifyDepositAccountResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < u64 > { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn data (& self) -> PyResult < String > { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn modify_deposit_account <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . modify_deposit_account () . await }) } } # [pyclass] # [derive (Clone)] pub enum AccountType { Spot , Margin , Futures , P2P , Savings , Main , Sub , } # [pyclass] # [derive (Clone)] pub struct TransferRequest { inner : venues :: TransferRequest , } # [pymethods] impl TransferRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn coin (& self) -> PyResult < String > { Ok (self . inner . coin . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn from_type (& self) -> PyResult < PyObject > { Ok (self . inner . from_type . clone () . into ()) } # [getter] fn to_type (& self) -> PyResult < PyObject > { Ok (self . inner . to_type . clone () . into ()) } # [getter] fn client_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_id . clone () . into ()) } # [getter] fn sub_account_uid (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sub_account_uid . clone () . into ()) } # [getter] fn request_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . request_time . clone () . into ()) } # [getter] fn receive_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . receive_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum TransferStatus { Success , Pending , Failed , } # [pyclass] # [derive (Clone)] pub struct TransferResponse { inner : venues :: TransferResponse , } # [pymethods] impl TransferResponse { # [staticmethod] fn from_inner (inner : TransferResponse) -> Self { Self { inner } } # [getter] fn transfer_id (& self) -> PyResult < String > { Ok (self . inner . transfer_id . clone () . into ()) } # [getter] fn client_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_id . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn transfer_time (& self) -> PyResult < i64 > { Ok (self . inner . transfer_time . clone () . into ()) } } # [pymethods] impl RestClient { fn transfer <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . transfer () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAccountAssetsRequest { inner : venues :: GetAccountAssetsRequest , } # [pymethods] impl GetAccountAssetsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . coin . clone () . into ()) } # [getter] fn asset_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . asset_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AssetInfo { inner : venues :: AssetInfo , } # [pymethods] impl AssetInfo { # [staticmethod] fn from_inner (inner : AssetInfo) -> Self { Self { inner } } # [getter] fn coin (& self) -> PyResult < String > { Ok (self . inner . coin . clone () . into ()) } # [getter] fn available (& self) -> PyResult < String > { Ok (self . inner . available . clone () . into ()) } # [getter] fn frozen (& self) -> PyResult < String > { Ok (self . inner . frozen . clone () . into ()) } # [getter] fn locked (& self) -> PyResult < String > { Ok (self . inner . locked . clone () . into ()) } # [getter] fn limit_available (& self) -> PyResult < String > { Ok (self . inner . limit_available . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < String > { Ok (self . inner . update_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetAccountAssetsResponse { inner : venues :: GetAccountAssetsResponse , } # [pymethods] impl GetAccountAssetsResponse { # [staticmethod] fn from_inner (inner : GetAccountAssetsResponse) -> Self { Self { inner } } # [getter] fn assets (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . assets . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_assets <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_assets () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOrderInfoRequest { inner : venues :: GetOrderInfoRequest , } # [pymethods] impl GetOrderInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum OrderStatus { Live , PartiallyFilled , Filled , Cancelled , } # [pyclass] # [derive (Clone)] pub enum OrderSource { Normal , Market , SpotTraderBuy , SpotFollowerBuy , SpotTraderSell , SpotFollowerSell , } # [pyclass] # [derive (Clone)] pub enum EntryPointSource { Web , App , Api , Sys , Android , iOS , } # [pyclass] # [derive (Clone)] pub enum CancelReason { NormalCancel , STPCancel , } # [pyclass] # [derive (Clone)] pub struct GetOrderInfoResponse { inner : venues :: GetOrderInfoResponse , } # [pymethods] impl GetOrderInfoResponse { # [staticmethod] fn from_inner (inner : GetOrderInfoResponse) -> Self { Self { inner } } # [getter] fn user_id (& self) -> PyResult < String > { Ok (self . inner . user_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn price_avg (& self) -> PyResult < String > { Ok (self . inner . price_avg . clone () . into ()) } # [getter] fn base_volume (& self) -> PyResult < String > { Ok (self . inner . base_volume . clone () . into ()) } # [getter] fn quote_volume (& self) -> PyResult < String > { Ok (self . inner . quote_volume . clone () . into ()) } # [getter] fn entry_point_source (& self) -> PyResult < PyObject > { Ok (self . inner . entry_point_source . clone () . into ()) } # [getter] fn fee_detail (& self) -> PyResult < String > { Ok (self . inner . fee_detail . clone () . into ()) } # [getter] fn order_source (& self) -> PyResult < PyObject > { Ok (self . inner . order_source . clone () . into ()) } # [getter] fn cancel_reason (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cancel_reason . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < String > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < String > { Ok (self . inner . update_time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_order_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_order_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct HistoryPlanOrderRequest { inner : venues :: HistoryPlanOrderRequest , } # [pymethods] impl HistoryPlanOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn plan_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . plan_type . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn id_less_than (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . id_less_than . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct HistoryPlanOrderInfo { inner : venues :: HistoryPlanOrderInfo , } # [pymethods] impl HistoryPlanOrderInfo { # [staticmethod] fn from_inner (inner : HistoryPlanOrderInfo) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn plan_type (& self) -> PyResult < PyObject > { Ok (self . inner . plan_type . clone () . into ()) } # [getter] fn trigger_type (& self) -> PyResult < PyObject > { Ok (self . inner . trigger_type . clone () . into ()) } # [getter] fn trigger_price (& self) -> PyResult < String > { Ok (self . inner . trigger_price . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn status (& self) -> PyResult < PyObject > { Ok (self . inner . status . clone () . into ()) } # [getter] fn callback_ratio (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . callback_ratio . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < i64 > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < i64 > { Ok (self . inner . update_time . clone () . into ()) } # [getter] fn execute_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . execute_order_id . clone () . into ()) } # [getter] fn trigger_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trigger_time . clone () . into ()) } # [getter] fn fail_reason (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . fail_reason . clone () . into ()) } # [getter] fn force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . force . clone () . into ()) } # [getter] fn stp_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stp_mode . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct HistoryPlanOrderResponse { inner : venues :: HistoryPlanOrderResponse , } # [pymethods] impl HistoryPlanOrderResponse { # [staticmethod] fn from_inner (inner : HistoryPlanOrderResponse) -> Self { Self { inner } } # [getter] fn order_list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_list . clone () . into ()) } # [getter] fn max_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_id . clone () . into ()) } # [getter] fn min_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . min_id . clone () . into ()) } } # [pymethods] impl RestClient { fn history_plan_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . history_plan_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct ErrorResponse { inner : venues :: ErrorResponse , } # [pymethods] impl ErrorResponse { # [staticmethod] fn from_inner (inner : ErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum RateLimitType { RequestFrequency , Orders , } # [pyclass] # [derive (Clone)] pub enum RateLimitInterval { Second , Minute , } # [pyclass] # [derive (Clone)] pub enum IntervalUnit { Second , Minute , } # [pyclass] # [derive (Clone)] pub struct RateLimitHeader { inner : venues :: RateLimitHeader , } # [pymethods] impl RateLimitHeader { # [staticmethod] fn from_inner (inner : RateLimitHeader) -> Self { Self { inner } } # [getter] fn kind (& self) -> PyResult < PyObject > { Ok (self . inner . kind . clone () . into ()) } # [getter] fn interval_value (& self) -> PyResult < u64 > { Ok (self . inner . interval_value . clone () . into ()) } # [getter] fn interval_unit (& self) -> PyResult < PyObject > { Ok (self . inner . interval_unit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum RateLimitHeaderKind { RequestFrequency , OrderCount , } # [pyclass] # [derive (Clone)] pub struct RateLimitUsage { inner : venues :: RateLimitUsage , } # [pymethods] impl RateLimitUsage { # [staticmethod] fn from_inner (inner : RateLimitUsage) -> Self { Self { inner } } # [getter] fn request_timestamps_1s (& self) -> PyResult < PyObject > { Ok (self . inner . request_timestamps_1s . clone () . into ()) } # [getter] fn request_timestamps_1m (& self) -> PyResult < PyObject > { Ok (self . inner . request_timestamps_1m . clone () . into ()) } # [getter] fn order_timestamps_1s (& self) -> PyResult < PyObject > { Ok (self . inner . order_timestamps_1s . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimiter { inner : venues :: RateLimiter , } # [pymethods] impl RateLimiter { # [staticmethod] fn from_inner (inner : RateLimiter) -> Self { Self { inner } } } # [doc = " Create the Python module for bitget"] pub fn create_module (py : Python) -> PyResult <& PyModule > { let m = PyModule :: new (py , "bitget") ?; Ok (m) }