# ! [doc = " Python bindings for bitmart venue"] # ! [doc = ""] # ! [doc = " This module is automatically generated from the Rust source code."] # ! [doc = " Do not edit this file directly."] use pyo3 :: prelude ::*; use pyo3_asyncio ; use venues ; # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn base_url (& self) -> PyResult < String > { Ok (self . inner . base_url . clone () . into ()) } } # [pymethods] impl RestClient { fn default (& self) -> PyResult < () > { self . inner . default () ; Ok (()) } fn get <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetContractDetailsRequest { inner : venues :: GetContractDetailsRequest , } # [pymethods] impl GetContractDetailsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetContractDetailsResponse { inner : venues :: GetContractDetailsResponse , } # [pymethods] impl GetContractDetailsResponse { # [staticmethod] fn from_inner (inner : GetContractDetailsResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn message (& self) -> PyResult < PyObject > { Ok (self . inner . message . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ContractDetailsData { inner : venues :: ContractDetailsData , } # [pymethods] impl ContractDetailsData { # [staticmethod] fn from_inner (inner : ContractDetailsData) -> Self { Self { inner } } # [getter] fn contracts (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . contracts . clone () . into ()) } } # [pymethods] impl RestClient { fn get_contract_details <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_contract_details () . await }) } } # [pyclass] # [derive (Clone)] pub enum ContractStatus { Normal , Delisted , Unknown , } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn api_key (& self) -> PyResult < PyObject > { Ok (self . inner . api_key . clone () . into ()) } # [getter] fn api_secret (& self) -> PyResult < PyObject > { Ok (self . inner . api_secret . clone () . into ()) } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn base_url (& self) -> PyResult < String > { Ok (self . inner . base_url . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetContractAssetsRequest { inner : venues :: GetContractAssetsRequest , } # [pymethods] impl GetContractAssetsRequest { # [staticmethod] fn from_inner (inner : GetContractAssetsRequest) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct GetContractAssetsResponse { inner : venues :: GetContractAssetsResponse , } # [pymethods] impl GetContractAssetsResponse { # [staticmethod] fn from_inner (inner : GetContractAssetsResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn message (& self) -> PyResult < PyObject > { Ok (self . inner . message . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . data . clone () . into ()) } # [getter] fn trace (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trace . clone () . into ()) } } # [pymethods] impl RestClient { fn get_contract_assets <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_contract_assets () . await }) } } # [pyclass] # [derive (Clone)] pub enum LimitTarget { Ip , ApiKey , Uid , } # [pyclass] # [derive (Clone)] pub struct EndpointRateLimit { inner : venues :: EndpointRateLimit , } # [pymethods] impl EndpointRateLimit { # [staticmethod] fn from_inner (inner : EndpointRateLimit) -> Self { Self { inner } } # [getter] fn path (& self) -> PyResult < PyObject > { Ok (self . inner . path . clone () . into ()) } # [getter] fn target (& self) -> PyResult < PyObject > { Ok (self . inner . target . clone () . into ()) } # [getter] fn quota (& self) -> PyResult < PyObject > { Ok (self . inner . quota . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BitmartRateLimiter { inner : venues :: BitmartRateLimiter , } # [pymethods] impl BitmartRateLimiter { # [staticmethod] fn from_inner (inner : BitmartRateLimiter) -> Self { Self { inner } } # [getter] fn limiters (& self) -> PyResult < PyObject > { Ok (self . inner . limiters . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ErrorResponse { inner : venues :: ErrorResponse , } # [pymethods] impl ErrorResponse { # [staticmethod] fn from_inner (inner : ErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn message (& self) -> PyResult < PyObject > { Ok (self . inner . message . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum OrderSide { Buy , Sell , } # [pyclass] # [derive (Clone)] pub enum OrderType { Limit , Market , LimitMaker , Ioc , StopLimit , } # [pyclass] # [derive (Clone)] pub enum AccountType { Spot , Margin , } # [pyclass] # [derive (Clone)] pub enum Network { Bitcoin , Ethereum , Erc20 , Trc20 , BinanceSmartChain , Polygon , Arbitrum , Optimism , } # [pyclass] # [derive (Clone)] pub enum OrderMode { Spot , IsoMargin , } # [pyclass] # [derive (Clone)] pub enum TradeRole { Taker , Maker , } # [pyclass] # [derive (Clone)] pub enum OrderStatus { New , PartiallyFilled , Filled , Canceled , PendingCancel , } # [pyclass] # [derive (Clone)] pub enum StpMode { None , CancelMaker , CancelTaker , CancelBoth , } # [pyclass] # [derive (Clone)] pub struct GetTradingPairDetailsRequest { inner : venues :: GetTradingPairDetailsRequest , } # [pymethods] impl GetTradingPairDetailsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pyclass] # [derive (Clone)] pub struct GetTradingPairDetailsResponse { inner : venues :: GetTradingPairDetailsResponse , } # [pymethods] impl GetTradingPairDetailsResponse { # [staticmethod] fn from_inner (inner : GetTradingPairDetailsResponse) -> Self { Self { inner } } # [getter] fn symbols (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . symbols . clone () . into ()) } } # [pymethods] impl RestClient { fn get_trading_pair_details <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_trading_pair_details () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetTickerAllPairsRequest { inner : venues :: GetTickerAllPairsRequest , } # [pymethods] impl GetTickerAllPairsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pyclass] # [derive (Clone)] pub struct GetTickerAllPairsResponse { inner : venues :: GetTickerAllPairsResponse , } # [pymethods] impl GetTickerAllPairsResponse { # [staticmethod] fn from_inner (inner : GetTickerAllPairsResponse) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn get_ticker_all_pairs <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_ticker_all_pairs () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetRecentTradesRequest { inner : venues :: GetRecentTradesRequest , } # [pymethods] impl GetRecentTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetRecentTradesResponse { inner : venues :: GetRecentTradesResponse , } # [pymethods] impl GetRecentTradesResponse { # [staticmethod] fn from_inner (inner : GetRecentTradesResponse) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn get_recent_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_recent_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn send_request <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . send_request () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetLatestKlineRequest { inner : venues :: GetLatestKlineRequest , } # [pymethods] impl GetLatestKlineRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn step (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . step . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetLatestKlineResponse { inner : venues :: GetLatestKlineResponse , } # [pymethods] impl GetLatestKlineResponse { # [staticmethod] fn from_inner (inner : GetLatestKlineResponse) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn get_latest_kline <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_latest_kline () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetTradingPairsListRequest { inner : venues :: GetTradingPairsListRequest , } # [pymethods] impl GetTradingPairsListRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pyclass] # [derive (Clone)] pub struct GetTradingPairsListResponse { inner : venues :: GetTradingPairsListResponse , } # [pymethods] impl GetTradingPairsListResponse { # [staticmethod] fn from_inner (inner : GetTradingPairsListResponse) -> Self { Self { inner } } # [getter] fn symbols (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . symbols . clone () . into ()) } } # [pymethods] impl RestClient { fn get_trading_pairs_list <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_trading_pairs_list () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetTickerRequest { inner : venues :: GetTickerRequest , } # [pymethods] impl GetTickerRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TickerData { inner : venues :: TickerData , } # [pymethods] impl TickerData { # [staticmethod] fn from_inner (inner : TickerData) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn last (& self) -> PyResult < String > { Ok (self . inner . last . clone () . into ()) } # [getter] fn v_24h (& self) -> PyResult < String > { Ok (self . inner . v_24h . clone () . into ()) } # [getter] fn qv_24h (& self) -> PyResult < String > { Ok (self . inner . qv_24h . clone () . into ()) } # [getter] fn open_24h (& self) -> PyResult < String > { Ok (self . inner . open_24h . clone () . into ()) } # [getter] fn high_24h (& self) -> PyResult < String > { Ok (self . inner . high_24h . clone () . into ()) } # [getter] fn low_24h (& self) -> PyResult < String > { Ok (self . inner . low_24h . clone () . into ()) } # [getter] fn fluctuation (& self) -> PyResult < String > { Ok (self . inner . fluctuation . clone () . into ()) } # [getter] fn bid_px (& self) -> PyResult < String > { Ok (self . inner . bid_px . clone () . into ()) } # [getter] fn bid_sz (& self) -> PyResult < String > { Ok (self . inner . bid_sz . clone () . into ()) } # [getter] fn ask_px (& self) -> PyResult < String > { Ok (self . inner . ask_px . clone () . into ()) } # [getter] fn ask_sz (& self) -> PyResult < String > { Ok (self . inner . ask_sz . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } } # [pymethods] impl RestClient { fn get_ticker <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_ticker () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetCurrencyListRequest { inner : venues :: GetCurrencyListRequest , } # [pymethods] impl GetCurrencyListRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pyclass] # [derive (Clone)] pub struct GetCurrencyListResponse { inner : venues :: GetCurrencyListResponse , } # [pymethods] impl GetCurrencyListResponse { # [staticmethod] fn from_inner (inner : GetCurrencyListResponse) -> Self { Self { inner } } # [getter] fn currencies (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . currencies . clone () . into ()) } } # [pymethods] impl RestClient { fn get_currency_list <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_currency_list () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetHistoryKlineRequest { inner : venues :: GetHistoryKlineRequest , } # [pymethods] impl GetHistoryKlineRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn step (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . step . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetHistoryKlineResponse { inner : venues :: GetHistoryKlineResponse , } # [pymethods] impl GetHistoryKlineResponse { # [staticmethod] fn from_inner (inner : GetHistoryKlineResponse) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn get_history_kline <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_history_kline () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetDepthRequest { inner : venues :: GetDepthRequest , } # [pymethods] impl GetDepthRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct DepthData { inner : venues :: DepthData , } # [pymethods] impl DepthData { # [staticmethod] fn from_inner (inner : DepthData) -> Self { Self { inner } } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn asks (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . asks . clone () . into ()) } # [getter] fn bids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . bids . clone () . into ()) } } # [pymethods] impl RestClient { fn get_depth <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_depth () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetBasicFeeRateRequest { inner : venues :: GetBasicFeeRateRequest , } # [pymethods] impl GetBasicFeeRateRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pyclass] # [derive (Clone)] pub struct GetBasicFeeRateResponse { inner : venues :: GetBasicFeeRateResponse , } # [pymethods] impl GetBasicFeeRateResponse { # [staticmethod] fn from_inner (inner : GetBasicFeeRateResponse) -> Self { Self { inner } } # [getter] fn user_rate_type (& self) -> PyResult < i64 > { Ok (self . inner . user_rate_type . clone () . into ()) } # [getter] fn level (& self) -> PyResult < String > { Ok (self . inner . level . clone () . into ()) } # [getter] fn taker_fee_rate_a (& self) -> PyResult < String > { Ok (self . inner . taker_fee_rate_a . clone () . into ()) } # [getter] fn maker_fee_rate_a (& self) -> PyResult < String > { Ok (self . inner . maker_fee_rate_a . clone () . into ()) } # [getter] fn taker_fee_rate_b (& self) -> PyResult < String > { Ok (self . inner . taker_fee_rate_b . clone () . into ()) } # [getter] fn maker_fee_rate_b (& self) -> PyResult < String > { Ok (self . inner . maker_fee_rate_b . clone () . into ()) } # [getter] fn taker_fee_rate_c (& self) -> PyResult < String > { Ok (self . inner . taker_fee_rate_c . clone () . into ()) } # [getter] fn maker_fee_rate_c (& self) -> PyResult < String > { Ok (self . inner . maker_fee_rate_c . clone () . into ()) } # [getter] fn taker_fee_rate_d (& self) -> PyResult < String > { Ok (self . inner . taker_fee_rate_d . clone () . into ()) } # [getter] fn maker_fee_rate_d (& self) -> PyResult < String > { Ok (self . inner . maker_fee_rate_d . clone () . into ()) } } # [pymethods] impl RestClient { fn get_basic_fee_rate <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_basic_fee_rate () . await }) } } # [pyclass] # [derive (Clone)] pub struct BatchOrderParam { inner : venues :: BatchOrderParam , } # [pymethods] impl BatchOrderParam { # [staticmethod] fn from_inner (inner : BatchOrderParam) -> Self { Self { inner } } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn stp_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stp_mode . clone () . into ()) } # [getter] fn size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . size . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn notional (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . notional . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SubmitBatchOrderRequest { inner : venues :: SubmitBatchOrderRequest , } # [pymethods] impl SubmitBatchOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_params (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_params . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SubmitBatchOrderResponse { inner : venues :: SubmitBatchOrderResponse , } # [pymethods] impl SubmitBatchOrderResponse { # [staticmethod] fn from_inner (inner : SubmitBatchOrderResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchOrderData { inner : venues :: BatchOrderData , } # [pymethods] impl BatchOrderData { # [staticmethod] fn from_inner (inner : BatchOrderData) -> Self { Self { inner } } # [getter] fn order_ids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . order_ids . clone () . into ()) } } # [pymethods] impl RestClient { fn submit_batch_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . submit_batch_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetWithdrawQuotaRequest { inner : venues :: GetWithdrawQuotaRequest , } # [pymethods] impl GetWithdrawQuotaRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetWithdrawQuotaResponse { inner : venues :: GetWithdrawQuotaResponse , } # [pymethods] impl GetWithdrawQuotaResponse { # [staticmethod] fn from_inner (inner : GetWithdrawQuotaResponse) -> Self { Self { inner } } # [getter] fn today_available_withdraw_btc (& self) -> PyResult < String > { Ok (self . inner . today_available_withdraw_btc . clone () . into ()) } # [getter] fn min_withdraw (& self) -> PyResult < String > { Ok (self . inner . min_withdraw . clone () . into ()) } # [getter] fn withdraw_precision (& self) -> PyResult < i64 > { Ok (self . inner . withdraw_precision . clone () . into ()) } # [getter] fn withdraw_fee (& self) -> PyResult < String > { Ok (self . inner . withdraw_fee . clone () . into ()) } # [getter] fn withdraw_precision_ge_ten (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . withdraw_precision_ge_ten . clone () . into ()) } } # [pymethods] impl RestClient { fn get_withdraw_quota <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_withdraw_quota () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn sign_request (& self) -> PyResult < () > { self . inner . sign_request () ; Ok (()) } fn send_request <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . send_request () . await }) } } # [pyclass] # [derive (Clone)] pub struct SubmitMarginOrderRequest { inner : venues :: SubmitMarginOrderRequest , } # [pymethods] impl SubmitMarginOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . size . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn notional (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . notional . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SubmitMarginOrderResponse { inner : venues :: SubmitMarginOrderResponse , } # [pymethods] impl SubmitMarginOrderResponse { # [staticmethod] fn from_inner (inner : SubmitMarginOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn submit_margin_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . submit_margin_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct QueryOrderRequest { inner : venues :: QueryOrderRequest , } # [pymethods] impl QueryOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderDetails { inner : venues :: OrderDetails , } # [pymethods] impl OrderDetails { # [staticmethod] fn from_inner (inner : OrderDetails) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_mode (& self) -> PyResult < PyObject > { Ok (self . inner . order_mode . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn state (& self) -> PyResult < PyObject > { Ok (self . inner . state . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn price_avg (& self) -> PyResult < String > { Ok (self . inner . price_avg . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn filled_size (& self) -> PyResult < String > { Ok (self . inner . filled_size . clone () . into ()) } # [getter] fn notional (& self) -> PyResult < String > { Ok (self . inner . notional . clone () . into ()) } # [getter] fn filled_notional (& self) -> PyResult < String > { Ok (self . inner . filled_notional . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < i64 > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < i64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct QueryOrderResponse { inner : venues :: QueryOrderResponse , } # [pymethods] impl QueryOrderResponse { # [staticmethod] fn from_inner (inner : QueryOrderResponse) -> Self { Self { inner } } # [getter] fn order (& self) -> PyResult < PyObject > { Ok (self . inner . order . clone () . into ()) } } # [pymethods] impl RestClient { fn query_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . query_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct WithdrawRequest { inner : venues :: WithdrawRequest , } # [pymethods] impl WithdrawRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn destination (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . destination . clone () . into ()) } # [getter] fn address (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . address . clone () . into ()) } # [getter] fn address_memo (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . address_memo . clone () . into ()) } # [getter] fn account_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . account_type . clone () . into ()) } # [getter] fn value (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . value . clone () . into ()) } # [getter] fn area_code (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . area_code . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct WithdrawResponse { inner : venues :: WithdrawResponse , } # [pymethods] impl WithdrawResponse { # [staticmethod] fn from_inner (inner : WithdrawResponse) -> Self { Self { inner } } # [getter] fn withdraw_id (& self) -> PyResult < String > { Ok (self . inner . withdraw_id . clone () . into ()) } } # [pymethods] impl RestClient { fn withdraw <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . withdraw () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMarginIsolatedAccountRequest { inner : venues :: GetMarginIsolatedAccountRequest , } # [pymethods] impl GetMarginIsolatedAccountRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MarginIsolatedSymbol { inner : venues :: MarginIsolatedSymbol , } # [pymethods] impl MarginIsolatedSymbol { # [staticmethod] fn from_inner (inner : MarginIsolatedSymbol) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn risk_rate (& self) -> PyResult < String > { Ok (self . inner . risk_rate . clone () . into ()) } # [getter] fn risk_level (& self) -> PyResult < String > { Ok (self . inner . risk_level . clone () . into ()) } # [getter] fn buy_enabled (& self) -> PyResult < bool > { Ok (self . inner . buy_enabled . clone () . into ()) } # [getter] fn sell_enabled (& self) -> PyResult < bool > { Ok (self . inner . sell_enabled . clone () . into ()) } # [getter] fn liquidate_price (& self) -> PyResult < String > { Ok (self . inner . liquidate_price . clone () . into ()) } # [getter] fn liquidate_rate (& self) -> PyResult < String > { Ok (self . inner . liquidate_rate . clone () . into ()) } # [getter] fn base (& self) -> PyResult < PyObject > { Ok (self . inner . base . clone () . into ()) } # [getter] fn quote (& self) -> PyResult < PyObject > { Ok (self . inner . quote . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetMarginIsolatedAccountResponse { inner : venues :: GetMarginIsolatedAccountResponse , } # [pymethods] impl GetMarginIsolatedAccountResponse { # [staticmethod] fn from_inner (inner : GetMarginIsolatedAccountResponse) -> Self { Self { inner } } # [getter] fn symbols (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . symbols . clone () . into ()) } } # [pymethods] impl RestClient { fn get_margin_isolated_account <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_margin_isolated_account () . await }) } } # [pyclass] # [derive (Clone)] pub struct QueryTradesRequest { inner : venues :: QueryTradesRequest , } # [pymethods] impl QueryTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_mode . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TradeInfo { inner : venues :: TradeInfo , } # [pymethods] impl TradeInfo { # [staticmethod] fn from_inner (inner : TradeInfo) -> Self { Self { inner } } # [getter] fn trade_id (& self) -> PyResult < String > { Ok (self . inner . trade_id . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < String > { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_mode (& self) -> PyResult < PyObject > { Ok (self . inner . order_mode . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn notional (& self) -> PyResult < String > { Ok (self . inner . notional . clone () . into ()) } # [getter] fn fee (& self) -> PyResult < String > { Ok (self . inner . fee . clone () . into ()) } # [getter] fn fee_coin_name (& self) -> PyResult < String > { Ok (self . inner . fee_coin_name . clone () . into ()) } # [getter] fn trade_role (& self) -> PyResult < PyObject > { Ok (self . inner . trade_role . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < i64 > { Ok (self . inner . create_time . clone () . into ()) } # [getter] fn update_time (& self) -> PyResult < i64 > { Ok (self . inner . update_time . clone () . into ()) } } # [pymethods] impl RestClient { fn query_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . query_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAccountBalanceRequest { inner : venues :: GetAccountBalanceRequest , } # [pymethods] impl GetAccountBalanceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } # [getter] fn need_usd_valuation (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . need_usd_valuation . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct WalletBalance { inner : venues :: WalletBalance , } # [pymethods] impl WalletBalance { # [staticmethod] fn from_inner (inner : WalletBalance) -> Self { Self { inner } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn name (& self) -> PyResult < String > { Ok (self . inner . name . clone () . into ()) } # [getter] fn available (& self) -> PyResult < String > { Ok (self . inner . available . clone () . into ()) } # [getter] fn available_usd_valuation (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . available_usd_valuation . clone () . into ()) } # [getter] fn frozen (& self) -> PyResult < String > { Ok (self . inner . frozen . clone () . into ()) } # [getter] fn unavailable (& self) -> PyResult < String > { Ok (self . inner . unavailable . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetAccountBalanceResponse { inner : venues :: GetAccountBalanceResponse , } # [pymethods] impl GetAccountBalanceResponse { # [staticmethod] fn from_inner (inner : GetAccountBalanceResponse) -> Self { Self { inner } } # [getter] fn wallet (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . wallet . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_balance <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_balance () . await }) } } # [pyclass] # [derive (Clone)] pub struct MarginAssetTransferRequest { inner : venues :: MarginAssetTransferRequest , } # [pymethods] impl MarginAssetTransferRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn amount (& self) -> PyResult < String > { Ok (self . inner . amount . clone () . into ()) } # [getter] fn side (& self) -> PyResult < String > { Ok (self . inner . side . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MarginAssetTransferResponse { inner : venues :: MarginAssetTransferResponse , } # [pymethods] impl MarginAssetTransferResponse { # [staticmethod] fn from_inner (inner : MarginAssetTransferResponse) -> Self { Self { inner } } # [getter] fn transfer_id (& self) -> PyResult < String > { Ok (self . inner . transfer_id . clone () . into ()) } } # [pymethods] impl RestClient { fn margin_asset_transfer <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . margin_asset_transfer () . await }) } } # [pyclass] # [derive (Clone)] pub struct QueryOrdersRequest { inner : venues :: QueryOrdersRequest , } # [pymethods] impl QueryOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_mode . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pymethods] impl RestClient { fn query_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . query_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct QueryOrderTradesRequest { inner : venues :: QueryOrderTradesRequest , } # [pymethods] impl QueryOrderTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pymethods] impl RestClient { fn query_order_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . query_order_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderRequest { inner : venues :: CancelOrderRequest , } # [pymethods] impl CancelOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderResponse { inner : venues :: CancelOrderResponse , } # [pymethods] impl CancelOrderResponse { # [staticmethod] fn from_inner (inner : CancelOrderResponse) -> Self { Self { inner } } # [getter] fn result (& self) -> PyResult < bool > { Ok (self . inner . result . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelBatchOrderRequest { inner : venues :: CancelBatchOrderRequest , } # [pymethods] impl CancelBatchOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_ids (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_ids . clone () . into ()) } # [getter] fn client_order_ids (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_ids . clone () . into ()) } # [getter] fn recv_window (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . recv_window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelBatchOrderResponse { inner : venues :: CancelBatchOrderResponse , } # [pymethods] impl CancelBatchOrderResponse { # [staticmethod] fn from_inner (inner : CancelBatchOrderResponse) -> Self { Self { inner } } # [getter] fn success_ids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . success_ids . clone () . into ()) } # [getter] fn fail_ids (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . fail_ids . clone () . into ()) } # [getter] fn total_count (& self) -> PyResult < i64 > { Ok (self . inner . total_count . clone () . into ()) } # [getter] fn success_count (& self) -> PyResult < i64 > { Ok (self . inner . success_count . clone () . into ()) } # [getter] fn failed_count (& self) -> PyResult < i64 > { Ok (self . inner . failed_count . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOrdersRequest { inner : venues :: CancelAllOrdersRequest , } # [pymethods] impl CancelAllOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . side . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOrdersResponse { inner : venues :: CancelAllOrdersResponse , } # [pymethods] impl CancelAllOrdersResponse { # [staticmethod] fn from_inner (inner : CancelAllOrdersResponse) -> Self { Self { inner } } } # [pymethods] impl RestClient { fn cancel_batch_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_batch_order () . await }) } fn cancel_all_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_all_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetDepositWithdrawHistoryRequest { inner : venues :: GetDepositWithdrawHistoryRequest , } # [pymethods] impl GetDepositWithdrawHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } # [getter] fn operation_type (& self) -> PyResult < String > { Ok (self . inner . operation_type . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < i64 > { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetDepositWithdrawHistoryResponse { inner : venues :: GetDepositWithdrawHistoryResponse , } # [pymethods] impl GetDepositWithdrawHistoryResponse { # [staticmethod] fn from_inner (inner : GetDepositWithdrawHistoryResponse) -> Self { Self { inner } } # [getter] fn records (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . records . clone () . into ()) } } # [pymethods] impl RestClient { fn get_deposit_withdraw_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_deposit_withdraw_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetWithdrawAddressListRequest { inner : venues :: GetWithdrawAddressListRequest , } # [pymethods] impl GetWithdrawAddressListRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pyclass] # [derive (Clone)] pub struct GetWithdrawAddressListResponse { inner : venues :: GetWithdrawAddressListResponse , } # [pymethods] impl GetWithdrawAddressListResponse { # [staticmethod] fn from_inner (inner : GetWithdrawAddressListResponse) -> Self { Self { inner } } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pymethods] impl RestClient { fn get_withdraw_address_list <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_withdraw_address_list () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetSpotWalletBalanceRequest { inner : venues :: GetSpotWalletBalanceRequest , } # [pymethods] impl GetSpotWalletBalanceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pyclass] # [derive (Clone)] pub struct SpotWalletBalance { inner : venues :: SpotWalletBalance , } # [pymethods] impl SpotWalletBalance { # [staticmethod] fn from_inner (inner : SpotWalletBalance) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < String > { Ok (self . inner . id . clone () . into ()) } # [getter] fn name (& self) -> PyResult < String > { Ok (self . inner . name . clone () . into ()) } # [getter] fn available (& self) -> PyResult < String > { Ok (self . inner . available . clone () . into ()) } # [getter] fn frozen (& self) -> PyResult < String > { Ok (self . inner . frozen . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetSpotWalletBalanceResponse { inner : venues :: GetSpotWalletBalanceResponse , } # [pymethods] impl GetSpotWalletBalanceResponse { # [staticmethod] fn from_inner (inner : GetSpotWalletBalanceResponse) -> Self { Self { inner } } # [getter] fn wallet (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . wallet . clone () . into ()) } } # [pymethods] impl RestClient { fn get_spot_wallet_balance <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_spot_wallet_balance () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetDepositAddressRequest { inner : venues :: GetDepositAddressRequest , } # [pymethods] impl GetDepositAddressRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetDepositAddressResponse { inner : venues :: GetDepositAddressResponse , } # [pymethods] impl GetDepositAddressResponse { # [staticmethod] fn from_inner (inner : GetDepositAddressResponse) -> Self { Self { inner } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn chain (& self) -> PyResult < String > { Ok (self . inner . chain . clone () . into ()) } # [getter] fn address (& self) -> PyResult < String > { Ok (self . inner . address . clone () . into ()) } # [getter] fn address_memo (& self) -> PyResult < String > { Ok (self . inner . address_memo . clone () . into ()) } } # [pymethods] impl RestClient { fn get_deposit_address <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_deposit_address () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetCurrenciesRequest { inner : venues :: GetCurrenciesRequest , } # [pymethods] impl GetCurrenciesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn currencies (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currencies . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetCurrenciesResponse { inner : venues :: GetCurrenciesResponse , } # [pymethods] impl GetCurrenciesResponse { # [staticmethod] fn from_inner (inner : GetCurrenciesResponse) -> Self { Self { inner } } # [getter] fn currencies (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . currencies . clone () . into ()) } } # [pymethods] impl RestClient { fn get_currencies <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_currencies () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetDepositWithdrawDetailRequest { inner : venues :: GetDepositWithdrawDetailRequest , } # [pymethods] impl GetDepositWithdrawDetailRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn id (& self) -> PyResult < String > { Ok (self . inner . id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetDepositWithdrawDetailResponse { inner : venues :: GetDepositWithdrawDetailResponse , } # [pymethods] impl GetDepositWithdrawDetailResponse { # [staticmethod] fn from_inner (inner : GetDepositWithdrawDetailResponse) -> Self { Self { inner } } # [getter] fn record (& self) -> PyResult < PyObject > { Ok (self . inner . record . clone () . into ()) } } # [pymethods] impl RestClient { fn get_deposit_withdraw_detail <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_deposit_withdraw_detail () . await }) } } # [pyclass] # [derive (Clone)] pub struct SubmitOrderRequest { inner : venues :: SubmitOrderRequest , } # [pymethods] impl SubmitOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn client_order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . client_order_id . clone () . into ()) } # [getter] fn stp_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stp_mode . clone () . into ()) } # [getter] fn size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . size . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn notional (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . notional . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SubmitOrderResponse { inner : venues :: SubmitOrderResponse , } # [pymethods] impl SubmitOrderResponse { # [staticmethod] fn from_inner (inner : SubmitOrderResponse) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } } # [pymethods] impl RestClient { fn submit_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . submit_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetActualTradeFeeRateRequest { inner : venues :: GetActualTradeFeeRateRequest , } # [pymethods] impl GetActualTradeFeeRateRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetActualTradeFeeRateResponse { inner : venues :: GetActualTradeFeeRateResponse , } # [pymethods] impl GetActualTradeFeeRateResponse { # [staticmethod] fn from_inner (inner : GetActualTradeFeeRateResponse) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn buy_taker_fee_rate (& self) -> PyResult < String > { Ok (self . inner . buy_taker_fee_rate . clone () . into ()) } # [getter] fn sell_taker_fee_rate (& self) -> PyResult < String > { Ok (self . inner . sell_taker_fee_rate . clone () . into ()) } # [getter] fn buy_maker_fee_rate (& self) -> PyResult < String > { Ok (self . inner . buy_maker_fee_rate . clone () . into ()) } # [getter] fn sell_maker_fee_rate (& self) -> PyResult < String > { Ok (self . inner . sell_maker_fee_rate . clone () . into ()) } } # [pymethods] impl RestClient { fn get_actual_trade_fee_rate <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_actual_trade_fee_rate () . await }) } } # [pyclass] # [derive (Clone)] pub struct ErrorResponse { inner : venues :: ErrorResponse , } # [pymethods] impl ErrorResponse { # [staticmethod] fn from_inner (inner : ErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn message (& self) -> PyResult < String > { Ok (self . inner . message . clone () . into ()) } # [getter] fn trace (& self) -> PyResult < String > { Ok (self . inner . trace . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum EndpointType { System , FundingAccount , SpotPublicMarket , SpotTrading , SubAccount , MarginLoan , } # [pyclass] # [derive (Clone)] pub struct RateLimit { inner : venues :: RateLimit , } # [pymethods] impl RateLimit { # [staticmethod] fn from_inner (inner : RateLimit) -> Self { Self { inner } } # [getter] fn max_requests (& self) -> PyResult < u64 > { Ok (self . inner . max_requests . clone () . into ()) } # [getter] fn window (& self) -> PyResult < PyObject > { Ok (self . inner . window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimiter { inner : venues :: RateLimiter , } # [pymethods] impl RateLimiter { # [staticmethod] fn from_inner (inner : RateLimiter) -> Self { Self { inner } } } # [doc = " Create the Python module for bitmart"] pub fn create_module (py : Python) -> PyResult <& PyModule > { let m = PyModule :: new (py , "bitmart") ?; Ok (m) }