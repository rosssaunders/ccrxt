# ! [doc = " Python bindings for okx venue"] # ! [doc = ""] # ! [doc = " This module is automatically generated from the Rust source code."] # ! [doc = " Do not edit this file directly."] use pyo3 :: prelude ::*; use pyo3_asyncio ; use venues ; # [pyclass] # [derive (Clone)] pub enum OrderSide { Buy , Sell , } # [pyclass] # [derive (Clone)] pub enum OrderType { Market , Limit , PostOnly , Fok , Ioc , } # [pyclass] # [derive (Clone)] pub enum InstrumentType { Spot , Margin , Swap , Futures , Option , } # [pyclass] # [derive (Clone)] pub enum InstrumentState { Live , Suspend , PreOpen , Test , } # [pyclass] # [derive (Clone)] pub enum Bar { M1 , M3 , M5 , M15 , M30 , H1 , H2 , H4 , H6 , H12 , D1 , W1 , Month1 , Month3 , H6Utc , H12Utc , D1Utc , W1Utc , Month1Utc , Month3Utc , } # [pyclass] # [derive (Clone)] pub enum AdlType { RateAdlStart , BalAdlStart , PosAdlStart , AdlEnd , Unknown , } # [pyclass] # [derive (Clone)] pub enum DeliveryExerciseType { Delivery , Exercised , ExpiredOtm , } # [pyclass] # [derive (Clone)] pub struct GetPriceLimitRequest { inner : venues :: GetPriceLimitRequest , } # [pymethods] impl GetPriceLimitRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetPriceLimitResponse { inner : venues :: GetPriceLimitResponse , } # [pymethods] impl GetPriceLimitResponse { # [staticmethod] fn from_inner (inner : GetPriceLimitResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_price_limit <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_price_limit () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetDeliveryExerciseHistoryRequest { inner : venues :: GetDeliveryExerciseHistoryRequest , } # [pymethods] impl GetDeliveryExerciseHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < PyObject > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn underlying (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct DeliveryExerciseHistory { inner : venues :: DeliveryExerciseHistory , } # [pymethods] impl DeliveryExerciseHistory { # [staticmethod] fn from_inner (inner : DeliveryExerciseHistory) -> Self { Self { inner } } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } # [getter] fn details (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . details . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetDeliveryExerciseHistoryResponse { inner : venues :: GetDeliveryExerciseHistoryResponse , } # [pymethods] impl GetDeliveryExerciseHistoryResponse { # [staticmethod] fn from_inner (inner : GetDeliveryExerciseHistoryResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_delivery_exercise_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_delivery_exercise_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetInterestRateLoanQuotaRequest { inner : venues :: GetInterestRateLoanQuotaRequest , } # [pymethods] impl GetInterestRateLoanQuotaRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pyclass] # [derive (Clone)] pub struct InterestRateLoanQuotaData { inner : venues :: InterestRateLoanQuotaData , } # [pymethods] impl InterestRateLoanQuotaData { # [staticmethod] fn from_inner (inner : InterestRateLoanQuotaData) -> Self { Self { inner } } # [getter] fn basic (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . basic . clone () . into ()) } # [getter] fn vip (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . vip . clone () . into ()) } # [getter] fn regular (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . regular . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetInterestRateLoanQuotaResponse { inner : venues :: GetInterestRateLoanQuotaResponse , } # [pymethods] impl GetInterestRateLoanQuotaResponse { # [staticmethod] fn from_inner (inner : GetInterestRateLoanQuotaResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_interest_rate_loan_quota <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_interest_rate_loan_quota () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetIndexComponentsRequest { inner : venues :: GetIndexComponentsRequest , } # [pymethods] impl GetIndexComponentsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn index (& self) -> PyResult < String > { Ok (self . inner . index . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct IndexComponentData { inner : venues :: IndexComponentData , } # [pymethods] impl IndexComponentData { # [staticmethod] fn from_inner (inner : IndexComponentData) -> Self { Self { inner } } # [getter] fn index (& self) -> PyResult < String > { Ok (self . inner . index . clone () . into ()) } # [getter] fn last (& self) -> PyResult < String > { Ok (self . inner . last . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } # [getter] fn components (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . components . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetIndexComponentsResponse { inner : venues :: GetIndexComponentsResponse , } # [pymethods] impl GetIndexComponentsResponse { # [staticmethod] fn from_inner (inner : GetIndexComponentsResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < PyObject > { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_index_components <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_index_components () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn base_url (& self) -> PyResult < PyObject > { Ok (self . inner . base_url . clone () . into ()) } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn rate_limiter (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limiter . clone () . into ()) } } # [pymethods] impl RestClient { fn send_request <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . send_request () . await }) } } # [pyclass] # [derive (Clone)] pub enum InsuranceFundType { RegularUpdate , LiquidationBalanceDeposit , BankruptcyLoss , PlatformRevenue , Adl , } # [pyclass] # [derive (Clone)] pub struct GetInsuranceFundRequest { inner : venues :: GetInsuranceFundRequest , } # [pymethods] impl GetInsuranceFundRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < PyObject > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn fund_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . fund_type . clone () . into ()) } # [getter] fn underlying (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetInsuranceFundResponse { inner : venues :: GetInsuranceFundResponse , } # [pymethods] impl GetInsuranceFundResponse { # [staticmethod] fn from_inner (inner : GetInsuranceFundResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct InsuranceFundData { inner : venues :: InsuranceFundData , } # [pymethods] impl InsuranceFundData { # [staticmethod] fn from_inner (inner : InsuranceFundData) -> Self { Self { inner } } # [getter] fn total (& self) -> PyResult < String > { Ok (self . inner . total . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn inst_type (& self) -> PyResult < PyObject > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn details (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . details . clone () . into ()) } } # [pymethods] impl RestClient { fn get_insurance_fund <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_insurance_fund () . await }) } } # [pyclass] # [derive (Clone)] pub struct ConvertContractCoinRequest { inner : venues :: ConvertContractCoinRequest , } # [pymethods] impl ConvertContractCoinRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn convert_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . convert_type . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn sz (& self) -> PyResult < String > { Ok (self . inner . sz . clone () . into ()) } # [getter] fn px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . px . clone () . into ()) } # [getter] fn unit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . unit . clone () . into ()) } # [getter] fn op_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . op_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ConvertContractCoinData { inner : venues :: ConvertContractCoinData , } # [pymethods] impl ConvertContractCoinData { # [staticmethod] fn from_inner (inner : ConvertContractCoinData) -> Self { Self { inner } } # [getter] fn convert_type (& self) -> PyResult < String > { Ok (self . inner . convert_type . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn px (& self) -> PyResult < String > { Ok (self . inner . px . clone () . into ()) } # [getter] fn sz (& self) -> PyResult < String > { Ok (self . inner . sz . clone () . into ()) } # [getter] fn unit (& self) -> PyResult < String > { Ok (self . inner . unit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ConvertContractCoinResponse { inner : venues :: ConvertContractCoinResponse , } # [pymethods] impl ConvertContractCoinResponse { # [staticmethod] fn from_inner (inner : ConvertContractCoinResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn convert_contract_coin <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . convert_contract_coin () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetDiscountRateInterestFreeQuotaRequest { inner : venues :: GetDiscountRateInterestFreeQuotaRequest , } # [pymethods] impl GetDiscountRateInterestFreeQuotaRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn discount_lv (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . discount_lv . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetDiscountRateInterestFreeQuotaResponse { inner : venues :: GetDiscountRateInterestFreeQuotaResponse , } # [pymethods] impl GetDiscountRateInterestFreeQuotaResponse { # [staticmethod] fn from_inner (inner : GetDiscountRateInterestFreeQuotaResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_discount_rate_interest_free_quota <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_discount_rate_interest_free_quota () . await }) } } # [pyclass] # [derive (Clone)] pub enum BarSize { OneMinute , ThreeMinutes , FiveMinutes , FifteenMinutes , ThirtyMinutes , OneHour , TwoHours , FourHours , SixHours , TwelveHours , OneDay , OneWeek , OneMonth , SixHoursUtc , TwelveHoursUtc , OneDayUtc , OneWeekUtc , OneMonthUtc , } # [pyclass] # [derive (Clone)] pub struct GetHistoryMarkPriceCandlesRequest { inner : venues :: GetHistoryMarkPriceCandlesRequest , } # [pymethods] impl GetHistoryMarkPriceCandlesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn bar (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . bar . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetHistoryMarkPriceCandlesResponse { inner : venues :: GetHistoryMarkPriceCandlesResponse , } # [pymethods] impl GetHistoryMarkPriceCandlesResponse { # [staticmethod] fn from_inner (inner : GetHistoryMarkPriceCandlesResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_history_mark_price_candles <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_history_mark_price_candles () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMarkPriceCandlesHistoryRequest { inner : venues :: GetMarkPriceCandlesHistoryRequest , } # [pymethods] impl GetMarkPriceCandlesHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn bar (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . bar . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetMarkPriceCandlesHistoryResponse { inner : venues :: GetMarkPriceCandlesHistoryResponse , } # [pymethods] impl GetMarkPriceCandlesHistoryResponse { # [staticmethod] fn from_inner (inner : GetMarkPriceCandlesHistoryResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_mark_price_candles_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_mark_price_candles_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetPositionTiersRequest { inner : venues :: GetPositionTiersRequest , } # [pymethods] impl GetPositionTiersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < PyObject > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn td_mode (& self) -> PyResult < String > { Ok (self . inner . td_mode . clone () . into ()) } # [getter] fn underlying (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn tier (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tier . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PositionTier { inner : venues :: PositionTier , } # [pymethods] impl PositionTier { # [staticmethod] fn from_inner (inner : PositionTier) -> Self { Self { inner } } # [getter] fn underlying (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn tier (& self) -> PyResult < String > { Ok (self . inner . tier . clone () . into ()) } # [getter] fn min_sz (& self) -> PyResult < String > { Ok (self . inner . min_sz . clone () . into ()) } # [getter] fn max_sz (& self) -> PyResult < String > { Ok (self . inner . max_sz . clone () . into ()) } # [getter] fn mmr (& self) -> PyResult < String > { Ok (self . inner . mmr . clone () . into ()) } # [getter] fn imr (& self) -> PyResult < String > { Ok (self . inner . imr . clone () . into ()) } # [getter] fn max_lever (& self) -> PyResult < String > { Ok (self . inner . max_lever . clone () . into ()) } # [getter] fn opt_mgn_factor (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . opt_mgn_factor . clone () . into ()) } # [getter] fn quote_max_loan (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quote_max_loan . clone () . into ()) } # [getter] fn base_max_loan (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_max_loan . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetPositionTiersResponse { inner : venues :: GetPositionTiersResponse , } # [pymethods] impl GetPositionTiersResponse { # [staticmethod] fn from_inner (inner : GetPositionTiersResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_position_tiers <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_position_tiers () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetPremiumHistoryRequest { inner : venues :: GetPremiumHistoryRequest , } # [pymethods] impl GetPremiumHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PremiumHistory { inner : venues :: PremiumHistory , } # [pymethods] impl PremiumHistory { # [staticmethod] fn from_inner (inner : PremiumHistory) -> Self { Self { inner } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn premium (& self) -> PyResult < String > { Ok (self . inner . premium . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetPremiumHistoryResponse { inner : venues :: GetPremiumHistoryResponse , } # [pymethods] impl GetPremiumHistoryResponse { # [staticmethod] fn from_inner (inner : GetPremiumHistoryResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_premium_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_premium_history () . await }) } } # [pyclass] # [derive (Clone)] pub enum TickBandInstrumentType { Option , } # [pyclass] # [derive (Clone)] pub struct GetInstrumentTickBandsRequest { inner : venues :: GetInstrumentTickBandsRequest , } # [pymethods] impl GetInstrumentTickBandsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < PyObject > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetInstrumentTickBandsResponse { inner : venues :: GetInstrumentTickBandsResponse , } # [pymethods] impl GetInstrumentTickBandsResponse { # [staticmethod] fn from_inner (inner : GetInstrumentTickBandsResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct InstrumentTickBandData { inner : venues :: InstrumentTickBandData , } # [pymethods] impl InstrumentTickBandData { # [staticmethod] fn from_inner (inner : InstrumentTickBandData) -> Self { Self { inner } } # [getter] fn inst_type (& self) -> PyResult < String > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < String > { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn tick_band (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . tick_band . clone () . into ()) } } # [pymethods] impl RestClient { fn get_instrument_tick_bands <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_instrument_tick_bands () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetSettlementHistoryRequest { inner : venues :: GetSettlementHistoryRequest , } # [pymethods] impl GetSettlementHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_family (& self) -> PyResult < String > { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SettlementHistory { inner : venues :: SettlementHistory , } # [pymethods] impl SettlementHistory { # [staticmethod] fn from_inner (inner : SettlementHistory) -> Self { Self { inner } } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } # [getter] fn details (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . details . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetSettlementHistoryResponse { inner : venues :: GetSettlementHistoryResponse , } # [pymethods] impl GetSettlementHistoryResponse { # [staticmethod] fn from_inner (inner : GetSettlementHistoryResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_settlement_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_settlement_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetFundingRateHistoryRequest { inner : venues :: GetFundingRateHistoryRequest , } # [pymethods] impl GetFundingRateHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct FundingRateHistory { inner : venues :: FundingRateHistory , } # [pymethods] impl FundingRateHistory { # [staticmethod] fn from_inner (inner : FundingRateHistory) -> Self { Self { inner } } # [getter] fn inst_type (& self) -> PyResult < String > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn formula_type (& self) -> PyResult < String > { Ok (self . inner . formula_type . clone () . into ()) } # [getter] fn funding_rate (& self) -> PyResult < String > { Ok (self . inner . funding_rate . clone () . into ()) } # [getter] fn realized_rate (& self) -> PyResult < String > { Ok (self . inner . realized_rate . clone () . into ()) } # [getter] fn funding_time (& self) -> PyResult < String > { Ok (self . inner . funding_time . clone () . into ()) } # [getter] fn method (& self) -> PyResult < String > { Ok (self . inner . method . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetFundingRateHistoryResponse { inner : venues :: GetFundingRateHistoryResponse , } # [pymethods] impl GetFundingRateHistoryResponse { # [staticmethod] fn from_inner (inner : GetFundingRateHistoryResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_funding_rate_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_funding_rate_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetUnderlyingRequest { inner : venues :: GetUnderlyingRequest , } # [pymethods] impl GetUnderlyingRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < PyObject > { Ok (self . inner . inst_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetUnderlyingResponse { inner : venues :: GetUnderlyingResponse , } # [pymethods] impl GetUnderlyingResponse { # [staticmethod] fn from_inner (inner : GetUnderlyingResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct UnderlyingData { inner : venues :: UnderlyingData , } # [pymethods] impl UnderlyingData { # [staticmethod] fn from_inner (inner : UnderlyingData) -> Self { Self { inner } } # [getter] fn assets (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . assets . clone () . into ()) } } # [pymethods] impl RestClient { fn get_underlying <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_underlying () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOptSummaryRequest { inner : venues :: GetOptSummaryRequest , } # [pymethods] impl GetOptSummaryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn underlying (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn exp_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . exp_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetOptSummaryResponse { inner : venues :: GetOptSummaryResponse , } # [pymethods] impl GetOptSummaryResponse { # [staticmethod] fn from_inner (inner : GetOptSummaryResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_opt_summary <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_opt_summary () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetEstimatedSettlementInfoRequest { inner : venues :: GetEstimatedSettlementInfoRequest , } # [pymethods] impl GetEstimatedSettlementInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct EstimatedSettlementInfo { inner : venues :: EstimatedSettlementInfo , } # [pymethods] impl EstimatedSettlementInfo { # [staticmethod] fn from_inner (inner : EstimatedSettlementInfo) -> Self { Self { inner } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn next_settle_time (& self) -> PyResult < String > { Ok (self . inner . next_settle_time . clone () . into ()) } # [getter] fn est_settle_px (& self) -> PyResult < String > { Ok (self . inner . est_settle_px . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetEstimatedSettlementInfoResponse { inner : venues :: GetEstimatedSettlementInfoResponse , } # [pymethods] impl GetEstimatedSettlementInfoResponse { # [staticmethod] fn from_inner (inner : GetEstimatedSettlementInfoResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_estimated_settlement_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_estimated_settlement_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct ExchangeRateResponse { inner : venues :: ExchangeRateResponse , } # [pymethods] impl ExchangeRateResponse { # [staticmethod] fn from_inner (inner : ExchangeRateResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_exchange_rate <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_exchange_rate () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetHistoryIndexCandlesRequest { inner : venues :: GetHistoryIndexCandlesRequest , } # [pymethods] impl GetHistoryIndexCandlesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn bar (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . bar . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetHistoryIndexCandlesResponse { inner : venues :: GetHistoryIndexCandlesResponse , } # [pymethods] impl GetHistoryIndexCandlesResponse { # [staticmethod] fn from_inner (inner : GetHistoryIndexCandlesResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_history_index_candles <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_history_index_candles () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetIndexCandlesRequest { inner : venues :: GetIndexCandlesRequest , } # [pymethods] impl GetIndexCandlesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn bar (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . bar . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetIndexCandlesResponse { inner : venues :: GetIndexCandlesResponse , } # [pymethods] impl GetIndexCandlesResponse { # [staticmethod] fn from_inner (inner : GetIndexCandlesResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_index_candles <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_index_candles () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMarkPriceRequest { inner : venues :: GetMarkPriceRequest , } # [pymethods] impl GetMarkPriceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < String > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn uly (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . uly . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetMarkPriceResponse { inner : venues :: GetMarkPriceResponse , } # [pymethods] impl GetMarkPriceResponse { # [staticmethod] fn from_inner (inner : GetMarkPriceResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_mark_price <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_mark_price () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetInstrumentsRequest { inner : venues :: GetInstrumentsRequest , } # [pymethods] impl GetInstrumentsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < PyObject > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn underlying (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetInstrumentsResponse { inner : venues :: GetInstrumentsResponse , } # [pymethods] impl GetInstrumentsResponse { # [staticmethod] fn from_inner (inner : GetInstrumentsResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_instruments <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_instruments () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetFundingRateRequest { inner : venues :: GetFundingRateRequest , } # [pymethods] impl GetFundingRateRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetFundingRateResponse { inner : venues :: GetFundingRateResponse , } # [pymethods] impl GetFundingRateResponse { # [staticmethod] fn from_inner (inner : GetFundingRateResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_funding_rate <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_funding_rate () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetEstimatedPriceRequest { inner : venues :: GetEstimatedPriceRequest , } # [pymethods] impl GetEstimatedPriceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct EstimatedPriceData { inner : venues :: EstimatedPriceData , } # [pymethods] impl EstimatedPriceData { # [staticmethod] fn from_inner (inner : EstimatedPriceData) -> Self { Self { inner } } # [getter] fn inst_type (& self) -> PyResult < PyObject > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn settle_px (& self) -> PyResult < String > { Ok (self . inner . settle_px . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetEstimatedPriceResponse { inner : venues :: GetEstimatedPriceResponse , } # [pymethods] impl GetEstimatedPriceResponse { # [staticmethod] fn from_inner (inner : GetEstimatedPriceResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_estimated_price <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_estimated_price () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetIndexTickersRequest { inner : venues :: GetIndexTickersRequest , } # [pymethods] impl GetIndexTickersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn quote_ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quote_ccy . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct IndexTicker { inner : venues :: IndexTicker , } # [pymethods] impl IndexTicker { # [staticmethod] fn from_inner (inner : IndexTicker) -> Self { Self { inner } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn idx_px (& self) -> PyResult < String > { Ok (self . inner . idx_px . clone () . into ()) } # [getter] fn high_24h (& self) -> PyResult < String > { Ok (self . inner . high_24h . clone () . into ()) } # [getter] fn low_24h (& self) -> PyResult < String > { Ok (self . inner . low_24h . clone () . into ()) } # [getter] fn open_24h (& self) -> PyResult < String > { Ok (self . inner . open_24h . clone () . into ()) } # [getter] fn sod_utc0 (& self) -> PyResult < String > { Ok (self . inner . sod_utc0 . clone () . into ()) } # [getter] fn sod_utc8 (& self) -> PyResult < String > { Ok (self . inner . sod_utc8 . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetIndexTickersResponse { inner : venues :: GetIndexTickersResponse , } # [pymethods] impl GetIndexTickersResponse { # [staticmethod] fn from_inner (inner : GetIndexTickersResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_index_tickers <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_index_tickers () . await }) } } # [pyclass] # [derive (Clone)] pub struct TimeData { inner : venues :: TimeData , } # [pymethods] impl TimeData { # [staticmethod] fn from_inner (inner : TimeData) -> Self { Self { inner } } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetTimeResponse { inner : venues :: GetTimeResponse , } # [pymethods] impl GetTimeResponse { # [staticmethod] fn from_inner (inner : GetTimeResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_time <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_time () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOpenInterestRequest { inner : venues :: GetOpenInterestRequest , } # [pymethods] impl GetOpenInterestRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < PyObject > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn underlying (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . underlying . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetOpenInterestResponse { inner : venues :: GetOpenInterestResponse , } # [pymethods] impl GetOpenInterestResponse { # [staticmethod] fn from_inner (inner : GetOpenInterestResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_open_interest <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_open_interest () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMarkPriceCandlesRequest { inner : venues :: GetMarkPriceCandlesRequest , } # [pymethods] impl GetMarkPriceCandlesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn bar (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . bar . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetMarkPriceCandlesResponse { inner : venues :: GetMarkPriceCandlesResponse , } # [pymethods] impl GetMarkPriceCandlesResponse { # [staticmethod] fn from_inner (inner : GetMarkPriceCandlesResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_mark_price_candles <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_mark_price_candles () . await }) } } # [pyclass] # [derive (Clone)] pub struct AmendOrderRequest { inner : venues :: AmendOrderRequest , } # [pymethods] impl AmendOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ord_id . clone () . into ()) } # [getter] fn cl_ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cl_ord_id . clone () . into ()) } # [getter] fn req_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . req_id . clone () . into ()) } # [getter] fn new_sz (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_sz . clone () . into ()) } # [getter] fn new_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_px . clone () . into ()) } # [getter] fn new_tp_trigger_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_tp_trigger_px . clone () . into ()) } # [getter] fn new_tp_ord_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_tp_ord_px . clone () . into ()) } # [getter] fn new_sl_trigger_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_sl_trigger_px . clone () . into ()) } # [getter] fn new_sl_ord_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_sl_ord_px . clone () . into ()) } # [getter] fn new_tp_trigger_px_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_tp_trigger_px_type . clone () . into ()) } # [getter] fn new_sl_trigger_px_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . new_sl_trigger_px_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AmendOrderResponse { inner : venues :: AmendOrderResponse , } # [pymethods] impl AmendOrderResponse { # [staticmethod] fn from_inner (inner : AmendOrderResponse) -> Self { Self { inner } } # [getter] fn cl_ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cl_ord_id . clone () . into ()) } # [getter] fn ord_id (& self) -> PyResult < String > { Ok (self . inner . ord_id . clone () . into ()) } # [getter] fn req_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . req_id . clone () . into ()) } # [getter] fn s_code (& self) -> PyResult < String > { Ok (self . inner . s_code . clone () . into ()) } # [getter] fn s_msg (& self) -> PyResult < String > { Ok (self . inner . s_msg . clone () . into ()) } } # [pymethods] impl RestClient { fn amend_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . amend_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct SetCollateralAssetsRequest { inner : venues :: SetCollateralAssetsRequest , } # [pymethods] impl SetCollateralAssetsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn ccy (& self) -> PyResult < String > { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn coll_assets (& self) -> PyResult < bool > { Ok (self . inner . coll_assets . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SetCollateralAssetsResponse { inner : venues :: SetCollateralAssetsResponse , } # [pymethods] impl SetCollateralAssetsResponse { # [staticmethod] fn from_inner (inner : SetCollateralAssetsResponse) -> Self { Self { inner } } # [getter] fn ccy (& self) -> PyResult < String > { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn coll_assets (& self) -> PyResult < bool > { Ok (self . inner . coll_assets . clone () . into ()) } } # [pymethods] impl RestClient { fn set_collateral_assets <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . set_collateral_assets () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOrderRequest { inner : venues :: GetOrderRequest , } # [pymethods] impl GetOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ord_id . clone () . into ()) } # [getter] fn cl_ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cl_ord_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderDetails { inner : venues :: OrderDetails , } # [pymethods] impl OrderDetails { # [staticmethod] fn from_inner (inner : OrderDetails) -> Self { Self { inner } } # [getter] fn inst_type (& self) -> PyResult < String > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn ord_id (& self) -> PyResult < String > { Ok (self . inner . ord_id . clone () . into ()) } # [getter] fn cl_ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cl_ord_id . clone () . into ()) } # [getter] fn tag (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tag . clone () . into ()) } # [getter] fn px (& self) -> PyResult < String > { Ok (self . inner . px . clone () . into ()) } # [getter] fn sz (& self) -> PyResult < String > { Ok (self . inner . sz . clone () . into ()) } # [getter] fn ord_type (& self) -> PyResult < PyObject > { Ok (self . inner . ord_type . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn pos_side (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pos_side . clone () . into ()) } # [getter] fn td_mode (& self) -> PyResult < String > { Ok (self . inner . td_mode . clone () . into ()) } # [getter] fn acc_fill_sz (& self) -> PyResult < String > { Ok (self . inner . acc_fill_sz . clone () . into ()) } # [getter] fn fill_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . fill_px . clone () . into ()) } # [getter] fn trade_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trade_id . clone () . into ()) } # [getter] fn fill_sz (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . fill_sz . clone () . into ()) } # [getter] fn fill_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . fill_time . clone () . into ()) } # [getter] fn avg_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . avg_px . clone () . into ()) } # [getter] fn state (& self) -> PyResult < String > { Ok (self . inner . state . clone () . into ()) } # [getter] fn lever (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . lever . clone () . into ()) } # [getter] fn tp_trigger_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tp_trigger_px . clone () . into ()) } # [getter] fn tp_ord_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tp_ord_px . clone () . into ()) } # [getter] fn sl_trigger_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sl_trigger_px . clone () . into ()) } # [getter] fn sl_ord_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sl_ord_px . clone () . into ()) } # [getter] fn fee_ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . fee_ccy . clone () . into ()) } # [getter] fn fee (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . fee . clone () . into ()) } # [getter] fn rebate_ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . rebate_ccy . clone () . into ()) } # [getter] fn rebate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . rebate . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn category (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . category . clone () . into ()) } # [getter] fn c_time (& self) -> PyResult < String > { Ok (self . inner . c_time . clone () . into ()) } # [getter] fn u_time (& self) -> PyResult < String > { Ok (self . inner . u_time . clone () . into ()) } # [getter] fn req_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . req_id . clone () . into ()) } # [getter] fn amend_result (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . amend_result . clone () . into ()) } # [getter] fn code (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . msg . clone () . into ()) } } # [pymethods] impl RestClient { fn get_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct SetAutoLoanRequest { inner : venues :: SetAutoLoanRequest , } # [pymethods] impl SetAutoLoanRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn auto_loan (& self) -> PyResult < bool > { Ok (self . inner . auto_loan . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SetAutoLoanResponse { inner : venues :: SetAutoLoanResponse , } # [pymethods] impl SetAutoLoanResponse { # [staticmethod] fn from_inner (inner : SetAutoLoanResponse) -> Self { Self { inner } } # [getter] fn auto_loan (& self) -> PyResult < bool > { Ok (self . inner . auto_loan . clone () . into ()) } } # [pymethods] impl RestClient { fn set_auto_loan <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . set_auto_loan () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOrderHistoryRequest { inner : venues :: GetOrderHistoryRequest , } # [pymethods] impl GetOrderHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn uly (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . uly . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn ord_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ord_type . clone () . into ()) } # [getter] fn state (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . state . clone () . into ()) } # [getter] fn category (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . category . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn begin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . begin . clone () . into ()) } # [getter] fn end (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end . clone () . into ()) } } # [pymethods] impl RestClient { fn get_order_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_order_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetLeverageInfoRequest { inner : venues :: GetLeverageInfoRequest , } # [pymethods] impl GetLeverageInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn mgn_mode (& self) -> PyResult < String > { Ok (self . inner . mgn_mode . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct LeverageInfo { inner : venues :: LeverageInfo , } # [pymethods] impl LeverageInfo { # [staticmethod] fn from_inner (inner : LeverageInfo) -> Self { Self { inner } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn mgn_mode (& self) -> PyResult < String > { Ok (self . inner . mgn_mode . clone () . into ()) } # [getter] fn pos_side (& self) -> PyResult < String > { Ok (self . inner . pos_side . clone () . into ()) } # [getter] fn lever (& self) -> PyResult < String > { Ok (self . inner . lever . clone () . into ()) } } # [pymethods] impl RestClient { fn get_leverage_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_leverage_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMmpConfigRequest { inner : venues :: GetMmpConfigRequest , } # [pymethods] impl GetMmpConfigRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MmpConfig { inner : venues :: MmpConfig , } # [pymethods] impl MmpConfig { # [staticmethod] fn from_inner (inner : MmpConfig) -> Self { Self { inner } } # [getter] fn inst_family (& self) -> PyResult < String > { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn time_interval (& self) -> PyResult < String > { Ok (self . inner . time_interval . clone () . into ()) } # [getter] fn frozen_interval (& self) -> PyResult < String > { Ok (self . inner . frozen_interval . clone () . into ()) } # [getter] fn qty_limit (& self) -> PyResult < String > { Ok (self . inner . qty_limit . clone () . into ()) } } # [pymethods] impl RestClient { fn get_mmp_config <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_mmp_config () . await }) } } # [pyclass] # [derive (Clone)] pub struct MovePositionsRequest { inner : venues :: MovePositionsRequest , } # [pymethods] impl MovePositionsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn sub_acct (& self) -> PyResult < String > { Ok (self . inner . sub_acct . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < String > { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn from (& self) -> PyResult < String > { Ok (self . inner . from . clone () . into ()) } # [getter] fn to (& self) -> PyResult < String > { Ok (self . inner . to . clone () . into ()) } # [getter] fn amt (& self) -> PyResult < String > { Ok (self . inner . amt . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MovePositionsResponse { inner : venues :: MovePositionsResponse , } # [pymethods] impl MovePositionsResponse { # [staticmethod] fn from_inner (inner : MovePositionsResponse) -> Self { Self { inner } } # [getter] fn sub_acct (& self) -> PyResult < String > { Ok (self . inner . sub_acct . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < String > { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn from (& self) -> PyResult < String > { Ok (self . inner . from . clone () . into ()) } # [getter] fn to (& self) -> PyResult < String > { Ok (self . inner . to . clone () . into ()) } # [getter] fn amt (& self) -> PyResult < String > { Ok (self . inner . amt . clone () . into ()) } } # [pymethods] impl RestClient { fn move_positions <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . move_positions () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetSpotBorrowRepayHistoryRequest { inner : venues :: GetSpotBorrowRepayHistoryRequest , } # [pymethods] impl GetSpotBorrowRepayHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SpotBorrowRepayHistory { inner : venues :: SpotBorrowRepayHistory , } # [pymethods] impl SpotBorrowRepayHistory { # [staticmethod] fn from_inner (inner : SpotBorrowRepayHistory) -> Self { Self { inner } } # [getter] fn ccy (& self) -> PyResult < String > { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn side (& self) -> PyResult < String > { Ok (self . inner . side . clone () . into ()) } # [getter] fn amt (& self) -> PyResult < String > { Ok (self . inner . amt . clone () . into ()) } # [getter] fn interest (& self) -> PyResult < String > { Ok (self . inner . interest . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } } # [pymethods] impl RestClient { fn get_spot_borrow_repay_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_spot_borrow_repay_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAccountPositionRiskRequest { inner : venues :: GetAccountPositionRiskRequest , } # [pymethods] impl GetAccountPositionRiskRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountPositionRisk { inner : venues :: AccountPositionRisk , } # [pymethods] impl AccountPositionRisk { # [staticmethod] fn from_inner (inner : AccountPositionRisk) -> Self { Self { inner } } # [getter] fn adj_eq (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . adj_eq . clone () . into ()) } # [getter] fn bal_data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . bal_data . clone () . into ()) } # [getter] fn pos_data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . pos_data . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BalanceRiskData { inner : venues :: BalanceRiskData , } # [pymethods] impl BalanceRiskData { # [staticmethod] fn from_inner (inner : BalanceRiskData) -> Self { Self { inner } } # [getter] fn ccy (& self) -> PyResult < String > { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn eq (& self) -> PyResult < String > { Ok (self . inner . eq . clone () . into ()) } # [getter] fn dis_eq (& self) -> PyResult < String > { Ok (self . inner . dis_eq . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PositionRiskData { inner : venues :: PositionRiskData , } # [pymethods] impl PositionRiskData { # [staticmethod] fn from_inner (inner : PositionRiskData) -> Self { Self { inner } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn inst_type (& self) -> PyResult < String > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn mgn_mode (& self) -> PyResult < String > { Ok (self . inner . mgn_mode . clone () . into ()) } # [getter] fn notional_ccy (& self) -> PyResult < String > { Ok (self . inner . notional_ccy . clone () . into ()) } # [getter] fn notional_usd (& self) -> PyResult < String > { Ok (self . inner . notional_usd . clone () . into ()) } # [getter] fn pos_side (& self) -> PyResult < String > { Ok (self . inner . pos_side . clone () . into ()) } # [getter] fn pos (& self) -> PyResult < String > { Ok (self . inner . pos . clone () . into ()) } # [getter] fn base_pos (& self) -> PyResult < String > { Ok (self . inner . base_pos . clone () . into ()) } # [getter] fn pos_ccy (& self) -> PyResult < String > { Ok (self . inner . pos_ccy . clone () . into ()) } # [getter] fn avg_px (& self) -> PyResult < String > { Ok (self . inner . avg_px . clone () . into ()) } # [getter] fn upl (& self) -> PyResult < String > { Ok (self . inner . upl . clone () . into ()) } # [getter] fn upl_ratio (& self) -> PyResult < String > { Ok (self . inner . upl_ratio . clone () . into ()) } # [getter] fn uly (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . uly . clone () . into ()) } # [getter] fn delta_bs (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . delta_bs . clone () . into ()) } # [getter] fn delta_pa (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . delta_pa . clone () . into ()) } # [getter] fn gamma_bs (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . gamma_bs . clone () . into ()) } # [getter] fn gamma_pa (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . gamma_pa . clone () . into ()) } # [getter] fn theta_bs (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . theta_bs . clone () . into ()) } # [getter] fn theta_pa (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . theta_pa . clone () . into ()) } # [getter] fn vega_bs (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . vega_bs . clone () . into ()) } # [getter] fn vega_pa (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . vega_pa . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < String > { Ok (self . inner . ccy . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_position_risk <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_position_risk () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn base_url (& self) -> PyResult < PyObject > { Ok (self . inner . base_url . clone () . into ()) } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn rate_limiter (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limiter . clone () . into ()) } } # [pymethods] impl RestClient { fn sign_request (& self) -> PyResult < () > { self . inner . sign_request () ; Ok (()) } fn send_request <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . send_request () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetBillsArchiveRequest { inner : venues :: GetBillsArchiveRequest , } # [pymethods] impl GetBillsArchiveRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn mgn_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . mgn_mode . clone () . into ()) } # [getter] fn ct_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ct_type . clone () . into ()) } # [getter] fn r#type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . r#type . clone () . into ()) } # [getter] fn sub_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sub_type . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn begin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . begin . clone () . into ()) } # [getter] fn end (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pymethods] impl RestClient { fn get_bills_archive <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_bills_archive () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMaxSizeRequest { inner : venues :: GetMaxSizeRequest , } # [pymethods] impl GetMaxSizeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn td_mode (& self) -> PyResult < String > { Ok (self . inner . td_mode . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . px . clone () . into ()) } # [getter] fn lever (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . lever . clone () . into ()) } # [getter] fn un_spot_offset (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . un_spot_offset . clone () . into ()) } } # [pymethods] impl RestClient { fn get_max_size <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_max_size () . await }) } } # [pyclass] # [derive (Clone)] pub struct SetMmpConfigRequest { inner : venues :: SetMmpConfigRequest , } # [pymethods] impl SetMmpConfigRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_family (& self) -> PyResult < String > { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn time_interval (& self) -> PyResult < String > { Ok (self . inner . time_interval . clone () . into ()) } # [getter] fn frozen_interval (& self) -> PyResult < String > { Ok (self . inner . frozen_interval . clone () . into ()) } # [getter] fn qty_limit (& self) -> PyResult < String > { Ok (self . inner . qty_limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SetMmpConfigResponse { inner : venues :: SetMmpConfigResponse , } # [pymethods] impl SetMmpConfigResponse { # [staticmethod] fn from_inner (inner : SetMmpConfigResponse) -> Self { Self { inner } } # [getter] fn inst_family (& self) -> PyResult < String > { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn time_interval (& self) -> PyResult < String > { Ok (self . inner . time_interval . clone () . into ()) } # [getter] fn frozen_interval (& self) -> PyResult < String > { Ok (self . inner . frozen_interval . clone () . into ()) } # [getter] fn qty_limit (& self) -> PyResult < String > { Ok (self . inner . qty_limit . clone () . into ()) } } # [pymethods] impl RestClient { fn set_mmp_config <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . set_mmp_config () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetQuickMarginBorrowRepayHistoryRequest { inner : venues :: GetQuickMarginBorrowRepayHistoryRequest , } # [pymethods] impl GetQuickMarginBorrowRepayHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn side (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . side . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn begin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . begin . clone () . into ()) } # [getter] fn end (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct QuickMarginBorrowRepayHistory { inner : venues :: QuickMarginBorrowRepayHistory , } # [pymethods] impl QuickMarginBorrowRepayHistory { # [staticmethod] fn from_inner (inner : QuickMarginBorrowRepayHistory) -> Self { Self { inner } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < String > { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn side (& self) -> PyResult < String > { Ok (self . inner . side . clone () . into ()) } # [getter] fn acc_borrowed (& self) -> PyResult < String > { Ok (self . inner . acc_borrowed . clone () . into ()) } # [getter] fn borrowed (& self) -> PyResult < String > { Ok (self . inner . borrowed . clone () . into ()) } # [getter] fn interest (& self) -> PyResult < String > { Ok (self . inner . interest . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } } # [pymethods] impl RestClient { fn get_quick_margin_borrow_repay_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_quick_margin_borrow_repay_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct MmpResetRequest { inner : venues :: MmpResetRequest , } # [pymethods] impl MmpResetRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_family (& self) -> PyResult < String > { Ok (self . inner . inst_family . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MmpResetResponse { inner : venues :: MmpResetResponse , } # [pymethods] impl MmpResetResponse { # [staticmethod] fn from_inner (inner : MmpResetResponse) -> Self { Self { inner } } # [getter] fn inst_family (& self) -> PyResult < String > { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn result (& self) -> PyResult < bool > { Ok (self . inner . result . clone () . into ()) } } # [pymethods] impl RestClient { fn mmp_reset <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . mmp_reset () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAccountBalanceRequest { inner : venues :: GetAccountBalanceRequest , } # [pymethods] impl GetAccountBalanceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountBalance { inner : venues :: AccountBalance , } # [pymethods] impl AccountBalance { # [staticmethod] fn from_inner (inner : AccountBalance) -> Self { Self { inner } } # [getter] fn u_time (& self) -> PyResult < String > { Ok (self . inner . u_time . clone () . into ()) } # [getter] fn total_eq (& self) -> PyResult < String > { Ok (self . inner . total_eq . clone () . into ()) } # [getter] fn iso_eq (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iso_eq . clone () . into ()) } # [getter] fn adj_eq (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . adj_eq . clone () . into ()) } # [getter] fn ord_froz (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ord_froz . clone () . into ()) } # [getter] fn imr (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . imr . clone () . into ()) } # [getter] fn mmr (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . mmr . clone () . into ()) } # [getter] fn borrowed (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . borrowed . clone () . into ()) } # [getter] fn interest (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . interest . clone () . into ()) } # [getter] fn notional_usd (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . notional_usd . clone () . into ()) } # [getter] fn mgn_ratio (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . mgn_ratio . clone () . into ()) } # [getter] fn details (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . details . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BalanceDetail { inner : venues :: BalanceDetail , } # [pymethods] impl BalanceDetail { # [staticmethod] fn from_inner (inner : BalanceDetail) -> Self { Self { inner } } # [getter] fn ccy (& self) -> PyResult < String > { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn eq (& self) -> PyResult < String > { Ok (self . inner . eq . clone () . into ()) } # [getter] fn cash_bal (& self) -> PyResult < String > { Ok (self . inner . cash_bal . clone () . into ()) } # [getter] fn u_time (& self) -> PyResult < String > { Ok (self . inner . u_time . clone () . into ()) } # [getter] fn iso_eq (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iso_eq . clone () . into ()) } # [getter] fn avail_eq (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . avail_eq . clone () . into ()) } # [getter] fn dis_eq (& self) -> PyResult < String > { Ok (self . inner . dis_eq . clone () . into ()) } # [getter] fn avail_bal (& self) -> PyResult < String > { Ok (self . inner . avail_bal . clone () . into ()) } # [getter] fn frozen_bal (& self) -> PyResult < String > { Ok (self . inner . frozen_bal . clone () . into ()) } # [getter] fn ord_frozen (& self) -> PyResult < String > { Ok (self . inner . ord_frozen . clone () . into ()) } # [getter] fn liab (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . liab . clone () . into ()) } # [getter] fn upl (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . upl . clone () . into ()) } # [getter] fn upl_liab (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . upl_liab . clone () . into ()) } # [getter] fn cross_liab (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cross_liab . clone () . into ()) } # [getter] fn iso_liab (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iso_liab . clone () . into ()) } # [getter] fn mgn_ratio (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . mgn_ratio . clone () . into ()) } # [getter] fn interest (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . interest . clone () . into ()) } # [getter] fn twap (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . twap . clone () . into ()) } # [getter] fn max_loan (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_loan . clone () . into ()) } # [getter] fn eq_usd (& self) -> PyResult < String > { Ok (self . inner . eq_usd . clone () . into ()) } # [getter] fn borrowed (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . borrowed . clone () . into ()) } # [getter] fn strategy_eq (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . strategy_eq . clone () . into ()) } # [getter] fn iso_upl (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iso_upl . clone () . into ()) } # [getter] fn spot_in_use_amt (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . spot_in_use_amt . clone () . into ()) } # [getter] fn strategy_frozen_bal (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . strategy_frozen_bal . clone () . into ()) } # [getter] fn spot_iso_upl (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . spot_iso_upl . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_balance <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_balance () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAccountConfigRequest { inner : venues :: GetAccountConfigRequest , } # [pymethods] impl GetAccountConfigRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pyclass] # [derive (Clone)] pub struct AccountConfig { inner : venues :: AccountConfig , } # [pymethods] impl AccountConfig { # [staticmethod] fn from_inner (inner : AccountConfig) -> Self { Self { inner } } # [getter] fn uid (& self) -> PyResult < String > { Ok (self . inner . uid . clone () . into ()) } # [getter] fn acct_lv (& self) -> PyResult < String > { Ok (self . inner . acct_lv . clone () . into ()) } # [getter] fn pos_mode (& self) -> PyResult < String > { Ok (self . inner . pos_mode . clone () . into ()) } # [getter] fn auto_loan (& self) -> PyResult < bool > { Ok (self . inner . auto_loan . clone () . into ()) } # [getter] fn greeks_type (& self) -> PyResult < String > { Ok (self . inner . greeks_type . clone () . into ()) } # [getter] fn level (& self) -> PyResult < String > { Ok (self . inner . level . clone () . into ()) } # [getter] fn level_tmp (& self) -> PyResult < String > { Ok (self . inner . level_tmp . clone () . into ()) } # [getter] fn ct_iso_mode (& self) -> PyResult < String > { Ok (self . inner . ct_iso_mode . clone () . into ()) } # [getter] fn mgn_iso_mode (& self) -> PyResult < String > { Ok (self . inner . mgn_iso_mode . clone () . into ()) } # [getter] fn spot_offset_type (& self) -> PyResult < String > { Ok (self . inner . spot_offset_type . clone () . into ()) } # [getter] fn role_type (& self) -> PyResult < String > { Ok (self . inner . role_type . clone () . into ()) } # [getter] fn trade_role (& self) -> PyResult < String > { Ok (self . inner . trade_role . clone () . into ()) } # [getter] fn max_size (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_size . clone () . into ()) } # [getter] fn quick_mgn_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quick_mgn_type . clone () . into ()) } # [getter] fn ip (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . ip . clone () . into ()) } # [getter] fn perm (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . perm . clone () . into ()) } # [getter] fn label (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . label . clone () . into ()) } # [getter] fn main_uid (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . main_uid . clone () . into ()) } # [getter] fn op_auth (& self) -> PyResult < String > { Ok (self . inner . op_auth . clone () . into ()) } # [getter] fn kyc_lv (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . kyc_lv . clone () . into ()) } # [getter] fn kyc_lv_new (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . kyc_lv_new . clone () . into ()) } # [getter] fn api_kyc_lv (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . api_kyc_lv . clone () . into ()) } # [getter] fn spot_role_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . spot_role_type . clone () . into ()) } # [getter] fn spot_trading (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . spot_trading . clone () . into ()) } # [getter] fn future_trading (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . future_trading . clone () . into ()) } # [getter] fn option_trading (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . option_trading . clone () . into ()) } # [getter] fn kmp (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . kmp . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_config <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_config () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetGreeksRequest { inner : venues :: GetGreeksRequest , } # [pymethods] impl GetGreeksRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } } # [pymethods] impl RestClient { fn get_greeks <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_greeks () . await }) } } # [pyclass] # [derive (Clone)] pub struct ActivateOptionRequest { inner : venues :: ActivateOptionRequest , } # [pymethods] impl ActivateOptionRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pyclass] # [derive (Clone)] pub struct ActivateOptionResponse { inner : venues :: ActivateOptionResponse , } # [pymethods] impl ActivateOptionResponse { # [staticmethod] fn from_inner (inner : ActivateOptionResponse) -> Self { Self { inner } } # [getter] fn result (& self) -> PyResult < String > { Ok (self . inner . result . clone () . into ()) } } # [pymethods] impl RestClient { fn activate_option <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . activate_option () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetPositionsHistoryRequest { inner : venues :: GetPositionsHistoryRequest , } # [pymethods] impl GetPositionsHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn mgn_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . mgn_mode . clone () . into ()) } # [getter] fn r#type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . r#type . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PositionHistory { inner : venues :: PositionHistory , } # [pymethods] impl PositionHistory { # [staticmethod] fn from_inner (inner : PositionHistory) -> Self { Self { inner } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn inst_type (& self) -> PyResult < String > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn mgn_mode (& self) -> PyResult < String > { Ok (self . inner . mgn_mode . clone () . into ()) } # [getter] fn r#type (& self) -> PyResult < String > { Ok (self . inner . r#type . clone () . into ()) } # [getter] fn c_time (& self) -> PyResult < String > { Ok (self . inner . c_time . clone () . into ()) } # [getter] fn u_time (& self) -> PyResult < String > { Ok (self . inner . u_time . clone () . into ()) } # [getter] fn open_avg_px (& self) -> PyResult < String > { Ok (self . inner . open_avg_px . clone () . into ()) } # [getter] fn close_avg_px (& self) -> PyResult < String > { Ok (self . inner . close_avg_px . clone () . into ()) } # [getter] fn pos_id (& self) -> PyResult < String > { Ok (self . inner . pos_id . clone () . into ()) } # [getter] fn max_pos (& self) -> PyResult < String > { Ok (self . inner . max_pos . clone () . into ()) } # [getter] fn pos_side (& self) -> PyResult < String > { Ok (self . inner . pos_side . clone () . into ()) } # [getter] fn close_pos_sz (& self) -> PyResult < String > { Ok (self . inner . close_pos_sz . clone () . into ()) } # [getter] fn pnl (& self) -> PyResult < String > { Ok (self . inner . pnl . clone () . into ()) } # [getter] fn pnl_ratio (& self) -> PyResult < String > { Ok (self . inner . pnl_ratio . clone () . into ()) } # [getter] fn lever (& self) -> PyResult < String > { Ok (self . inner . lever . clone () . into ()) } # [getter] fn direction (& self) -> PyResult < String > { Ok (self . inner . direction . clone () . into ()) } # [getter] fn trigger_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trigger_px . clone () . into ()) } # [getter] fn uly (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . uly . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < String > { Ok (self . inner . ccy . clone () . into ()) } } # [pymethods] impl RestClient { fn get_positions_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_positions_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetPositionTiersRequest { inner : venues :: GetPositionTiersRequest , } # [pymethods] impl GetPositionTiersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < PyObject > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn td_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . td_mode . clone () . into ()) } # [getter] fn uly (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . uly . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn tier (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tier . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PositionTier { inner : venues :: PositionTier , } # [pymethods] impl PositionTier { # [staticmethod] fn from_inner (inner : PositionTier) -> Self { Self { inner } } # [getter] fn base_ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_ccy . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < String > { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn max_lever (& self) -> PyResult < String > { Ok (self . inner . max_lever . clone () . into ()) } # [getter] fn max_sz (& self) -> PyResult < String > { Ok (self . inner . max_sz . clone () . into ()) } # [getter] fn min_sz (& self) -> PyResult < String > { Ok (self . inner . min_sz . clone () . into ()) } # [getter] fn opt_mgn_factor (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . opt_mgn_factor . clone () . into ()) } # [getter] fn quote_ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quote_ccy . clone () . into ()) } # [getter] fn tier (& self) -> PyResult < String > { Ok (self . inner . tier . clone () . into ()) } # [getter] fn uly (& self) -> PyResult < String > { Ok (self . inner . uly . clone () . into ()) } # [getter] fn imr (& self) -> PyResult < String > { Ok (self . inner . imr . clone () . into ()) } # [getter] fn mmr (& self) -> PyResult < String > { Ok (self . inner . mmr . clone () . into ()) } } # [pymethods] impl RestClient { fn get_position_tiers <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_position_tiers () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMaxWithdrawalRequest { inner : venues :: GetMaxWithdrawalRequest , } # [pymethods] impl GetMaxWithdrawalRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } } # [pymethods] impl RestClient { fn get_max_withdrawal <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_max_withdrawal () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetTradeFeeRequest { inner : venues :: GetTradeFeeRequest , } # [pymethods] impl GetTradeFeeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < PyObject > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn uly (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . uly . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TradeFee { inner : venues :: TradeFee , } # [pymethods] impl TradeFee { # [staticmethod] fn from_inner (inner : TradeFee) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < String > { Ok (self . inner . category . clone () . into ()) } # [getter] fn delivery (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . delivery . clone () . into ()) } # [getter] fn exercise (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . exercise . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn inst_type (& self) -> PyResult < String > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn level (& self) -> PyResult < String > { Ok (self . inner . level . clone () . into ()) } # [getter] fn maker (& self) -> PyResult < String > { Ok (self . inner . maker . clone () . into ()) } # [getter] fn taker (& self) -> PyResult < String > { Ok (self . inner . taker . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } } # [pymethods] impl RestClient { fn get_trade_fee <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_trade_fee () . await }) } } # [pyclass] # [derive (Clone)] pub struct ClosePositionRequest { inner : venues :: ClosePositionRequest , } # [pymethods] impl ClosePositionRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn pos_side (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pos_side . clone () . into ()) } # [getter] fn mgn_mode (& self) -> PyResult < String > { Ok (self . inner . mgn_mode . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn auto_ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . auto_ccy . clone () . into ()) } # [getter] fn cl_ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cl_ord_id . clone () . into ()) } # [getter] fn tag (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tag . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ClosePositionResponse { inner : venues :: ClosePositionResponse , } # [pymethods] impl ClosePositionResponse { # [staticmethod] fn from_inner (inner : ClosePositionResponse) -> Self { Self { inner } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn pos_side (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pos_side . clone () . into ()) } # [getter] fn cl_ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cl_ord_id . clone () . into ()) } # [getter] fn tag (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tag . clone () . into ()) } } # [pymethods] impl RestClient { fn close_position <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . close_position () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetEconomicCalendarRequest { inner : venues :: GetEconomicCalendarRequest , } # [pymethods] impl GetEconomicCalendarRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn region (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . region . clone () . into ()) } # [getter] fn importance (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . importance . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetEconomicCalendarResponse { inner : venues :: GetEconomicCalendarResponse , } # [pymethods] impl GetEconomicCalendarResponse { # [staticmethod] fn from_inner (inner : GetEconomicCalendarResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pymethods] impl RestClient { fn get_economic_calendar <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_economic_calendar () . await }) } } # [pyclass] # [derive (Clone)] pub struct PlaceBatchOrdersRequest { inner : venues :: PlaceBatchOrdersRequest , } # [pymethods] impl PlaceBatchOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn orders (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . orders . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PlaceBatchOrdersResponse { inner : venues :: PlaceBatchOrdersResponse , } # [pymethods] impl PlaceBatchOrdersResponse { # [staticmethod] fn from_inner (inner : PlaceBatchOrdersResponse) -> Self { Self { inner } } # [getter] fn cl_ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cl_ord_id . clone () . into ()) } # [getter] fn ord_id (& self) -> PyResult < String > { Ok (self . inner . ord_id . clone () . into ()) } # [getter] fn tag (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tag . clone () . into ()) } # [getter] fn s_code (& self) -> PyResult < String > { Ok (self . inner . s_code . clone () . into ()) } # [getter] fn s_msg (& self) -> PyResult < String > { Ok (self . inner . s_msg . clone () . into ()) } } # [pymethods] impl RestClient { fn place_batch_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . place_batch_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderRequest { inner : venues :: CancelOrderRequest , } # [pymethods] impl CancelOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ord_id . clone () . into ()) } # [getter] fn cl_ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cl_ord_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderResponse { inner : venues :: CancelOrderResponse , } # [pymethods] impl CancelOrderResponse { # [staticmethod] fn from_inner (inner : CancelOrderResponse) -> Self { Self { inner } } # [getter] fn cl_ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cl_ord_id . clone () . into ()) } # [getter] fn ord_id (& self) -> PyResult < String > { Ok (self . inner . ord_id . clone () . into ()) } # [getter] fn s_code (& self) -> PyResult < String > { Ok (self . inner . s_code . clone () . into ()) } # [getter] fn s_msg (& self) -> PyResult < String > { Ok (self . inner . s_msg . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAccountSwitchPrecheckRequest { inner : venues :: GetAccountSwitchPrecheckRequest , } # [pymethods] impl GetAccountSwitchPrecheckRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn acct_lv (& self) -> PyResult < String > { Ok (self . inner . acct_lv . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountSwitchPrecheck { inner : venues :: AccountSwitchPrecheck , } # [pymethods] impl AccountSwitchPrecheck { # [staticmethod] fn from_inner (inner : AccountSwitchPrecheck) -> Self { Self { inner } } # [getter] fn can_switch (& self) -> PyResult < bool > { Ok (self . inner . can_switch . clone () . into ()) } # [getter] fn switch_reason (& self) -> PyResult < String > { Ok (self . inner . switch_reason . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_switch_precheck <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_switch_precheck () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetFillsRequest { inner : venues :: GetFillsRequest , } # [pymethods] impl GetFillsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn uly (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . uly . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ord_id . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pymethods] impl RestClient { fn get_fills <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_fills () . await }) } } # [pyclass] # [derive (Clone)] pub struct PlaceOrderRequest { inner : venues :: PlaceOrderRequest , } # [pymethods] impl PlaceOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn td_mode (& self) -> PyResult < String > { Ok (self . inner . td_mode . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn cl_ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cl_ord_id . clone () . into ()) } # [getter] fn tag (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tag . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn ord_type (& self) -> PyResult < PyObject > { Ok (self . inner . ord_type . clone () . into ()) } # [getter] fn sz (& self) -> PyResult < String > { Ok (self . inner . sz . clone () . into ()) } # [getter] fn px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . px . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn tgt_ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tgt_ccy . clone () . into ()) } # [getter] fn attach_algo_ords (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . attach_algo_ords . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AttachedAlgoOrder { inner : venues :: AttachedAlgoOrder , } # [pymethods] impl AttachedAlgoOrder { # [staticmethod] fn from_inner (inner : AttachedAlgoOrder) -> Self { Self { inner } } # [getter] fn attach_algo_cl_ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . attach_algo_cl_ord_id . clone () . into ()) } # [getter] fn tp_trigger_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tp_trigger_px . clone () . into ()) } # [getter] fn tp_ord_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tp_ord_px . clone () . into ()) } # [getter] fn tp_ord_kind (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tp_ord_kind . clone () . into ()) } # [getter] fn sl_trigger_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sl_trigger_px . clone () . into ()) } # [getter] fn sl_ord_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sl_ord_px . clone () . into ()) } # [getter] fn sl_ord_kind (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sl_ord_kind . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PlaceOrderResponse { inner : venues :: PlaceOrderResponse , } # [pymethods] impl PlaceOrderResponse { # [staticmethod] fn from_inner (inner : PlaceOrderResponse) -> Self { Self { inner } } # [getter] fn cl_ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cl_ord_id . clone () . into ()) } # [getter] fn ord_id (& self) -> PyResult < String > { Ok (self . inner . ord_id . clone () . into ()) } # [getter] fn tag (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tag . clone () . into ()) } # [getter] fn s_code (& self) -> PyResult < String > { Ok (self . inner . s_code . clone () . into ()) } # [getter] fn s_msg (& self) -> PyResult < String > { Ok (self . inner . s_msg . clone () . into ()) } } # [pymethods] impl RestClient { fn place_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . place_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelBatchOrdersResponse { inner : venues :: CancelBatchOrdersResponse , } # [pymethods] impl CancelBatchOrdersResponse { # [staticmethod] fn from_inner (inner : CancelBatchOrdersResponse) -> Self { Self { inner } } # [getter] fn cl_ord_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cl_ord_id . clone () . into ()) } # [getter] fn ord_id (& self) -> PyResult < String > { Ok (self . inner . ord_id . clone () . into ()) } # [getter] fn s_code (& self) -> PyResult < String > { Ok (self . inner . s_code . clone () . into ()) } # [getter] fn s_msg (& self) -> PyResult < String > { Ok (self . inner . s_msg . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_batch_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_batch_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMaxLoanRequest { inner : venues :: GetMaxLoanRequest , } # [pymethods] impl GetMaxLoanRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn mgn_mode (& self) -> PyResult < String > { Ok (self . inner . mgn_mode . clone () . into ()) } # [getter] fn mgn_ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . mgn_ccy . clone () . into ()) } } # [pymethods] impl RestClient { fn get_max_loan <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_max_loan () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAdjustLeverageInfoRequest { inner : venues :: GetAdjustLeverageInfoRequest , } # [pymethods] impl GetAdjustLeverageInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn mgn_mode (& self) -> PyResult < String > { Ok (self . inner . mgn_mode . clone () . into ()) } # [getter] fn pos_side (& self) -> PyResult < String > { Ok (self . inner . pos_side . clone () . into ()) } # [getter] fn lever (& self) -> PyResult < String > { Ok (self . inner . lever . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AdjustLeverageInfo { inner : venues :: AdjustLeverageInfo , } # [pymethods] impl AdjustLeverageInfo { # [staticmethod] fn from_inner (inner : AdjustLeverageInfo) -> Self { Self { inner } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn lever (& self) -> PyResult < String > { Ok (self . inner . lever . clone () . into ()) } # [getter] fn pos_side (& self) -> PyResult < String > { Ok (self . inner . pos_side . clone () . into ()) } # [getter] fn max_pos_sz (& self) -> PyResult < String > { Ok (self . inner . max_pos_sz . clone () . into ()) } # [getter] fn max_pos_sz_usd (& self) -> PyResult < String > { Ok (self . inner . max_pos_sz_usd . clone () . into ()) } # [getter] fn pos (& self) -> PyResult < String > { Ok (self . inner . pos . clone () . into ()) } # [getter] fn avail_pos_sz (& self) -> PyResult < String > { Ok (self . inner . avail_pos_sz . clone () . into ()) } } # [pymethods] impl RestClient { fn get_adjust_leverage_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_adjust_leverage_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetRiskStateRequest { inner : venues :: GetRiskStateRequest , } # [pymethods] impl GetRiskStateRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } } # [pymethods] impl RestClient { fn get_risk_state <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_risk_state () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetCollateralAssetsRequest { inner : venues :: GetCollateralAssetsRequest , } # [pymethods] impl GetCollateralAssetsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } } # [pymethods] impl RestClient { fn get_collateral_assets <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_collateral_assets () . await }) } } # [pyclass] # [derive (Clone)] pub struct SetIsolatedModeRequest { inner : venues :: SetIsolatedModeRequest , } # [pymethods] impl SetIsolatedModeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < String > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn is_auto (& self) -> PyResult < String > { Ok (self . inner . is_auto . clone () . into ()) } # [getter] fn type_ (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . type_ . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SetIsolatedModeResponse { inner : venues :: SetIsolatedModeResponse , } # [pymethods] impl SetIsolatedModeResponse { # [staticmethod] fn from_inner (inner : SetIsolatedModeResponse) -> Self { Self { inner } } # [getter] fn inst_type (& self) -> PyResult < String > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn is_auto (& self) -> PyResult < String > { Ok (self . inner . is_auto . clone () . into ()) } } # [pymethods] impl RestClient { fn set_isolated_mode <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . set_isolated_mode () . await }) } } # [pyclass] # [derive (Clone)] pub struct PostBillsHistoryArchiveRequest { inner : venues :: PostBillsHistoryArchiveRequest , } # [pymethods] impl PostBillsHistoryArchiveRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn year (& self) -> PyResult < String > { Ok (self . inner . year . clone () . into ()) } # [getter] fn quarter (& self) -> PyResult < String > { Ok (self . inner . quarter . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PostBillsHistoryArchiveResponse { inner : venues :: PostBillsHistoryArchiveResponse , } # [pymethods] impl PostBillsHistoryArchiveResponse { # [staticmethod] fn from_inner (inner : PostBillsHistoryArchiveResponse) -> Self { Self { inner } } # [getter] fn result (& self) -> PyResult < String > { Ok (self . inner . result . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetBillsHistoryArchiveRequest { inner : venues :: GetBillsHistoryArchiveRequest , } # [pymethods] impl GetBillsHistoryArchiveRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn file_id (& self) -> PyResult < String > { Ok (self . inner . file_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetBillsHistoryArchiveResponse { inner : venues :: GetBillsHistoryArchiveResponse , } # [pymethods] impl GetBillsHistoryArchiveResponse { # [staticmethod] fn from_inner (inner : GetBillsHistoryArchiveResponse) -> Self { Self { inner } } # [getter] fn file_id (& self) -> PyResult < String > { Ok (self . inner . file_id . clone () . into ()) } # [getter] fn file_name (& self) -> PyResult < String > { Ok (self . inner . file_name . clone () . into ()) } # [getter] fn file_size (& self) -> PyResult < String > { Ok (self . inner . file_size . clone () . into ()) } # [getter] fn download_link (& self) -> PyResult < String > { Ok (self . inner . download_link . clone () . into ()) } # [getter] fn link_gen_ts (& self) -> PyResult < String > { Ok (self . inner . link_gen_ts . clone () . into ()) } # [getter] fn link_exp_ts (& self) -> PyResult < String > { Ok (self . inner . link_exp_ts . clone () . into ()) } } # [pymethods] impl RestClient { fn post_bills_history_archive <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . post_bills_history_archive () . await }) } fn get_bills_history_archive <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_bills_history_archive () . await }) } } # [pyclass] # [derive (Clone)] pub struct SetGreeksRequest { inner : venues :: SetGreeksRequest , } # [pymethods] impl SetGreeksRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn greeks_type (& self) -> PyResult < String > { Ok (self . inner . greeks_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SetGreeksResponse { inner : venues :: SetGreeksResponse , } # [pymethods] impl SetGreeksResponse { # [staticmethod] fn from_inner (inner : SetGreeksResponse) -> Self { Self { inner } } # [getter] fn greeks_type (& self) -> PyResult < String > { Ok (self . inner . greeks_type . clone () . into ()) } } # [pymethods] impl RestClient { fn set_greeks <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . set_greeks () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMaxAvailSizeRequest { inner : venues :: GetMaxAvailSizeRequest , } # [pymethods] impl GetMaxAvailSizeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn td_mode (& self) -> PyResult < String > { Ok (self . inner . td_mode . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn un_spot_offset (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . un_spot_offset . clone () . into ()) } # [getter] fn quick_mgn_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quick_mgn_type . clone () . into ()) } } # [pymethods] impl RestClient { fn get_max_avail_size <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_max_avail_size () . await }) } } # [pyclass] # [derive (Clone)] pub struct SetAutoRepayRequest { inner : venues :: SetAutoRepayRequest , } # [pymethods] impl SetAutoRepayRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn auto_repay (& self) -> PyResult < bool > { Ok (self . inner . auto_repay . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SetAutoRepayResponse { inner : venues :: SetAutoRepayResponse , } # [pymethods] impl SetAutoRepayResponse { # [staticmethod] fn from_inner (inner : SetAutoRepayResponse) -> Self { Self { inner } } # [getter] fn auto_repay (& self) -> PyResult < bool > { Ok (self . inner . auto_repay . clone () . into ()) } } # [pymethods] impl RestClient { fn set_auto_repay <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . set_auto_repay () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetInterestAccruedRequest { inner : venues :: GetInterestAccruedRequest , } # [pymethods] impl GetInterestAccruedRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn mgn_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . mgn_mode . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pymethods] impl RestClient { fn get_interest_accrued <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_interest_accrued () . await }) } } # [pyclass] # [derive (Clone)] pub struct QuickMarginBorrowRepayRequest { inner : venues :: QuickMarginBorrowRepayRequest , } # [pymethods] impl QuickMarginBorrowRepayRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < String > { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn side (& self) -> PyResult < String > { Ok (self . inner . side . clone () . into ()) } # [getter] fn amt (& self) -> PyResult < String > { Ok (self . inner . amt . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct QuickMarginBorrowRepayResponse { inner : venues :: QuickMarginBorrowRepayResponse , } # [pymethods] impl QuickMarginBorrowRepayResponse { # [staticmethod] fn from_inner (inner : QuickMarginBorrowRepayResponse) -> Self { Self { inner } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < String > { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn side (& self) -> PyResult < String > { Ok (self . inner . side . clone () . into ()) } # [getter] fn amt (& self) -> PyResult < String > { Ok (self . inner . amt . clone () . into ()) } # [getter] fn result (& self) -> PyResult < bool > { Ok (self . inner . result . clone () . into ()) } } # [pymethods] impl RestClient { fn quick_margin_borrow_repay <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . quick_margin_borrow_repay () . await }) } } # [pyclass] # [derive (Clone)] pub struct SpotManualBorrowRepayRequest { inner : venues :: SpotManualBorrowRepayRequest , } # [pymethods] impl SpotManualBorrowRepayRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn ccy (& self) -> PyResult < String > { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn side (& self) -> PyResult < String > { Ok (self . inner . side . clone () . into ()) } # [getter] fn amt (& self) -> PyResult < String > { Ok (self . inner . amt . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SpotManualBorrowRepayResponse { inner : venues :: SpotManualBorrowRepayResponse , } # [pymethods] impl SpotManualBorrowRepayResponse { # [staticmethod] fn from_inner (inner : SpotManualBorrowRepayResponse) -> Self { Self { inner } } # [getter] fn ccy (& self) -> PyResult < String > { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn side (& self) -> PyResult < String > { Ok (self . inner . side . clone () . into ()) } # [getter] fn amt (& self) -> PyResult < String > { Ok (self . inner . amt . clone () . into ()) } # [getter] fn result (& self) -> PyResult < bool > { Ok (self . inner . result . clone () . into ()) } } # [pymethods] impl RestClient { fn spot_manual_borrow_repay <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . spot_manual_borrow_repay () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetPendingOrdersRequest { inner : venues :: GetPendingOrdersRequest , } # [pymethods] impl GetPendingOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn uly (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . uly . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn ord_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ord_type . clone () . into ()) } # [getter] fn state (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . state . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pymethods] impl RestClient { fn get_pending_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_pending_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct SetAccountLevelRequest { inner : venues :: SetAccountLevelRequest , } # [pymethods] impl SetAccountLevelRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn acct_lv (& self) -> PyResult < String > { Ok (self . inner . acct_lv . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SetAccountLevelResponse { inner : venues :: SetAccountLevelResponse , } # [pymethods] impl SetAccountLevelResponse { # [staticmethod] fn from_inner (inner : SetAccountLevelResponse) -> Self { Self { inner } } # [getter] fn acct_lv (& self) -> PyResult < String > { Ok (self . inner . acct_lv . clone () . into ()) } } # [pymethods] impl RestClient { fn set_account_level <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . set_account_level () . await }) } } # [pyclass] # [derive (Clone)] pub struct AdjustPositionMarginBalanceRequest { inner : venues :: AdjustPositionMarginBalanceRequest , } # [pymethods] impl AdjustPositionMarginBalanceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn pos_side (& self) -> PyResult < String > { Ok (self . inner . pos_side . clone () . into ()) } # [getter] fn r#type (& self) -> PyResult < String > { Ok (self . inner . r#type . clone () . into ()) } # [getter] fn amt (& self) -> PyResult < String > { Ok (self . inner . amt . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn auto (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . auto . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AdjustPositionMarginBalanceResponse { inner : venues :: AdjustPositionMarginBalanceResponse , } # [pymethods] impl AdjustPositionMarginBalanceResponse { # [staticmethod] fn from_inner (inner : AdjustPositionMarginBalanceResponse) -> Self { Self { inner } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn pos_side (& self) -> PyResult < String > { Ok (self . inner . pos_side . clone () . into ()) } # [getter] fn amt (& self) -> PyResult < String > { Ok (self . inner . amt . clone () . into ()) } # [getter] fn r#type (& self) -> PyResult < String > { Ok (self . inner . r#type . clone () . into ()) } } # [pymethods] impl RestClient { fn adjust_position_margin_balance <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . adjust_position_margin_balance () . await }) } } # [pyclass] # [derive (Clone)] pub struct SetLeverageRequest { inner : venues :: SetLeverageRequest , } # [pymethods] impl SetLeverageRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn mgn_mode (& self) -> PyResult < String > { Ok (self . inner . mgn_mode . clone () . into ()) } # [getter] fn lever (& self) -> PyResult < String > { Ok (self . inner . lever . clone () . into ()) } # [getter] fn pos_side (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pos_side . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SetLeverageResponse { inner : venues :: SetLeverageResponse , } # [pymethods] impl SetLeverageResponse { # [staticmethod] fn from_inner (inner : SetLeverageResponse) -> Self { Self { inner } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn mgn_mode (& self) -> PyResult < String > { Ok (self . inner . mgn_mode . clone () . into ()) } # [getter] fn lever (& self) -> PyResult < String > { Ok (self . inner . lever . clone () . into ()) } # [getter] fn pos_side (& self) -> PyResult < String > { Ok (self . inner . pos_side . clone () . into ()) } } # [pymethods] impl RestClient { fn set_leverage <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . set_leverage () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetInterestLimitsRequest { inner : venues :: GetInterestLimitsRequest , } # [pymethods] impl GetInterestLimitsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } } # [pymethods] impl RestClient { fn get_interest_limits <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_interest_limits () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetAccountInstrumentsRequest { inner : venues :: GetAccountInstrumentsRequest , } # [pymethods] impl GetAccountInstrumentsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn uly (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . uly . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AccountInstrument { inner : venues :: AccountInstrument , } # [pymethods] impl AccountInstrument { # [staticmethod] fn from_inner (inner : AccountInstrument) -> Self { Self { inner } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn inst_type (& self) -> PyResult < String > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn uly (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . uly . clone () . into ()) } # [getter] fn inst_family (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_family . clone () . into ()) } # [getter] fn category (& self) -> PyResult < String > { Ok (self . inner . category . clone () . into ()) } # [getter] fn base_ccy (& self) -> PyResult < String > { Ok (self . inner . base_ccy . clone () . into ()) } # [getter] fn quote_ccy (& self) -> PyResult < String > { Ok (self . inner . quote_ccy . clone () . into ()) } # [getter] fn settle_ccy (& self) -> PyResult < String > { Ok (self . inner . settle_ccy . clone () . into ()) } # [getter] fn ct_val (& self) -> PyResult < String > { Ok (self . inner . ct_val . clone () . into ()) } # [getter] fn ct_mult (& self) -> PyResult < String > { Ok (self . inner . ct_mult . clone () . into ()) } # [getter] fn ct_val_ccy (& self) -> PyResult < String > { Ok (self . inner . ct_val_ccy . clone () . into ()) } # [getter] fn opt_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . opt_type . clone () . into ()) } # [getter] fn stk (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stk . clone () . into ()) } # [getter] fn list_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . list_time . clone () . into ()) } # [getter] fn exp_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . exp_time . clone () . into ()) } # [getter] fn lever (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . lever . clone () . into ()) } # [getter] fn tick_sz (& self) -> PyResult < String > { Ok (self . inner . tick_sz . clone () . into ()) } # [getter] fn lot_sz (& self) -> PyResult < String > { Ok (self . inner . lot_sz . clone () . into ()) } # [getter] fn min_sz (& self) -> PyResult < String > { Ok (self . inner . min_sz . clone () . into ()) } # [getter] fn ct_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ct_type . clone () . into ()) } # [getter] fn alias (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . alias . clone () . into ()) } # [getter] fn state (& self) -> PyResult < String > { Ok (self . inner . state . clone () . into ()) } # [getter] fn max_lmsr (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_lmsr . clone () . into ()) } # [getter] fn max_twap_sz (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_twap_sz . clone () . into ()) } # [getter] fn max_trigger_sz (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_trigger_sz . clone () . into ()) } # [getter] fn max_stop_sz (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_stop_sz . clone () . into ()) } } # [pymethods] impl RestClient { fn get_account_instruments <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_account_instruments () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetInterestRateRequest { inner : venues :: GetInterestRateRequest , } # [pymethods] impl GetInterestRateRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } } # [pymethods] impl RestClient { fn get_interest_rate <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_interest_rate () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetBillsRequest { inner : venues :: GetBillsRequest , } # [pymethods] impl GetBillsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn mgn_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . mgn_mode . clone () . into ()) } # [getter] fn ct_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . ct_type . clone () . into ()) } # [getter] fn r#type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . r#type . clone () . into ()) } # [getter] fn sub_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sub_type . clone () . into ()) } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn begin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . begin . clone () . into ()) } # [getter] fn end (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pymethods] impl RestClient { fn get_bills <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_bills () . await }) } } # [pyclass] # [derive (Clone)] pub struct SetPositionModeRequest { inner : venues :: SetPositionModeRequest , } # [pymethods] impl SetPositionModeRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn pos_mode (& self) -> PyResult < String > { Ok (self . inner . pos_mode . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SetPositionModeResponse { inner : venues :: SetPositionModeResponse , } # [pymethods] impl SetPositionModeResponse { # [staticmethod] fn from_inner (inner : SetPositionModeResponse) -> Self { Self { inner } } # [getter] fn pos_mode (& self) -> PyResult < String > { Ok (self . inner . pos_mode . clone () . into ()) } } # [pymethods] impl RestClient { fn set_position_mode <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . set_position_mode () . await }) } } # [pyclass] # [derive (Clone)] pub struct OkxApiResponse { inner : venues :: OkxApiResponse , } # [pymethods] impl OkxApiResponse { # [staticmethod] fn from_inner (inner : OkxApiResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } # [getter] fn data (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . data . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetPositionsRequest { inner : venues :: GetPositionsRequest , } # [pymethods] impl GetPositionsRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn inst_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn pos_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pos_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Position { inner : venues :: Position , } # [pymethods] impl Position { # [staticmethod] fn from_inner (inner : Position) -> Self { Self { inner } } # [getter] fn inst_type (& self) -> PyResult < String > { Ok (self . inner . inst_type . clone () . into ()) } # [getter] fn mgn_mode (& self) -> PyResult < String > { Ok (self . inner . mgn_mode . clone () . into ()) } # [getter] fn pos_id (& self) -> PyResult < String > { Ok (self . inner . pos_id . clone () . into ()) } # [getter] fn pos_side (& self) -> PyResult < String > { Ok (self . inner . pos_side . clone () . into ()) } # [getter] fn pos (& self) -> PyResult < String > { Ok (self . inner . pos . clone () . into ()) } # [getter] fn base_ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_ccy . clone () . into ()) } # [getter] fn quote_ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . quote_ccy . clone () . into ()) } # [getter] fn pos_ccy (& self) -> PyResult < String > { Ok (self . inner . pos_ccy . clone () . into ()) } # [getter] fn avg_px (& self) -> PyResult < String > { Ok (self . inner . avg_px . clone () . into ()) } # [getter] fn upl (& self) -> PyResult < String > { Ok (self . inner . upl . clone () . into ()) } # [getter] fn upl_ratio (& self) -> PyResult < String > { Ok (self . inner . upl_ratio . clone () . into ()) } # [getter] fn upl_last_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . upl_last_px . clone () . into ()) } # [getter] fn upl_ratio_last_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . upl_ratio_last_px . clone () . into ()) } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn lever (& self) -> PyResult < String > { Ok (self . inner . lever . clone () . into ()) } # [getter] fn liq_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . liq_px . clone () . into ()) } # [getter] fn mark_px (& self) -> PyResult < String > { Ok (self . inner . mark_px . clone () . into ()) } # [getter] fn imr (& self) -> PyResult < String > { Ok (self . inner . imr . clone () . into ()) } # [getter] fn margin (& self) -> PyResult < String > { Ok (self . inner . margin . clone () . into ()) } # [getter] fn mgn_ratio (& self) -> PyResult < String > { Ok (self . inner . mgn_ratio . clone () . into ()) } # [getter] fn mmr (& self) -> PyResult < String > { Ok (self . inner . mmr . clone () . into ()) } # [getter] fn liab (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . liab . clone () . into ()) } # [getter] fn liab_ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . liab_ccy . clone () . into ()) } # [getter] fn interest (& self) -> PyResult < String > { Ok (self . inner . interest . clone () . into ()) } # [getter] fn trade_id (& self) -> PyResult < String > { Ok (self . inner . trade_id . clone () . into ()) } # [getter] fn opt_val (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . opt_val . clone () . into ()) } # [getter] fn pending_close_ord_liab_val (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pending_close_ord_liab_val . clone () . into ()) } # [getter] fn notional_ccy (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . notional_ccy . clone () . into ()) } # [getter] fn notional_usd (& self) -> PyResult < String > { Ok (self . inner . notional_usd . clone () . into ()) } # [getter] fn adl (& self) -> PyResult < String > { Ok (self . inner . adl . clone () . into ()) } # [getter] fn ccy (& self) -> PyResult < String > { Ok (self . inner . ccy . clone () . into ()) } # [getter] fn last (& self) -> PyResult < String > { Ok (self . inner . last . clone () . into ()) } # [getter] fn idx_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . idx_px . clone () . into ()) } # [getter] fn usd_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . usd_px . clone () . into ()) } # [getter] fn b_twap (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . b_twap . clone () . into ()) } # [getter] fn b_twap_ratio (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . b_twap_ratio . clone () . into ()) } # [getter] fn mark_px_open (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . mark_px_open . clone () . into ()) } # [getter] fn c_time (& self) -> PyResult < String > { Ok (self . inner . c_time . clone () . into ()) } # [getter] fn u_time (& self) -> PyResult < String > { Ok (self . inner . u_time . clone () . into ()) } # [getter] fn realized_pnl (& self) -> PyResult < String > { Ok (self . inner . realized_pnl . clone () . into ()) } # [getter] fn pnl_ratio (& self) -> PyResult < String > { Ok (self . inner . pnl_ratio . clone () . into ()) } # [getter] fn fee (& self) -> PyResult < String > { Ok (self . inner . fee . clone () . into ()) } # [getter] fn funding_fee (& self) -> PyResult < String > { Ok (self . inner . funding_fee . clone () . into ()) } # [getter] fn liq_penalty (& self) -> PyResult < String > { Ok (self . inner . liq_penalty . clone () . into ()) } # [getter] fn close_order_algo (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . close_order_algo . clone () . into ()) } # [getter] fn biz_ref_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . biz_ref_id . clone () . into ()) } # [getter] fn biz_ref_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . biz_ref_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CloseOrderAlgo { inner : venues :: CloseOrderAlgo , } # [pymethods] impl CloseOrderAlgo { # [staticmethod] fn from_inner (inner : CloseOrderAlgo) -> Self { Self { inner } } # [getter] fn algo_id (& self) -> PyResult < String > { Ok (self . inner . algo_id . clone () . into ()) } # [getter] fn sl_trigger_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sl_trigger_px . clone () . into ()) } # [getter] fn sl_ord_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sl_ord_px . clone () . into ()) } # [getter] fn tp_trigger_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tp_trigger_px . clone () . into ()) } # [getter] fn tp_ord_px (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tp_ord_px . clone () . into ()) } # [getter] fn close_pos_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . close_pos_type . clone () . into ()) } } # [pymethods] impl RestClient { fn get_positions <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_positions () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMovePositionsHistoryRequest { inner : venues :: GetMovePositionsHistoryRequest , } # [pymethods] impl GetMovePositionsHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn after (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . after . clone () . into ()) } # [getter] fn before (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . before . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn inst_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . inst_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MovePositionsHistory { inner : venues :: MovePositionsHistory , } # [pymethods] impl MovePositionsHistory { # [staticmethod] fn from_inner (inner : MovePositionsHistory) -> Self { Self { inner } } # [getter] fn inst_id (& self) -> PyResult < String > { Ok (self . inner . inst_id . clone () . into ()) } # [getter] fn from (& self) -> PyResult < String > { Ok (self . inner . from . clone () . into ()) } # [getter] fn to (& self) -> PyResult < String > { Ok (self . inner . to . clone () . into ()) } # [getter] fn amt (& self) -> PyResult < String > { Ok (self . inner . amt . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < String > { Ok (self . inner . ts . clone () . into ()) } } # [pymethods] impl RestClient { fn get_move_positions_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_move_positions_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct ErrorResponse { inner : venues :: ErrorResponse , } # [pymethods] impl ErrorResponse { # [staticmethod] fn from_inner (inner : ErrorResponse) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < String > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum EndpointType { PublicMarketData , PublicTradingData , PrivateTrading , PrivateAccount , PublicInsuranceFund , PublicMarketDataHistory , } # [pyclass] # [derive (Clone)] pub struct RateLimit { inner : venues :: RateLimit , } # [pymethods] impl RateLimit { # [staticmethod] fn from_inner (inner : RateLimit) -> Self { Self { inner } } # [getter] fn max_requests (& self) -> PyResult < u64 > { Ok (self . inner . max_requests . clone () . into ()) } # [getter] fn window (& self) -> PyResult < PyObject > { Ok (self . inner . window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimiter { inner : venues :: RateLimiter , } # [pymethods] impl RateLimiter { # [staticmethod] fn from_inner (inner : RateLimiter) -> Self { Self { inner } } } # [doc = " Create the Python module for okx"] pub fn create_module (py : Python) -> PyResult <& PyModule > { let m = PyModule :: new (py , "okx") ?; Ok (m) }