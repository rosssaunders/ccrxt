# ! [doc = " Python bindings for bybit venue"] # ! [doc = ""] # ! [doc = " This module is automatically generated from the Rust source code."] # ! [doc = " Do not edit this file directly."] use pyo3 :: prelude ::*; use pyo3_asyncio ; use venues ; # [pyclass] # [derive (Clone)] pub enum AccountType { Spot , Contract , Unified , } # [pyclass] # [derive (Clone)] pub enum Category { Linear , Inverse , Spot , Option , } # [pyclass] # [derive (Clone)] pub enum Side { Buy , Sell , } # [pyclass] # [derive (Clone)] pub enum OrderType { Market , Limit , } # [pyclass] # [derive (Clone)] pub enum TimeInForce { GTC , IOC , FOK , PostOnly , RPI , } # [pyclass] # [derive (Clone)] pub enum PositionIdx { OneWay , HedgeBuy , HedgeSell , } # [pyclass] # [derive (Clone)] pub enum TriggerBy { LastPrice , IndexPrice , MarkPrice , } # [pyclass] # [derive (Clone)] pub enum OrderFilter { Order , TpSlOrder , StopOrder , } # [pyclass] # [derive (Clone)] pub enum MarketUnit { BaseCoin , QuoteCoin , } # [pyclass] # [derive (Clone)] pub enum SlippageToleranceType { TickSize , Percent , } # [pyclass] # [derive (Clone)] pub enum SmpType { None , CancelMaker , CancelTaker , CancelBoth , } # [pyclass] # [derive (Clone)] pub enum TpSlMode { Full , Partial , } # [pyclass] # [derive (Clone)] pub enum OrderStatus { New , PartiallyFilled , Untriggered , Triggered , Filled , Cancelled , Rejected , Deactivated , } # [pyclass] # [derive (Clone)] pub enum ExecType { Trade , Funding , AdlTrade , BustTrade , Delivery , BlockTrade , } # [pyclass] # [derive (Clone)] pub enum StopOrderType { Stop , TrailingStop , PartialTrailingStop , } # [pyclass] # [derive (Clone)] pub enum Interval { Min1 , Min3 , Min5 , Min15 , Min30 , Min60 , Min120 , Min240 , Min360 , Min720 , Day , Week , Month , } # [pyclass] # [derive (Clone)] pub enum OptionType { Call , Put , } # [pyclass] # [derive (Clone)] pub struct GetIndexPriceKlineRequest { inner : venues :: GetIndexPriceKlineRequest , } # [pymethods] impl GetIndexPriceKlineRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start . clone () . into ()) } # [getter] fn end (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct IndexPriceKline { inner : venues :: IndexPriceKline , } # [pymethods] impl IndexPriceKline { # [staticmethod] fn from_inner (inner : IndexPriceKline) -> Self { Self { inner } } # [getter] fn start_time (& self) -> PyResult < String > { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn open_price (& self) -> PyResult < String > { Ok (self . inner . open_price . clone () . into ()) } # [getter] fn high_price (& self) -> PyResult < String > { Ok (self . inner . high_price . clone () . into ()) } # [getter] fn low_price (& self) -> PyResult < String > { Ok (self . inner . low_price . clone () . into ()) } # [getter] fn close_price (& self) -> PyResult < String > { Ok (self . inner . close_price . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetIndexPriceKlineData { inner : venues :: GetIndexPriceKlineData , } # [pymethods] impl GetIndexPriceKlineData { # [staticmethod] fn from_inner (inner : GetIndexPriceKlineData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetIndexPriceKlineResponse { inner : venues :: GetIndexPriceKlineResponse , } # [pymethods] impl GetIndexPriceKlineResponse { # [staticmethod] fn from_inner (inner : GetIndexPriceKlineResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_index_price_kline <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_index_price_kline () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetCollateralCoinsRequest { inner : venues :: GetCollateralCoinsRequest , } # [pymethods] impl GetCollateralCoinsRequest { # [staticmethod] fn from_inner (inner : GetCollateralCoinsRequest) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct CollateralCoinInfo { inner : venues :: CollateralCoinInfo , } # [pymethods] impl CollateralCoinInfo { # [staticmethod] fn from_inner (inner : CollateralCoinInfo) -> Self { Self { inner } } # [getter] fn collateral_coin (& self) -> PyResult < String > { Ok (self . inner . collateral_coin . clone () . into ()) } # [getter] fn max_collateral_amount (& self) -> PyResult < String > { Ok (self . inner . max_collateral_amount . clone () . into ()) } # [getter] fn collateral_ratio (& self) -> PyResult < String > { Ok (self . inner . collateral_ratio . clone () . into ()) } # [getter] fn liquidation_threshold (& self) -> PyResult < String > { Ok (self . inner . liquidation_threshold . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetCollateralCoinsData { inner : venues :: GetCollateralCoinsData , } # [pymethods] impl GetCollateralCoinsData { # [staticmethod] fn from_inner (inner : GetCollateralCoinsData) -> Self { Self { inner } } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetCollateralCoinsResponse { inner : venues :: GetCollateralCoinsResponse , } # [pymethods] impl GetCollateralCoinsResponse { # [staticmethod] fn from_inner (inner : GetCollateralCoinsResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_collateral_coins <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_collateral_coins () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOrderbookRequest { inner : venues :: GetOrderbookRequest , } # [pymethods] impl GetOrderbookRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderbookLevel { inner : venues :: OrderbookLevel , } # [pymethods] impl OrderbookLevel { # [staticmethod] fn from_inner (inner : OrderbookLevel) -> Self { Self { inner } } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetOrderbookData { inner : venues :: GetOrderbookData , } # [pymethods] impl GetOrderbookData { # [staticmethod] fn from_inner (inner : GetOrderbookData) -> Self { Self { inner } } # [getter] fn s (& self) -> PyResult < String > { Ok (self . inner . s . clone () . into ()) } # [getter] fn b (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . b . clone () . into ()) } # [getter] fn a (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . a . clone () . into ()) } # [getter] fn ts (& self) -> PyResult < u64 > { Ok (self . inner . ts . clone () . into ()) } # [getter] fn u (& self) -> PyResult < u64 > { Ok (self . inner . u . clone () . into ()) } # [getter] fn seq (& self) -> PyResult < u64 > { Ok (self . inner . seq . clone () . into ()) } # [getter] fn create_time (& self) -> PyResult < u64 > { Ok (self . inner . create_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetOrderbookResponse { inner : venues :: GetOrderbookResponse , } # [pymethods] impl GetOrderbookResponse { # [staticmethod] fn from_inner (inner : GetOrderbookResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_orderbook <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_orderbook () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetDeliveryPriceRequest { inner : venues :: GetDeliveryPriceRequest , } # [pymethods] impl GetDeliveryPriceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn base_coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_coin . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn cursor (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cursor . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct DeliveryPriceInfo { inner : venues :: DeliveryPriceInfo , } # [pymethods] impl DeliveryPriceInfo { # [staticmethod] fn from_inner (inner : DeliveryPriceInfo) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn delivery_price (& self) -> PyResult < String > { Ok (self . inner . delivery_price . clone () . into ()) } # [getter] fn delivery_time (& self) -> PyResult < String > { Ok (self . inner . delivery_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetDeliveryPriceData { inner : venues :: GetDeliveryPriceData , } # [pymethods] impl GetDeliveryPriceData { # [staticmethod] fn from_inner (inner : GetDeliveryPriceData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } # [getter] fn next_page_cursor (& self) -> PyResult < String > { Ok (self . inner . next_page_cursor . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetDeliveryPriceResponse { inner : venues :: GetDeliveryPriceResponse , } # [pymethods] impl GetDeliveryPriceResponse { # [staticmethod] fn from_inner (inner : GetDeliveryPriceResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_delivery_price <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_delivery_price () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetInstrumentsInfoRequest { inner : venues :: GetInstrumentsInfoRequest , } # [pymethods] impl GetInstrumentsInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn base_coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_coin . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn cursor (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cursor . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct InstrumentInfo { inner : venues :: InstrumentInfo , } # [pymethods] impl InstrumentInfo { # [staticmethod] fn from_inner (inner : InstrumentInfo) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn contract_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . contract_type . clone () . into ()) } # [getter] fn status (& self) -> PyResult < String > { Ok (self . inner . status . clone () . into ()) } # [getter] fn base_coin (& self) -> PyResult < String > { Ok (self . inner . base_coin . clone () . into ()) } # [getter] fn quote_coin (& self) -> PyResult < String > { Ok (self . inner . quote_coin . clone () . into ()) } # [getter] fn launch_time (& self) -> PyResult < String > { Ok (self . inner . launch_time . clone () . into ()) } # [getter] fn delivery_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . delivery_time . clone () . into ()) } # [getter] fn delivery_fee_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . delivery_fee_rate . clone () . into ()) } # [getter] fn price_scale (& self) -> PyResult < String > { Ok (self . inner . price_scale . clone () . into ()) } # [getter] fn leverage_filter (& self) -> PyResult < PyObject > { Ok (self . inner . leverage_filter . clone () . into ()) } # [getter] fn price_filter (& self) -> PyResult < PyObject > { Ok (self . inner . price_filter . clone () . into ()) } # [getter] fn lot_size_filter (& self) -> PyResult < PyObject > { Ok (self . inner . lot_size_filter . clone () . into ()) } # [getter] fn unified_margin_trade (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . unified_margin_trade . clone () . into ()) } # [getter] fn funding_interval (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . funding_interval . clone () . into ()) } # [getter] fn settle_coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . settle_coin . clone () . into ()) } # [getter] fn copy_trading (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . copy_trading . clone () . into ()) } # [getter] fn upper_funding_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . upper_funding_rate . clone () . into ()) } # [getter] fn lower_funding_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . lower_funding_rate . clone () . into ()) } # [getter] fn is_pre_listing (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . is_pre_listing . clone () . into ()) } # [getter] fn pre_listing_info (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pre_listing_info . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct LeverageFilter { inner : venues :: LeverageFilter , } # [pymethods] impl LeverageFilter { # [staticmethod] fn from_inner (inner : LeverageFilter) -> Self { Self { inner } } # [getter] fn min_leverage (& self) -> PyResult < String > { Ok (self . inner . min_leverage . clone () . into ()) } # [getter] fn max_leverage (& self) -> PyResult < String > { Ok (self . inner . max_leverage . clone () . into ()) } # [getter] fn leverage_step (& self) -> PyResult < String > { Ok (self . inner . leverage_step . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PriceFilter { inner : venues :: PriceFilter , } # [pymethods] impl PriceFilter { # [staticmethod] fn from_inner (inner : PriceFilter) -> Self { Self { inner } } # [getter] fn min_price (& self) -> PyResult < String > { Ok (self . inner . min_price . clone () . into ()) } # [getter] fn max_price (& self) -> PyResult < String > { Ok (self . inner . max_price . clone () . into ()) } # [getter] fn tick_size (& self) -> PyResult < String > { Ok (self . inner . tick_size . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct LotSizeFilter { inner : venues :: LotSizeFilter , } # [pymethods] impl LotSizeFilter { # [staticmethod] fn from_inner (inner : LotSizeFilter) -> Self { Self { inner } } # [getter] fn max_order_qty (& self) -> PyResult < String > { Ok (self . inner . max_order_qty . clone () . into ()) } # [getter] fn max_market_order_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . max_market_order_qty . clone () . into ()) } # [getter] fn min_order_qty (& self) -> PyResult < String > { Ok (self . inner . min_order_qty . clone () . into ()) } # [getter] fn qty_step (& self) -> PyResult < String > { Ok (self . inner . qty_step . clone () . into ()) } # [getter] fn post_only_max_order_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . post_only_max_order_qty . clone () . into ()) } # [getter] fn min_notional_value (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . min_notional_value . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetInstrumentsInfoData { inner : venues :: GetInstrumentsInfoData , } # [pymethods] impl GetInstrumentsInfoData { # [staticmethod] fn from_inner (inner : GetInstrumentsInfoData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } # [getter] fn next_page_cursor (& self) -> PyResult < String > { Ok (self . inner . next_page_cursor . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetInstrumentsInfoResponse { inner : venues :: GetInstrumentsInfoResponse , } # [pymethods] impl GetInstrumentsInfoResponse { # [staticmethod] fn from_inner (inner : GetInstrumentsInfoResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_instruments_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_instruments_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetMarkPriceKlineRequest { inner : venues :: GetMarkPriceKlineRequest , } # [pymethods] impl GetMarkPriceKlineRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start . clone () . into ()) } # [getter] fn end (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct MarkPriceKline { inner : venues :: MarkPriceKline , } # [pymethods] impl MarkPriceKline { # [staticmethod] fn from_inner (inner : MarkPriceKline) -> Self { Self { inner } } # [getter] fn start_time (& self) -> PyResult < String > { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn open_price (& self) -> PyResult < String > { Ok (self . inner . open_price . clone () . into ()) } # [getter] fn high_price (& self) -> PyResult < String > { Ok (self . inner . high_price . clone () . into ()) } # [getter] fn low_price (& self) -> PyResult < String > { Ok (self . inner . low_price . clone () . into ()) } # [getter] fn close_price (& self) -> PyResult < String > { Ok (self . inner . close_price . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetMarkPriceKlineData { inner : venues :: GetMarkPriceKlineData , } # [pymethods] impl GetMarkPriceKlineData { # [staticmethod] fn from_inner (inner : GetMarkPriceKlineData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetMarkPriceKlineResponse { inner : venues :: GetMarkPriceKlineResponse , } # [pymethods] impl GetMarkPriceKlineResponse { # [staticmethod] fn from_inner (inner : GetMarkPriceKlineResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_mark_price_kline <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_mark_price_kline () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetRiskLimitRequest { inner : venues :: GetRiskLimitRequest , } # [pymethods] impl GetRiskLimitRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RiskLimitInfo { inner : venues :: RiskLimitInfo , } # [pymethods] impl RiskLimitInfo { # [staticmethod] fn from_inner (inner : RiskLimitInfo) -> Self { Self { inner } } # [getter] fn id (& self) -> PyResult < i64 > { Ok (self . inner . id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn risk_limit_value (& self) -> PyResult < String > { Ok (self . inner . risk_limit_value . clone () . into ()) } # [getter] fn maintenance_margin (& self) -> PyResult < String > { Ok (self . inner . maintenance_margin . clone () . into ()) } # [getter] fn initial_margin (& self) -> PyResult < String > { Ok (self . inner . initial_margin . clone () . into ()) } # [getter] fn is_lowest_risk (& self) -> PyResult < i64 > { Ok (self . inner . is_lowest_risk . clone () . into ()) } # [getter] fn max_leverage (& self) -> PyResult < String > { Ok (self . inner . max_leverage . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetRiskLimitData { inner : venues :: GetRiskLimitData , } # [pymethods] impl GetRiskLimitData { # [staticmethod] fn from_inner (inner : GetRiskLimitData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetRiskLimitResponse { inner : venues :: GetRiskLimitResponse , } # [pymethods] impl GetRiskLimitResponse { # [staticmethod] fn from_inner (inner : GetRiskLimitResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_risk_limit <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_risk_limit () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetFundingHistoryRequest { inner : venues :: GetFundingHistoryRequest , } # [pymethods] impl GetFundingHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct FundingInfo { inner : venues :: FundingInfo , } # [pymethods] impl FundingInfo { # [staticmethod] fn from_inner (inner : FundingInfo) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn funding_rate (& self) -> PyResult < String > { Ok (self . inner . funding_rate . clone () . into ()) } # [getter] fn funding_rate_timestamp (& self) -> PyResult < String > { Ok (self . inner . funding_rate_timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetFundingHistoryData { inner : venues :: GetFundingHistoryData , } # [pymethods] impl GetFundingHistoryData { # [staticmethod] fn from_inner (inner : GetFundingHistoryData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetFundingHistoryResponse { inner : venues :: GetFundingHistoryResponse , } # [pymethods] impl GetFundingHistoryResponse { # [staticmethod] fn from_inner (inner : GetFundingHistoryResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_funding_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_funding_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetRecentTradesRequest { inner : venues :: GetRecentTradesRequest , } # [pymethods] impl GetRecentTradesRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn base_coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_coin . clone () . into ()) } # [getter] fn option_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . option_type . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TradeInfo { inner : venues :: TradeInfo , } # [pymethods] impl TradeInfo { # [staticmethod] fn from_inner (inner : TradeInfo) -> Self { Self { inner } } # [getter] fn exec_id (& self) -> PyResult < String > { Ok (self . inner . exec_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn time (& self) -> PyResult < String > { Ok (self . inner . time . clone () . into ()) } # [getter] fn is_block_trade (& self) -> PyResult < bool > { Ok (self . inner . is_block_trade . clone () . into ()) } # [getter] fn is_rpi_trade (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . is_rpi_trade . clone () . into ()) } # [getter] fn mark_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . mark_price . clone () . into ()) } # [getter] fn index_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . index_price . clone () . into ()) } # [getter] fn mark_iv (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . mark_iv . clone () . into ()) } # [getter] fn iv (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . iv . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetRecentTradesData { inner : venues :: GetRecentTradesData , } # [pymethods] impl GetRecentTradesData { # [staticmethod] fn from_inner (inner : GetRecentTradesData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetRecentTradesResponse { inner : venues :: GetRecentTradesResponse , } # [pymethods] impl GetRecentTradesResponse { # [staticmethod] fn from_inner (inner : GetRecentTradesResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_recent_trades <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_recent_trades () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn base_url (& self) -> PyResult < PyObject > { Ok (self . inner . base_url . clone () . into ()) } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn rate_limiter (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limiter . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetPremiumIndexPriceKlineRequest { inner : venues :: GetPremiumIndexPriceKlineRequest , } # [pymethods] impl GetPremiumIndexPriceKlineRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start . clone () . into ()) } # [getter] fn end (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PremiumIndexPriceKline { inner : venues :: PremiumIndexPriceKline , } # [pymethods] impl PremiumIndexPriceKline { # [staticmethod] fn from_inner (inner : PremiumIndexPriceKline) -> Self { Self { inner } } # [getter] fn start_time (& self) -> PyResult < String > { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn open_price (& self) -> PyResult < String > { Ok (self . inner . open_price . clone () . into ()) } # [getter] fn high_price (& self) -> PyResult < String > { Ok (self . inner . high_price . clone () . into ()) } # [getter] fn low_price (& self) -> PyResult < String > { Ok (self . inner . low_price . clone () . into ()) } # [getter] fn close_price (& self) -> PyResult < String > { Ok (self . inner . close_price . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetPremiumIndexPriceKlineData { inner : venues :: GetPremiumIndexPriceKlineData , } # [pymethods] impl GetPremiumIndexPriceKlineData { # [staticmethod] fn from_inner (inner : GetPremiumIndexPriceKlineData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetPremiumIndexPriceKlineResponse { inner : venues :: GetPremiumIndexPriceKlineResponse , } # [pymethods] impl GetPremiumIndexPriceKlineResponse { # [staticmethod] fn from_inner (inner : GetPremiumIndexPriceKlineResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_premium_index_price_kline <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_premium_index_price_kline () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetVipMarginDataRequest { inner : venues :: GetVipMarginDataRequest , } # [pymethods] impl GetVipMarginDataRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn vip_level (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . vip_level . clone () . into ()) } # [getter] fn currency (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . currency . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct VipMarginInfo { inner : venues :: VipMarginInfo , } # [pymethods] impl VipMarginInfo { # [staticmethod] fn from_inner (inner : VipMarginInfo) -> Self { Self { inner } } # [getter] fn vip_level (& self) -> PyResult < String > { Ok (self . inner . vip_level . clone () . into ()) } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn borrowable (& self) -> PyResult < String > { Ok (self . inner . borrowable . clone () . into ()) } # [getter] fn collateral_ratio (& self) -> PyResult < String > { Ok (self . inner . collateral_ratio . clone () . into ()) } # [getter] fn margin_call_ratio (& self) -> PyResult < String > { Ok (self . inner . margin_call_ratio . clone () . into ()) } # [getter] fn liquidation_ratio (& self) -> PyResult < String > { Ok (self . inner . liquidation_ratio . clone () . into ()) } # [getter] fn interest_rate (& self) -> PyResult < String > { Ok (self . inner . interest_rate . clone () . into ()) } # [getter] fn hourly_borrow_rate (& self) -> PyResult < String > { Ok (self . inner . hourly_borrow_rate . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetVipMarginDataData { inner : venues :: GetVipMarginDataData , } # [pymethods] impl GetVipMarginDataData { # [staticmethod] fn from_inner (inner : GetVipMarginDataData) -> Self { Self { inner } } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetVipMarginDataResponse { inner : venues :: GetVipMarginDataResponse , } # [pymethods] impl GetVipMarginDataResponse { # [staticmethod] fn from_inner (inner : GetVipMarginDataResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_vip_margin_data <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_vip_margin_data () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetBorrowableCoinsRequest { inner : venues :: GetBorrowableCoinsRequest , } # [pymethods] impl GetBorrowableCoinsRequest { # [staticmethod] fn from_inner (inner : GetBorrowableCoinsRequest) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct BorrowableCoinInfo { inner : venues :: BorrowableCoinInfo , } # [pymethods] impl BorrowableCoinInfo { # [staticmethod] fn from_inner (inner : BorrowableCoinInfo) -> Self { Self { inner } } # [getter] fn loan_coin (& self) -> PyResult < String > { Ok (self . inner . loan_coin . clone () . into ()) } # [getter] fn max_loan_amount (& self) -> PyResult < String > { Ok (self . inner . max_loan_amount . clone () . into ()) } # [getter] fn hourly_borrow_rate (& self) -> PyResult < String > { Ok (self . inner . hourly_borrow_rate . clone () . into ()) } # [getter] fn min_loan_amount (& self) -> PyResult < String > { Ok (self . inner . min_loan_amount . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetBorrowableCoinsData { inner : venues :: GetBorrowableCoinsData , } # [pymethods] impl GetBorrowableCoinsData { # [staticmethod] fn from_inner (inner : GetBorrowableCoinsData) -> Self { Self { inner } } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetBorrowableCoinsResponse { inner : venues :: GetBorrowableCoinsResponse , } # [pymethods] impl GetBorrowableCoinsResponse { # [staticmethod] fn from_inner (inner : GetBorrowableCoinsResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_borrowable_coins <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_borrowable_coins () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetInsMarginCoinInfoRequest { inner : venues :: GetInsMarginCoinInfoRequest , } # [pymethods] impl GetInsMarginCoinInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn product_id (& self) -> PyResult < String > { Ok (self . inner . product_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct InsMarginCoinInfo { inner : venues :: InsMarginCoinInfo , } # [pymethods] impl InsMarginCoinInfo { # [staticmethod] fn from_inner (inner : InsMarginCoinInfo) -> Self { Self { inner } } # [getter] fn margin_coin (& self) -> PyResult < String > { Ok (self . inner . margin_coin . clone () . into ()) } # [getter] fn conversion_rate (& self) -> PyResult < String > { Ok (self . inner . conversion_rate . clone () . into ()) } # [getter] fn liquidation_order (& self) -> PyResult < String > { Ok (self . inner . liquidation_order . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetInsMarginCoinInfoData { inner : venues :: GetInsMarginCoinInfoData , } # [pymethods] impl GetInsMarginCoinInfoData { # [staticmethod] fn from_inner (inner : GetInsMarginCoinInfoData) -> Self { Self { inner } } # [getter] fn product_id (& self) -> PyResult < String > { Ok (self . inner . product_id . clone () . into ()) } # [getter] fn parent_uid (& self) -> PyResult < String > { Ok (self . inner . parent_uid . clone () . into ()) } # [getter] fn loan_coin (& self) -> PyResult < String > { Ok (self . inner . loan_coin . clone () . into ()) } # [getter] fn margin_coin_info_list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . margin_coin_info_list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetInsMarginCoinInfoResponse { inner : venues :: GetInsMarginCoinInfoResponse , } # [pymethods] impl GetInsMarginCoinInfoResponse { # [staticmethod] fn from_inner (inner : GetInsMarginCoinInfoResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_ins_margin_coin_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_ins_margin_coin_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetHistoricalVolatilityRequest { inner : venues :: GetHistoricalVolatilityRequest , } # [pymethods] impl GetHistoricalVolatilityRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn base_coin (& self) -> PyResult < String > { Ok (self . inner . base_coin . clone () . into ()) } # [getter] fn period (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . period . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct VolatilityInfo { inner : venues :: VolatilityInfo , } # [pymethods] impl VolatilityInfo { # [staticmethod] fn from_inner (inner : VolatilityInfo) -> Self { Self { inner } } # [getter] fn period (& self) -> PyResult < i64 > { Ok (self . inner . period . clone () . into ()) } # [getter] fn value (& self) -> PyResult < String > { Ok (self . inner . value . clone () . into ()) } # [getter] fn time (& self) -> PyResult < String > { Ok (self . inner . time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetHistoricalVolatilityData { inner : venues :: GetHistoricalVolatilityData , } # [pymethods] impl GetHistoricalVolatilityData { # [staticmethod] fn from_inner (inner : GetHistoricalVolatilityData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetHistoricalVolatilityResponse { inner : venues :: GetHistoricalVolatilityResponse , } # [pymethods] impl GetHistoricalVolatilityResponse { # [staticmethod] fn from_inner (inner : GetHistoricalVolatilityResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_historical_volatility <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_historical_volatility () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetInsProductInfoRequest { inner : venues :: GetInsProductInfoRequest , } # [pymethods] impl GetInsProductInfoRequest { # [staticmethod] fn from_inner (inner : GetInsProductInfoRequest) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct InsProductInfo { inner : venues :: InsProductInfo , } # [pymethods] impl InsProductInfo { # [staticmethod] fn from_inner (inner : InsProductInfo) -> Self { Self { inner } } # [getter] fn product_id (& self) -> PyResult < String > { Ok (self . inner . product_id . clone () . into ()) } # [getter] fn loan_coin (& self) -> PyResult < String > { Ok (self . inner . loan_coin . clone () . into ()) } # [getter] fn loan_amount (& self) -> PyResult < String > { Ok (self . inner . loan_amount . clone () . into ()) } # [getter] fn borrow_rate (& self) -> PyResult < String > { Ok (self . inner . borrow_rate . clone () . into ()) } # [getter] fn loan_period (& self) -> PyResult < String > { Ok (self . inner . loan_period . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetInsProductInfoData { inner : venues :: GetInsProductInfoData , } # [pymethods] impl GetInsProductInfoData { # [staticmethod] fn from_inner (inner : GetInsProductInfoData) -> Self { Self { inner } } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetInsProductInfoResponse { inner : venues :: GetInsProductInfoResponse , } # [pymethods] impl GetInsProductInfoResponse { # [staticmethod] fn from_inner (inner : GetInsProductInfoResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_ins_product_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_ins_product_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetKlineRequest { inner : venues :: GetKlineRequest , } # [pymethods] impl GetKlineRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn interval (& self) -> PyResult < PyObject > { Ok (self . inner . interval . clone () . into ()) } # [getter] fn start (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start . clone () . into ()) } # [getter] fn end (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct Kline { inner : venues :: Kline , } # [pymethods] impl Kline { # [staticmethod] fn from_inner (inner : Kline) -> Self { Self { inner } } # [getter] fn start_time (& self) -> PyResult < String > { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn open_price (& self) -> PyResult < String > { Ok (self . inner . open_price . clone () . into ()) } # [getter] fn high_price (& self) -> PyResult < String > { Ok (self . inner . high_price . clone () . into ()) } # [getter] fn low_price (& self) -> PyResult < String > { Ok (self . inner . low_price . clone () . into ()) } # [getter] fn close_price (& self) -> PyResult < String > { Ok (self . inner . close_price . clone () . into ()) } # [getter] fn volume (& self) -> PyResult < String > { Ok (self . inner . volume . clone () . into ()) } # [getter] fn turnover (& self) -> PyResult < String > { Ok (self . inner . turnover . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetKlineData { inner : venues :: GetKlineData , } # [pymethods] impl GetKlineData { # [staticmethod] fn from_inner (inner : GetKlineData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetKlineResponse { inner : venues :: GetKlineResponse , } # [pymethods] impl GetKlineResponse { # [staticmethod] fn from_inner (inner : GetKlineResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_kline <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_kline () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetCollateralRatioRequest { inner : venues :: GetCollateralRatioRequest , } # [pymethods] impl GetCollateralRatioRequest { # [staticmethod] fn from_inner (inner : GetCollateralRatioRequest) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct CollateralRatioInfo { inner : venues :: CollateralRatioInfo , } # [pymethods] impl CollateralRatioInfo { # [staticmethod] fn from_inner (inner : CollateralRatioInfo) -> Self { Self { inner } } # [getter] fn currency (& self) -> PyResult < String > { Ok (self . inner . currency . clone () . into ()) } # [getter] fn hourly_borrow_rate (& self) -> PyResult < String > { Ok (self . inner . hourly_borrow_rate . clone () . into ()) } # [getter] fn max_borrowing_amount (& self) -> PyResult < String > { Ok (self . inner . max_borrowing_amount . clone () . into ()) } # [getter] fn free_borrowing_amount (& self) -> PyResult < String > { Ok (self . inner . free_borrowing_amount . clone () . into ()) } # [getter] fn free_borrow_amount (& self) -> PyResult < String > { Ok (self . inner . free_borrow_amount . clone () . into ()) } # [getter] fn max_borrow_amount (& self) -> PyResult < String > { Ok (self . inner . max_borrow_amount . clone () . into ()) } # [getter] fn borrow_usage_rate (& self) -> PyResult < String > { Ok (self . inner . borrow_usage_rate . clone () . into ()) } # [getter] fn margin_collateral_ratio (& self) -> PyResult < String > { Ok (self . inner . margin_collateral_ratio . clone () . into ()) } # [getter] fn liquidation_collateral_ratio (& self) -> PyResult < String > { Ok (self . inner . liquidation_collateral_ratio . clone () . into ()) } # [getter] fn collateral_switch (& self) -> PyResult < String > { Ok (self . inner . collateral_switch . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetCollateralRatioData { inner : venues :: GetCollateralRatioData , } # [pymethods] impl GetCollateralRatioData { # [staticmethod] fn from_inner (inner : GetCollateralRatioData) -> Self { Self { inner } } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetCollateralRatioResponse { inner : venues :: GetCollateralRatioResponse , } # [pymethods] impl GetCollateralRatioResponse { # [staticmethod] fn from_inner (inner : GetCollateralRatioResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_collateral_ratio <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_collateral_ratio () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetLongShortRatioRequest { inner : venues :: GetLongShortRatioRequest , } # [pymethods] impl GetLongShortRatioRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn period (& self) -> PyResult < String > { Ok (self . inner . period . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct LongShortRatioInfo { inner : venues :: LongShortRatioInfo , } # [pymethods] impl LongShortRatioInfo { # [staticmethod] fn from_inner (inner : LongShortRatioInfo) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn buy_ratio (& self) -> PyResult < String > { Ok (self . inner . buy_ratio . clone () . into ()) } # [getter] fn sell_ratio (& self) -> PyResult < String > { Ok (self . inner . sell_ratio . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < String > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetLongShortRatioData { inner : venues :: GetLongShortRatioData , } # [pymethods] impl GetLongShortRatioData { # [staticmethod] fn from_inner (inner : GetLongShortRatioData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetLongShortRatioResponse { inner : venues :: GetLongShortRatioResponse , } # [pymethods] impl GetLongShortRatioResponse { # [staticmethod] fn from_inner (inner : GetLongShortRatioResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_long_short_ratio <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_long_short_ratio () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetInsuranceRequest { inner : venues :: GetInsuranceRequest , } # [pymethods] impl GetInsuranceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . coin . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct InsuranceInfo { inner : venues :: InsuranceInfo , } # [pymethods] impl InsuranceInfo { # [staticmethod] fn from_inner (inner : InsuranceInfo) -> Self { Self { inner } } # [getter] fn coin (& self) -> PyResult < String > { Ok (self . inner . coin . clone () . into ()) } # [getter] fn balance (& self) -> PyResult < String > { Ok (self . inner . balance . clone () . into ()) } # [getter] fn value (& self) -> PyResult < String > { Ok (self . inner . value . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetInsuranceData { inner : venues :: GetInsuranceData , } # [pymethods] impl GetInsuranceData { # [staticmethod] fn from_inner (inner : GetInsuranceData) -> Self { Self { inner } } # [getter] fn updated_time (& self) -> PyResult < String > { Ok (self . inner . updated_time . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetInsuranceResponse { inner : venues :: GetInsuranceResponse , } # [pymethods] impl GetInsuranceResponse { # [staticmethod] fn from_inner (inner : GetInsuranceResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_insurance <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_insurance () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetTickersRequest { inner : venues :: GetTickersRequest , } # [pymethods] impl GetTickersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn base_coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_coin . clone () . into ()) } # [getter] fn exp_date (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . exp_date . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct TickerInfo { inner : venues :: TickerInfo , } # [pymethods] impl TickerInfo { # [staticmethod] fn from_inner (inner : TickerInfo) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn last_price (& self) -> PyResult < String > { Ok (self . inner . last_price . clone () . into ()) } # [getter] fn index_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . index_price . clone () . into ()) } # [getter] fn mark_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . mark_price . clone () . into ()) } # [getter] fn prev_price_24h (& self) -> PyResult < String > { Ok (self . inner . prev_price_24h . clone () . into ()) } # [getter] fn price_24h_pcnt (& self) -> PyResult < String > { Ok (self . inner . price_24h_pcnt . clone () . into ()) } # [getter] fn high_price_24h (& self) -> PyResult < String > { Ok (self . inner . high_price_24h . clone () . into ()) } # [getter] fn low_price_24h (& self) -> PyResult < String > { Ok (self . inner . low_price_24h . clone () . into ()) } # [getter] fn prev_price_1h (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . prev_price_1h . clone () . into ()) } # [getter] fn open_interest (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . open_interest . clone () . into ()) } # [getter] fn open_interest_value (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . open_interest_value . clone () . into ()) } # [getter] fn turnover_24h (& self) -> PyResult < String > { Ok (self . inner . turnover_24h . clone () . into ()) } # [getter] fn volume_24h (& self) -> PyResult < String > { Ok (self . inner . volume_24h . clone () . into ()) } # [getter] fn funding_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . funding_rate . clone () . into ()) } # [getter] fn next_funding_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . next_funding_time . clone () . into ()) } # [getter] fn predicted_delivery_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . predicted_delivery_price . clone () . into ()) } # [getter] fn basis_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . basis_rate . clone () . into ()) } # [getter] fn basis (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . basis . clone () . into ()) } # [getter] fn delivery_fee_rate (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . delivery_fee_rate . clone () . into ()) } # [getter] fn delivery_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . delivery_time . clone () . into ()) } # [getter] fn ask1_size (& self) -> PyResult < String > { Ok (self . inner . ask1_size . clone () . into ()) } # [getter] fn bid1_price (& self) -> PyResult < String > { Ok (self . inner . bid1_price . clone () . into ()) } # [getter] fn ask1_price (& self) -> PyResult < String > { Ok (self . inner . ask1_price . clone () . into ()) } # [getter] fn bid1_size (& self) -> PyResult < String > { Ok (self . inner . bid1_size . clone () . into ()) } # [getter] fn pre_open_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pre_open_price . clone () . into ()) } # [getter] fn pre_qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . pre_qty . clone () . into ()) } # [getter] fn cur_pre_listing_phase (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cur_pre_listing_phase . clone () . into ()) } # [getter] fn usd_index_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . usd_index_price . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetTickersData { inner : venues :: GetTickersData , } # [pymethods] impl GetTickersData { # [staticmethod] fn from_inner (inner : GetTickersData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetTickersResponse { inner : venues :: GetTickersResponse , } # [pymethods] impl GetTickersResponse { # [staticmethod] fn from_inner (inner : GetTickersResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_tickers <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_tickers () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetServerTimeRequest { inner : venues :: GetServerTimeRequest , } # [pymethods] impl GetServerTimeRequest { # [staticmethod] fn from_inner (inner : GetServerTimeRequest) -> Self { Self { inner } } } # [pyclass] # [derive (Clone)] pub struct ServerTimeData { inner : venues :: ServerTimeData , } # [pymethods] impl ServerTimeData { # [staticmethod] fn from_inner (inner : ServerTimeData) -> Self { Self { inner } } # [getter] fn time_second (& self) -> PyResult < String > { Ok (self . inner . time_second . clone () . into ()) } # [getter] fn time_nano (& self) -> PyResult < String > { Ok (self . inner . time_nano . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetServerTimeResponse { inner : venues :: GetServerTimeResponse , } # [pymethods] impl GetServerTimeResponse { # [staticmethod] fn from_inner (inner : GetServerTimeResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_server_time <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_server_time () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOpenInterestRequest { inner : venues :: GetOpenInterestRequest , } # [pymethods] impl GetOpenInterestRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn interval_time (& self) -> PyResult < String > { Ok (self . inner . interval_time . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn cursor (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cursor . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OpenInterestInfo { inner : venues :: OpenInterestInfo , } # [pymethods] impl OpenInterestInfo { # [staticmethod] fn from_inner (inner : OpenInterestInfo) -> Self { Self { inner } } # [getter] fn open_interest (& self) -> PyResult < String > { Ok (self . inner . open_interest . clone () . into ()) } # [getter] fn timestamp (& self) -> PyResult < String > { Ok (self . inner . timestamp . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetOpenInterestData { inner : venues :: GetOpenInterestData , } # [pymethods] impl GetOpenInterestData { # [staticmethod] fn from_inner (inner : GetOpenInterestData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } # [getter] fn next_page_cursor (& self) -> PyResult < String > { Ok (self . inner . next_page_cursor . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetOpenInterestResponse { inner : venues :: GetOpenInterestResponse , } # [pymethods] impl GetOpenInterestResponse { # [staticmethod] fn from_inner (inner : GetOpenInterestResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_open_interest <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_open_interest () . await }) } } # [pyclass] # [derive (Clone)] pub struct AmendOrderRequest { inner : venues :: AmendOrderRequest , } # [pymethods] impl AmendOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_link_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_link_id . clone () . into ()) } # [getter] fn order_iv (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_iv . clone () . into ()) } # [getter] fn trigger_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trigger_price . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . qty . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn tpsl_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tpsl_mode . clone () . into ()) } # [getter] fn take_profit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . take_profit . clone () . into ()) } # [getter] fn stop_loss (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_loss . clone () . into ()) } # [getter] fn tp_trigger_by (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tp_trigger_by . clone () . into ()) } # [getter] fn sl_trigger_by (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sl_trigger_by . clone () . into ()) } # [getter] fn trigger_by (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trigger_by . clone () . into ()) } # [getter] fn tp_limit_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tp_limit_price . clone () . into ()) } # [getter] fn sl_limit_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sl_limit_price . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AmendOrderData { inner : venues :: AmendOrderData , } # [pymethods] impl AmendOrderData { # [staticmethod] fn from_inner (inner : AmendOrderData) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_link_id (& self) -> PyResult < String > { Ok (self . inner . order_link_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct AmendOrderResponse { inner : venues :: AmendOrderResponse , } # [pymethods] impl AmendOrderResponse { # [staticmethod] fn from_inner (inner : AmendOrderResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn amend_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . amend_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct BatchCreateOrdersRequest { inner : venues :: BatchCreateOrdersRequest , } # [pymethods] impl BatchCreateOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn request (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . request . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCreateOrderResult { inner : venues :: BatchCreateOrderResult , } # [pymethods] impl BatchCreateOrderResult { # [staticmethod] fn from_inner (inner : BatchCreateOrderResult) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_link_id (& self) -> PyResult < String > { Ok (self . inner . order_link_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCreateOrderError { inner : venues :: BatchCreateOrderError , } # [pymethods] impl BatchCreateOrderError { # [staticmethod] fn from_inner (inner : BatchCreateOrderError) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCreateOrdersData { inner : venues :: BatchCreateOrdersData , } # [pymethods] impl BatchCreateOrdersData { # [staticmethod] fn from_inner (inner : BatchCreateOrdersData) -> Self { Self { inner } } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCreateOrdersResult { inner : venues :: BatchCreateOrdersResult , } # [pymethods] impl BatchCreateOrdersResult { # [staticmethod] fn from_inner (inner : BatchCreateOrdersResult) -> Self { Self { inner } } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCreateOrdersExtInfo { inner : venues :: BatchCreateOrdersExtInfo , } # [pymethods] impl BatchCreateOrdersExtInfo { # [staticmethod] fn from_inner (inner : BatchCreateOrdersExtInfo) -> Self { Self { inner } } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCreateOrdersResponse { inner : venues :: BatchCreateOrdersResponse , } # [pymethods] impl BatchCreateOrdersResponse { # [staticmethod] fn from_inner (inner : BatchCreateOrdersResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn batch_create_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . batch_create_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct SpotBorrowCheckRequest { inner : venues :: SpotBorrowCheckRequest , } # [pymethods] impl SpotBorrowCheckRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SpotBorrowCheckData { inner : venues :: SpotBorrowCheckData , } # [pymethods] impl SpotBorrowCheckData { # [staticmethod] fn from_inner (inner : SpotBorrowCheckData) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn max_trade_qty (& self) -> PyResult < String > { Ok (self . inner . max_trade_qty . clone () . into ()) } # [getter] fn max_trade_amount (& self) -> PyResult < String > { Ok (self . inner . max_trade_amount . clone () . into ()) } # [getter] fn spot_max_trade_qty (& self) -> PyResult < String > { Ok (self . inner . spot_max_trade_qty . clone () . into ()) } # [getter] fn spot_max_trade_amount (& self) -> PyResult < String > { Ok (self . inner . spot_max_trade_amount . clone () . into ()) } # [getter] fn borrow_coin (& self) -> PyResult < String > { Ok (self . inner . borrow_coin . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct SpotBorrowCheckResponse { inner : venues :: SpotBorrowCheckResponse , } # [pymethods] impl SpotBorrowCheckResponse { # [staticmethod] fn from_inner (inner : SpotBorrowCheckResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn spot_borrow_check <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . spot_borrow_check () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOrderHistoryRequest { inner : venues :: GetOrderHistoryRequest , } # [pymethods] impl GetOrderHistoryRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn base_coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_coin . clone () . into ()) } # [getter] fn settle_coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . settle_coin . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_link_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_link_id . clone () . into ()) } # [getter] fn order_filter (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_filter . clone () . into ()) } # [getter] fn order_status (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_status . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn cursor (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cursor . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetOrderHistoryData { inner : venues :: GetOrderHistoryData , } # [pymethods] impl GetOrderHistoryData { # [staticmethod] fn from_inner (inner : GetOrderHistoryData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } # [getter] fn next_page_cursor (& self) -> PyResult < String > { Ok (self . inner . next_page_cursor . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetOrderHistoryResponse { inner : venues :: GetOrderHistoryResponse , } # [pymethods] impl GetOrderHistoryResponse { # [staticmethod] fn from_inner (inner : GetOrderHistoryResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_order_history <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_order_history () . await }) } } # [pyclass] # [derive (Clone)] pub struct RestClient { inner : venues :: RestClient , } # [pymethods] impl RestClient { # [staticmethod] fn from_inner (inner : RestClient) -> Self { Self { inner } } # [getter] fn base_url (& self) -> PyResult < PyObject > { Ok (self . inner . base_url . clone () . into ()) } # [getter] fn client (& self) -> PyResult < PyObject > { Ok (self . inner . client . clone () . into ()) } # [getter] fn rate_limiter (& self) -> PyResult < PyObject > { Ok (self . inner . rate_limiter . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOrdersRequest { inner : venues :: CancelAllOrdersRequest , } # [pymethods] impl CancelAllOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn base_coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_coin . clone () . into ()) } # [getter] fn settle_coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . settle_coin . clone () . into ()) } # [getter] fn order_filter (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_filter . clone () . into ()) } # [getter] fn stop_order_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_order_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelledOrder { inner : venues :: CancelledOrder , } # [pymethods] impl CancelledOrder { # [staticmethod] fn from_inner (inner : CancelledOrder) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_link_id (& self) -> PyResult < String > { Ok (self . inner . order_link_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOrdersData { inner : venues :: CancelAllOrdersData , } # [pymethods] impl CancelAllOrdersData { # [staticmethod] fn from_inner (inner : CancelAllOrdersData) -> Self { Self { inner } } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } # [getter] fn success (& self) -> PyResult < String > { Ok (self . inner . success . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelAllOrdersResponse { inner : venues :: CancelAllOrdersResponse , } # [pymethods] impl CancelAllOrdersResponse { # [staticmethod] fn from_inner (inner : CancelAllOrdersResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_all_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_all_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct CreateOrderRequest { inner : venues :: CreateOrderRequest , } # [pymethods] impl CreateOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn is_leverage (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . is_leverage . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < String > { Ok (self . inner . qty . clone () . into ()) } # [getter] fn market_unit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . market_unit . clone () . into ()) } # [getter] fn slippage_tolerance_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . slippage_tolerance_type . clone () . into ()) } # [getter] fn slippage_tolerance (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . slippage_tolerance . clone () . into ()) } # [getter] fn price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . price . clone () . into ()) } # [getter] fn trigger_direction (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trigger_direction . clone () . into ()) } # [getter] fn order_filter (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_filter . clone () . into ()) } # [getter] fn trigger_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trigger_price . clone () . into ()) } # [getter] fn trigger_by (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . trigger_by . clone () . into ()) } # [getter] fn order_iv (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_iv . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn position_idx (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . position_idx . clone () . into ()) } # [getter] fn order_link_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_link_id . clone () . into ()) } # [getter] fn take_profit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . take_profit . clone () . into ()) } # [getter] fn stop_loss (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . stop_loss . clone () . into ()) } # [getter] fn tp_trigger_by (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tp_trigger_by . clone () . into ()) } # [getter] fn sl_trigger_by (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sl_trigger_by . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn close_on_trigger (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . close_on_trigger . clone () . into ()) } # [getter] fn smp_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . smp_type . clone () . into ()) } # [getter] fn mmp (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . mmp . clone () . into ()) } # [getter] fn tpsl_mode (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tpsl_mode . clone () . into ()) } # [getter] fn tp_limit_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tp_limit_price . clone () . into ()) } # [getter] fn sl_limit_price (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sl_limit_price . clone () . into ()) } # [getter] fn tp_order_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . tp_order_type . clone () . into ()) } # [getter] fn sl_order_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . sl_order_type . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CreateOrderData { inner : venues :: CreateOrderData , } # [pymethods] impl CreateOrderData { # [staticmethod] fn from_inner (inner : CreateOrderData) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_link_id (& self) -> PyResult < String > { Ok (self . inner . order_link_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CreateOrderResponse { inner : venues :: CreateOrderResponse , } # [pymethods] impl CreateOrderResponse { # [staticmethod] fn from_inner (inner : CreateOrderResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn create_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . create_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderRequest { inner : venues :: CancelOrderRequest , } # [pymethods] impl CancelOrderRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_link_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_link_id . clone () . into ()) } # [getter] fn order_filter (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_filter . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderData { inner : venues :: CancelOrderData , } # [pymethods] impl CancelOrderData { # [staticmethod] fn from_inner (inner : CancelOrderData) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_link_id (& self) -> PyResult < String > { Ok (self . inner . order_link_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct CancelOrderResponse { inner : venues :: CancelOrderResponse , } # [pymethods] impl CancelOrderResponse { # [staticmethod] fn from_inner (inner : CancelOrderResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn cancel_order <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . cancel_order () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetPositionInfoRequest { inner : venues :: GetPositionInfoRequest , } # [pymethods] impl GetPositionInfoRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn base_coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_coin . clone () . into ()) } # [getter] fn settle_coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . settle_coin . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn cursor (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cursor . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct PositionInfo { inner : venues :: PositionInfo , } # [pymethods] impl PositionInfo { # [staticmethod] fn from_inner (inner : PositionInfo) -> Self { Self { inner } } # [getter] fn position_idx (& self) -> PyResult < i64 > { Ok (self . inner . position_idx . clone () . into ()) } # [getter] fn risk_id (& self) -> PyResult < i64 > { Ok (self . inner . risk_id . clone () . into ()) } # [getter] fn risk_limit_value (& self) -> PyResult < String > { Ok (self . inner . risk_limit_value . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn side (& self) -> PyResult < String > { Ok (self . inner . side . clone () . into ()) } # [getter] fn size (& self) -> PyResult < String > { Ok (self . inner . size . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn position_value (& self) -> PyResult < String > { Ok (self . inner . position_value . clone () . into ()) } # [getter] fn trade_mode (& self) -> PyResult < i64 > { Ok (self . inner . trade_mode . clone () . into ()) } # [getter] fn auto_add_margin (& self) -> PyResult < i64 > { Ok (self . inner . auto_add_margin . clone () . into ()) } # [getter] fn position_status (& self) -> PyResult < String > { Ok (self . inner . position_status . clone () . into ()) } # [getter] fn leverage (& self) -> PyResult < String > { Ok (self . inner . leverage . clone () . into ()) } # [getter] fn mark_price (& self) -> PyResult < String > { Ok (self . inner . mark_price . clone () . into ()) } # [getter] fn liq_price (& self) -> PyResult < String > { Ok (self . inner . liq_price . clone () . into ()) } # [getter] fn bust_price (& self) -> PyResult < String > { Ok (self . inner . bust_price . clone () . into ()) } # [getter] fn position_im (& self) -> PyResult < String > { Ok (self . inner . position_im . clone () . into ()) } # [getter] fn position_mm (& self) -> PyResult < String > { Ok (self . inner . position_mm . clone () . into ()) } # [getter] fn position_balance (& self) -> PyResult < String > { Ok (self . inner . position_balance . clone () . into ()) } # [getter] fn take_profit (& self) -> PyResult < String > { Ok (self . inner . take_profit . clone () . into ()) } # [getter] fn stop_loss (& self) -> PyResult < String > { Ok (self . inner . stop_loss . clone () . into ()) } # [getter] fn trailing_stop (& self) -> PyResult < String > { Ok (self . inner . trailing_stop . clone () . into ()) } # [getter] fn session_avg_price (& self) -> PyResult < String > { Ok (self . inner . session_avg_price . clone () . into ()) } # [getter] fn delta (& self) -> PyResult < String > { Ok (self . inner . delta . clone () . into ()) } # [getter] fn gamma (& self) -> PyResult < String > { Ok (self . inner . gamma . clone () . into ()) } # [getter] fn vega (& self) -> PyResult < String > { Ok (self . inner . vega . clone () . into ()) } # [getter] fn theta (& self) -> PyResult < String > { Ok (self . inner . theta . clone () . into ()) } # [getter] fn unrealised_pnl (& self) -> PyResult < String > { Ok (self . inner . unrealised_pnl . clone () . into ()) } # [getter] fn cur_realised_pnl (& self) -> PyResult < String > { Ok (self . inner . cur_realised_pnl . clone () . into ()) } # [getter] fn cum_realised_pnl (& self) -> PyResult < String > { Ok (self . inner . cum_realised_pnl . clone () . into ()) } # [getter] fn adl_rank_indicator (& self) -> PyResult < i64 > { Ok (self . inner . adl_rank_indicator . clone () . into ()) } # [getter] fn created_time (& self) -> PyResult < String > { Ok (self . inner . created_time . clone () . into ()) } # [getter] fn updated_time (& self) -> PyResult < String > { Ok (self . inner . updated_time . clone () . into ()) } # [getter] fn seq (& self) -> PyResult < i64 > { Ok (self . inner . seq . clone () . into ()) } # [getter] fn is_reduce_only (& self) -> PyResult < bool > { Ok (self . inner . is_reduce_only . clone () . into ()) } # [getter] fn mmr_sys_updated_time (& self) -> PyResult < String > { Ok (self . inner . mmr_sys_updated_time . clone () . into ()) } # [getter] fn leverage_sys_updated_time (& self) -> PyResult < String > { Ok (self . inner . leverage_sys_updated_time . clone () . into ()) } # [getter] fn tpsl_mode (& self) -> PyResult < String > { Ok (self . inner . tpsl_mode . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetPositionInfoData { inner : venues :: GetPositionInfoData , } # [pymethods] impl GetPositionInfoData { # [staticmethod] fn from_inner (inner : GetPositionInfoData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn next_page_cursor (& self) -> PyResult < String > { Ok (self . inner . next_page_cursor . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetPositionInfoResponse { inner : venues :: GetPositionInfoResponse , } # [pymethods] impl GetPositionInfoResponse { # [staticmethod] fn from_inner (inner : GetPositionInfoResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_position_info <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_position_info () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetOpenOrdersRequest { inner : venues :: GetOpenOrdersRequest , } # [pymethods] impl GetOpenOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn base_coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_coin . clone () . into ()) } # [getter] fn settle_coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . settle_coin . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_link_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_link_id . clone () . into ()) } # [getter] fn open_only (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . open_only . clone () . into ()) } # [getter] fn order_filter (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_filter . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn cursor (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cursor . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct OrderInfo { inner : venues :: OrderInfo , } # [pymethods] impl OrderInfo { # [staticmethod] fn from_inner (inner : OrderInfo) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_link_id (& self) -> PyResult < String > { Ok (self . inner . order_link_id . clone () . into ()) } # [getter] fn block_trade_id (& self) -> PyResult < String > { Ok (self . inner . block_trade_id . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn price (& self) -> PyResult < String > { Ok (self . inner . price . clone () . into ()) } # [getter] fn qty (& self) -> PyResult < String > { Ok (self . inner . qty . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn is_leverage (& self) -> PyResult < String > { Ok (self . inner . is_leverage . clone () . into ()) } # [getter] fn position_idx (& self) -> PyResult < i64 > { Ok (self . inner . position_idx . clone () . into ()) } # [getter] fn order_status (& self) -> PyResult < PyObject > { Ok (self . inner . order_status . clone () . into ()) } # [getter] fn cancel_type (& self) -> PyResult < String > { Ok (self . inner . cancel_type . clone () . into ()) } # [getter] fn reject_reason (& self) -> PyResult < String > { Ok (self . inner . reject_reason . clone () . into ()) } # [getter] fn avg_price (& self) -> PyResult < String > { Ok (self . inner . avg_price . clone () . into ()) } # [getter] fn leaves_qty (& self) -> PyResult < String > { Ok (self . inner . leaves_qty . clone () . into ()) } # [getter] fn leaves_value (& self) -> PyResult < String > { Ok (self . inner . leaves_value . clone () . into ()) } # [getter] fn cum_exec_qty (& self) -> PyResult < String > { Ok (self . inner . cum_exec_qty . clone () . into ()) } # [getter] fn cum_exec_value (& self) -> PyResult < String > { Ok (self . inner . cum_exec_value . clone () . into ()) } # [getter] fn cum_exec_fee (& self) -> PyResult < String > { Ok (self . inner . cum_exec_fee . clone () . into ()) } # [getter] fn time_in_force (& self) -> PyResult < PyObject > { Ok (self . inner . time_in_force . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn stop_order_type (& self) -> PyResult < String > { Ok (self . inner . stop_order_type . clone () . into ()) } # [getter] fn order_iv (& self) -> PyResult < String > { Ok (self . inner . order_iv . clone () . into ()) } # [getter] fn trigger_price (& self) -> PyResult < String > { Ok (self . inner . trigger_price . clone () . into ()) } # [getter] fn take_profit (& self) -> PyResult < String > { Ok (self . inner . take_profit . clone () . into ()) } # [getter] fn stop_loss (& self) -> PyResult < String > { Ok (self . inner . stop_loss . clone () . into ()) } # [getter] fn tp_trigger_by (& self) -> PyResult < String > { Ok (self . inner . tp_trigger_by . clone () . into ()) } # [getter] fn sl_trigger_by (& self) -> PyResult < String > { Ok (self . inner . sl_trigger_by . clone () . into ()) } # [getter] fn trigger_direction (& self) -> PyResult < i64 > { Ok (self . inner . trigger_direction . clone () . into ()) } # [getter] fn trigger_by (& self) -> PyResult < String > { Ok (self . inner . trigger_by . clone () . into ()) } # [getter] fn last_price_on_created (& self) -> PyResult < String > { Ok (self . inner . last_price_on_created . clone () . into ()) } # [getter] fn reduce_only (& self) -> PyResult < bool > { Ok (self . inner . reduce_only . clone () . into ()) } # [getter] fn close_on_trigger (& self) -> PyResult < bool > { Ok (self . inner . close_on_trigger . clone () . into ()) } # [getter] fn smp_type (& self) -> PyResult < String > { Ok (self . inner . smp_type . clone () . into ()) } # [getter] fn smp_group (& self) -> PyResult < i64 > { Ok (self . inner . smp_group . clone () . into ()) } # [getter] fn smp_order_id (& self) -> PyResult < String > { Ok (self . inner . smp_order_id . clone () . into ()) } # [getter] fn tpsl_mode (& self) -> PyResult < String > { Ok (self . inner . tpsl_mode . clone () . into ()) } # [getter] fn tp_limit_price (& self) -> PyResult < String > { Ok (self . inner . tp_limit_price . clone () . into ()) } # [getter] fn sl_limit_price (& self) -> PyResult < String > { Ok (self . inner . sl_limit_price . clone () . into ()) } # [getter] fn place_type (& self) -> PyResult < String > { Ok (self . inner . place_type . clone () . into ()) } # [getter] fn created_time (& self) -> PyResult < String > { Ok (self . inner . created_time . clone () . into ()) } # [getter] fn updated_time (& self) -> PyResult < String > { Ok (self . inner . updated_time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetOpenOrdersData { inner : venues :: GetOpenOrdersData , } # [pymethods] impl GetOpenOrdersData { # [staticmethod] fn from_inner (inner : GetOpenOrdersData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn next_page_cursor (& self) -> PyResult < String > { Ok (self . inner . next_page_cursor . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetOpenOrdersResponse { inner : venues :: GetOpenOrdersResponse , } # [pymethods] impl GetOpenOrdersResponse { # [staticmethod] fn from_inner (inner : GetOpenOrdersResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_open_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_open_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelOrdersRequest { inner : venues :: BatchCancelOrdersRequest , } # [pymethods] impl BatchCancelOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn request (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . request . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelOrderResult { inner : venues :: BatchCancelOrderResult , } # [pymethods] impl BatchCancelOrderResult { # [staticmethod] fn from_inner (inner : BatchCancelOrderResult) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_link_id (& self) -> PyResult < String > { Ok (self . inner . order_link_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelOrderError { inner : venues :: BatchCancelOrderError , } # [pymethods] impl BatchCancelOrderError { # [staticmethod] fn from_inner (inner : BatchCancelOrderError) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelOrdersData { inner : venues :: BatchCancelOrdersData , } # [pymethods] impl BatchCancelOrdersData { # [staticmethod] fn from_inner (inner : BatchCancelOrdersData) -> Self { Self { inner } } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelOrdersResult { inner : venues :: BatchCancelOrdersResult , } # [pymethods] impl BatchCancelOrdersResult { # [staticmethod] fn from_inner (inner : BatchCancelOrdersResult) -> Self { Self { inner } } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelOrdersExtInfo { inner : venues :: BatchCancelOrdersExtInfo , } # [pymethods] impl BatchCancelOrdersExtInfo { # [staticmethod] fn from_inner (inner : BatchCancelOrdersExtInfo) -> Self { Self { inner } } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchCancelOrdersResponse { inner : venues :: BatchCancelOrdersResponse , } # [pymethods] impl BatchCancelOrdersResponse { # [staticmethod] fn from_inner (inner : BatchCancelOrdersResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn batch_cancel_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . batch_cancel_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct BatchAmendOrdersRequest { inner : venues :: BatchAmendOrdersRequest , } # [pymethods] impl BatchAmendOrdersRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn request (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . request . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchAmendOrderResult { inner : venues :: BatchAmendOrderResult , } # [pymethods] impl BatchAmendOrderResult { # [staticmethod] fn from_inner (inner : BatchAmendOrderResult) -> Self { Self { inner } } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_link_id (& self) -> PyResult < String > { Ok (self . inner . order_link_id . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchAmendOrderError { inner : venues :: BatchAmendOrderError , } # [pymethods] impl BatchAmendOrderError { # [staticmethod] fn from_inner (inner : BatchAmendOrderError) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchAmendOrdersData { inner : venues :: BatchAmendOrdersData , } # [pymethods] impl BatchAmendOrdersData { # [staticmethod] fn from_inner (inner : BatchAmendOrdersData) -> Self { Self { inner } } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchAmendOrdersResult { inner : venues :: BatchAmendOrdersResult , } # [pymethods] impl BatchAmendOrdersResult { # [staticmethod] fn from_inner (inner : BatchAmendOrdersResult) -> Self { Self { inner } } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchAmendOrdersExtInfo { inner : venues :: BatchAmendOrdersExtInfo , } # [pymethods] impl BatchAmendOrdersExtInfo { # [staticmethod] fn from_inner (inner : BatchAmendOrdersExtInfo) -> Self { Self { inner } } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BatchAmendOrdersResponse { inner : venues :: BatchAmendOrdersResponse , } # [pymethods] impl BatchAmendOrdersResponse { # [staticmethod] fn from_inner (inner : BatchAmendOrdersResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn batch_amend_orders <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . batch_amend_orders () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetExecutionListRequest { inner : venues :: GetExecutionListRequest , } # [pymethods] impl GetExecutionListRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn symbol (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_link_id (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . order_link_id . clone () . into ()) } # [getter] fn base_coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . base_coin . clone () . into ()) } # [getter] fn start_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . start_time . clone () . into ()) } # [getter] fn end_time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . end_time . clone () . into ()) } # [getter] fn exec_type (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . exec_type . clone () . into ()) } # [getter] fn limit (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . limit . clone () . into ()) } # [getter] fn cursor (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . cursor . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ExecutionInfo { inner : venues :: ExecutionInfo , } # [pymethods] impl ExecutionInfo { # [staticmethod] fn from_inner (inner : ExecutionInfo) -> Self { Self { inner } } # [getter] fn symbol (& self) -> PyResult < String > { Ok (self . inner . symbol . clone () . into ()) } # [getter] fn order_id (& self) -> PyResult < String > { Ok (self . inner . order_id . clone () . into ()) } # [getter] fn order_link_id (& self) -> PyResult < String > { Ok (self . inner . order_link_id . clone () . into ()) } # [getter] fn side (& self) -> PyResult < PyObject > { Ok (self . inner . side . clone () . into ()) } # [getter] fn order_qty (& self) -> PyResult < String > { Ok (self . inner . order_qty . clone () . into ()) } # [getter] fn order_price (& self) -> PyResult < String > { Ok (self . inner . order_price . clone () . into ()) } # [getter] fn order_type (& self) -> PyResult < PyObject > { Ok (self . inner . order_type . clone () . into ()) } # [getter] fn stop_order_type (& self) -> PyResult < String > { Ok (self . inner . stop_order_type . clone () . into ()) } # [getter] fn exec_fee (& self) -> PyResult < String > { Ok (self . inner . exec_fee . clone () . into ()) } # [getter] fn exec_id (& self) -> PyResult < String > { Ok (self . inner . exec_id . clone () . into ()) } # [getter] fn exec_price (& self) -> PyResult < String > { Ok (self . inner . exec_price . clone () . into ()) } # [getter] fn exec_qty (& self) -> PyResult < String > { Ok (self . inner . exec_qty . clone () . into ()) } # [getter] fn exec_type (& self) -> PyResult < PyObject > { Ok (self . inner . exec_type . clone () . into ()) } # [getter] fn exec_value (& self) -> PyResult < String > { Ok (self . inner . exec_value . clone () . into ()) } # [getter] fn exec_time (& self) -> PyResult < String > { Ok (self . inner . exec_time . clone () . into ()) } # [getter] fn is_maker (& self) -> PyResult < bool > { Ok (self . inner . is_maker . clone () . into ()) } # [getter] fn fee_rate (& self) -> PyResult < String > { Ok (self . inner . fee_rate . clone () . into ()) } # [getter] fn trade_iv (& self) -> PyResult < String > { Ok (self . inner . trade_iv . clone () . into ()) } # [getter] fn mark_iv (& self) -> PyResult < String > { Ok (self . inner . mark_iv . clone () . into ()) } # [getter] fn mark_price (& self) -> PyResult < String > { Ok (self . inner . mark_price . clone () . into ()) } # [getter] fn index_price (& self) -> PyResult < String > { Ok (self . inner . index_price . clone () . into ()) } # [getter] fn underlying_price (& self) -> PyResult < String > { Ok (self . inner . underlying_price . clone () . into ()) } # [getter] fn block_trade_id (& self) -> PyResult < String > { Ok (self . inner . block_trade_id . clone () . into ()) } # [getter] fn closed_size (& self) -> PyResult < String > { Ok (self . inner . closed_size . clone () . into ()) } # [getter] fn seq (& self) -> PyResult < i64 > { Ok (self . inner . seq . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetExecutionListData { inner : venues :: GetExecutionListData , } # [pymethods] impl GetExecutionListData { # [staticmethod] fn from_inner (inner : GetExecutionListData) -> Self { Self { inner } } # [getter] fn category (& self) -> PyResult < PyObject > { Ok (self . inner . category . clone () . into ()) } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } # [getter] fn next_page_cursor (& self) -> PyResult < String > { Ok (self . inner . next_page_cursor . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetExecutionListResponse { inner : venues :: GetExecutionListResponse , } # [pymethods] impl GetExecutionListResponse { # [staticmethod] fn from_inner (inner : GetExecutionListResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pymethods] impl RestClient { fn get_execution_list <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_execution_list () . await }) } } # [pyclass] # [derive (Clone)] pub struct GetWalletBalanceRequest { inner : venues :: GetWalletBalanceRequest , } # [pymethods] impl GetWalletBalanceRequest { # [new] fn new () -> Self { Self { inner : Default :: default () } } # [getter] fn account_type (& self) -> PyResult < PyObject > { Ok (self . inner . account_type . clone () . into ()) } # [getter] fn coin (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . coin . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct BalanceData { inner : venues :: BalanceData , } # [pymethods] impl BalanceData { # [staticmethod] fn from_inner (inner : BalanceData) -> Self { Self { inner } } # [getter] fn coin (& self) -> PyResult < String > { Ok (self . inner . coin . clone () . into ()) } # [getter] fn available_to_withdraw (& self) -> PyResult < String > { Ok (self . inner . available_to_withdraw . clone () . into ()) } # [getter] fn equity (& self) -> PyResult < String > { Ok (self . inner . equity . clone () . into ()) } # [getter] fn wallet_balance (& self) -> PyResult < String > { Ok (self . inner . wallet_balance . clone () . into ()) } # [getter] fn borrowed (& self) -> PyResult < String > { Ok (self . inner . borrowed . clone () . into ()) } # [getter] fn available_to_borrow (& self) -> PyResult < String > { Ok (self . inner . available_to_borrow . clone () . into ()) } # [getter] fn accrued_interest (& self) -> PyResult < String > { Ok (self . inner . accrued_interest . clone () . into ()) } # [getter] fn total_order_im (& self) -> PyResult < String > { Ok (self . inner . total_order_im . clone () . into ()) } # [getter] fn total_position_im (& self) -> PyResult < String > { Ok (self . inner . total_position_im . clone () . into ()) } # [getter] fn total_position_mm (& self) -> PyResult < String > { Ok (self . inner . total_position_mm . clone () . into ()) } # [getter] fn unrealised_pnl (& self) -> PyResult < String > { Ok (self . inner . unrealised_pnl . clone () . into ()) } # [getter] fn cum_realised_pnl (& self) -> PyResult < String > { Ok (self . inner . cum_realised_pnl . clone () . into ()) } # [getter] fn bonus (& self) -> PyResult < String > { Ok (self . inner . bonus . clone () . into ()) } # [getter] fn collateral_switch (& self) -> PyResult < bool > { Ok (self . inner . collateral_switch . clone () . into ()) } # [getter] fn margin_collateral (& self) -> PyResult < bool > { Ok (self . inner . margin_collateral . clone () . into ()) } # [getter] fn spot_hedging_qty (& self) -> PyResult < String > { Ok (self . inner . spot_hedging_qty . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct WalletBalance { inner : venues :: WalletBalance , } # [pymethods] impl WalletBalance { # [staticmethod] fn from_inner (inner : WalletBalance) -> Self { Self { inner } } # [getter] fn account_type (& self) -> PyResult < String > { Ok (self . inner . account_type . clone () . into ()) } # [getter] fn coin (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . coin . clone () . into ()) } # [getter] fn total_equity (& self) -> PyResult < String > { Ok (self . inner . total_equity . clone () . into ()) } # [getter] fn total_wallet_balance (& self) -> PyResult < String > { Ok (self . inner . total_wallet_balance . clone () . into ()) } # [getter] fn total_margin_balance (& self) -> PyResult < String > { Ok (self . inner . total_margin_balance . clone () . into ()) } # [getter] fn total_available_balance (& self) -> PyResult < String > { Ok (self . inner . total_available_balance . clone () . into ()) } # [getter] fn total_perp_upl (& self) -> PyResult < String > { Ok (self . inner . total_perp_upl . clone () . into ()) } # [getter] fn total_initial_margin (& self) -> PyResult < String > { Ok (self . inner . total_initial_margin . clone () . into ()) } # [getter] fn total_maintenance_margin (& self) -> PyResult < String > { Ok (self . inner . total_maintenance_margin . clone () . into ()) } # [getter] fn account_mm_rate (& self) -> PyResult < String > { Ok (self . inner . account_mm_rate . clone () . into ()) } # [getter] fn account_im_rate (& self) -> PyResult < String > { Ok (self . inner . account_im_rate . clone () . into ()) } # [getter] fn account_ltv (& self) -> PyResult < String > { Ok (self . inner . account_ltv . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct GetWalletBalanceResponse { inner : venues :: GetWalletBalanceResponse , } # [pymethods] impl GetWalletBalanceResponse { # [staticmethod] fn from_inner (inner : GetWalletBalanceResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn result (& self) -> PyResult < PyObject > { Ok (self . inner . result . clone () . into ()) } # [getter] fn time (& self) -> PyResult < u64 > { Ok (self . inner . time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct WalletBalanceResult { inner : venues :: WalletBalanceResult , } # [pymethods] impl WalletBalanceResult { # [staticmethod] fn from_inner (inner : WalletBalanceResult) -> Self { Self { inner } } # [getter] fn list (& self) -> PyResult < Vec < PyObject >> { Ok (self . inner . list . clone () . into ()) } } # [pymethods] impl RestClient { fn get_wallet_balance <'py > (& self , py : Python <'py >) -> PyResult <&'py PyAny > { let client = self . inner . clone () ; pyo3_asyncio :: tokio :: future_into_py (py , async move { client . get_wallet_balance () . await }) } } # [pyclass] # [derive (Clone)] pub struct ErrorResponse { inner : venues :: ErrorResponse , } # [pymethods] impl ErrorResponse { # [staticmethod] fn from_inner (inner : ErrorResponse) -> Self { Self { inner } } # [getter] fn ret_code (& self) -> PyResult < i64 > { Ok (self . inner . ret_code . clone () . into ()) } # [getter] fn ret_msg (& self) -> PyResult < String > { Ok (self . inner . ret_msg . clone () . into ()) } # [getter] fn ret_ext_info (& self) -> PyResult < PyObject > { Ok (self . inner . ret_ext_info . clone () . into ()) } # [getter] fn time (& self) -> PyResult < Option < PyObject >> { Ok (self . inner . time . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct ApiError { inner : venues :: ApiError , } # [pymethods] impl ApiError { # [staticmethod] fn from_inner (inner : ApiError) -> Self { Self { inner } } # [getter] fn code (& self) -> PyResult < i64 > { Ok (self . inner . code . clone () . into ()) } # [getter] fn msg (& self) -> PyResult < String > { Ok (self . inner . msg . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub enum EndpointType { Account , Trade , Position , Asset , User , SpotMargin , Broker , CryptoLoan , Earn , InsLoan , Market , } # [pyclass] # [derive (Clone)] pub struct RateLimit { inner : venues :: RateLimit , } # [pymethods] impl RateLimit { # [staticmethod] fn from_inner (inner : RateLimit) -> Self { Self { inner } } # [getter] fn max_requests (& self) -> PyResult < u64 > { Ok (self . inner . max_requests . clone () . into ()) } # [getter] fn window (& self) -> PyResult < PyObject > { Ok (self . inner . window . clone () . into ()) } } # [pyclass] # [derive (Clone)] pub struct RateLimiter { inner : venues :: RateLimiter , } # [pymethods] impl RateLimiter { # [staticmethod] fn from_inner (inner : RateLimiter) -> Self { Self { inner } } } # [doc = " Create the Python module for bybit"] pub fn create_module (py : Python) -> PyResult <& PyModule > { let m = PyModule :: new (py , "bybit") ?; Ok (m) }