//! Generated integration tests for deribit venue public REST API methods
//! 
//! This file is auto-generated by the build script.
//! Do not edit manually.
//! 
//! These tests call all public REST API methods for the venue
//! and run in series to avoid rate limiting issues.

use reqwest::Client;
use std::time::Duration;
use tokio::time::sleep;
use std::error::Error;
use chrono::Utc;
use venues::deribit::public::rest::RestClient;
use venues::deribit::RateLimiter;

const RATE_LIMIT_DELAY_MS: u64 = 1000; // 1 second between requests

async fn create_deribit_client() -> RestClient {
    let client = Client::new();
    let rate_limiter = venues::deribit::RateLimiter::new();
    RestClient::new(
        "https://www.deribit.com",
        client,
        rate_limiter,
    )
}

#[tokio::test]
#[ignore] // Ignored by default to avoid hitting API in regular test runs
async fn test_deribit_all_public_methods_serial() {
    let client = create_deribit_client().await;
    
    // Run all public API method tests in series
    
    // Test 1: get_apr_history
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_apr_history - Success"),
        Err(e) => println!("✗ deribit: get_apr_history - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 2: get_book_summary_by_currency
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_book_summary_by_currency - Success"),
        Err(e) => println!("✗ deribit: get_book_summary_by_currency - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 3: get_book_summary_by_instrument
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_book_summary_by_instrument - Success"),
        Err(e) => println!("✗ deribit: get_book_summary_by_instrument - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 4: get_combo_details
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_combo_details - Success"),
        Err(e) => println!("✗ deribit: get_combo_details - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 5: get_combo_ids
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_combo_ids - Success"),
        Err(e) => println!("✗ deribit: get_combo_ids - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 6: get_combos
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_combos - Success"),
        Err(e) => println!("✗ deribit: get_combos - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 7: get_contract_size
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_contract_size - Success"),
        Err(e) => println!("✗ deribit: get_contract_size - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 8: get_currencies
    match client.get_currencies().await {
        Ok(_) => println!("✓ deribit: get_currencies - Success"),
        Err(e) => println!("✗ deribit: get_currencies - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 9: get_delivery_prices
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_delivery_prices - Success"),
        Err(e) => println!("✗ deribit: get_delivery_prices - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 10: get_expirations
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_expirations - Success"),
        Err(e) => println!("✗ deribit: get_expirations - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 11: get_funding_chart_data
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_funding_chart_data - Success"),
        Err(e) => println!("✗ deribit: get_funding_chart_data - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 12: get_funding_rate_history
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_funding_rate_history - Success"),
        Err(e) => println!("✗ deribit: get_funding_rate_history - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 13: get_funding_rate_value
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_funding_rate_value - Success"),
        Err(e) => println!("✗ deribit: get_funding_rate_value - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 14: get_historical_volatility
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_historical_volatility - Success"),
        Err(e) => println!("✗ deribit: get_historical_volatility - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 15: get_index
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_index - Success"),
        Err(e) => println!("✗ deribit: get_index - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 16: get_index_price
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_index_price - Success"),
        Err(e) => println!("✗ deribit: get_index_price - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 17: get_index_price_names
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_index_price_names - Success"),
        Err(e) => println!("✗ deribit: get_index_price_names - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 18: get_instrument
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_instrument - Success"),
        Err(e) => println!("✗ deribit: get_instrument - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 19: get_instruments
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_instruments - Success"),
        Err(e) => println!("✗ deribit: get_instruments - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 20: get_last_settlements_by_currency
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_last_settlements_by_currency - Success"),
        Err(e) => println!("✗ deribit: get_last_settlements_by_currency - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 21: get_last_settlements_by_instrument
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_last_settlements_by_instrument - Success"),
        Err(e) => println!("✗ deribit: get_last_settlements_by_instrument - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 22: get_last_trades_by_currency
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_last_trades_by_currency - Success"),
        Err(e) => println!("✗ deribit: get_last_trades_by_currency - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 23: get_last_trades_by_currency_and_time
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_last_trades_by_currency_and_time - Success"),
        Err(e) => println!("✗ deribit: get_last_trades_by_currency_and_time - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 24: get_last_trades_by_instrument
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_last_trades_by_instrument - Success"),
        Err(e) => println!("✗ deribit: get_last_trades_by_instrument - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 25: get_last_trades_by_instrument_and_time
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_last_trades_by_instrument_and_time - Success"),
        Err(e) => println!("✗ deribit: get_last_trades_by_instrument_and_time - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 26: get_mark_price_history
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_mark_price_history - Success"),
        Err(e) => println!("✗ deribit: get_mark_price_history - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 27: get_order_book
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_order_book - Success"),
        Err(e) => println!("✗ deribit: get_order_book - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 28: get_order_book_by_instrument_id
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_order_book_by_instrument_id - Success"),
        Err(e) => println!("✗ deribit: get_order_book_by_instrument_id - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 29: get_rfqs
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_rfqs - Success"),
        Err(e) => println!("✗ deribit: get_rfqs - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 30: get_status
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_status - Success"),
        Err(e) => println!("✗ deribit: get_status - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 31: get_supported_index_names
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_supported_index_names - Success"),
        Err(e) => println!("✗ deribit: get_supported_index_names - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 32: get_time
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_time - Success"),
        Err(e) => println!("✗ deribit: get_time - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 33: get_trade_volumes
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_trade_volumes - Success"),
        Err(e) => println!("✗ deribit: get_trade_volumes - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 34: get_tradingview_chart_data
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_tradingview_chart_data - Success"),
        Err(e) => println!("✗ deribit: get_tradingview_chart_data - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 35: get_volatility_index_data
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: get_volatility_index_data - Success"),
        Err(e) => println!("✗ deribit: get_volatility_index_data - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 36: test
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ deribit: test - Success"),
        Err(e) => println!("✗ deribit: test - Error: {:?}", e),
    }
}

#[tokio::test]
#[ignore]
async fn test_deribit_get_currencies_individual() {
    let client = create_deribit_client().await;
    
    let result = client.get_currencies().await;
    
    match result {
        Ok(_) => println!("✓ deribit: get_currencies - Success"),
        Err(e) => {
            println!("✗ deribit: get_currencies - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

