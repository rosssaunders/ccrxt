//! Generated integration tests for cryptocom venue public REST API methods
//! 
//! This file is auto-generated by the build script.
//! Do not edit manually.
//! 
//! These tests call all public REST API methods for the venue
//! and run in series to avoid rate limiting issues.

use reqwest::Client;
use std::time::Duration;
use tokio::time::sleep;
use std::error::Error;
use chrono::Utc;
use venues::cryptocom::public::rest::RestClient;
use venues::cryptocom::RateLimiter;

const RATE_LIMIT_DELAY_MS: u64 = 1000; // 1 second between requests

async fn create_cryptocom_client() -> RestClient {
    let client = Client::new();
    let rate_limiter = venues::cryptocom::RateLimiter::new();
    RestClient::new(
        "https://api.crypto.com",
        client,
        rate_limiter,
    )
}

#[tokio::test]
#[ignore] // Ignored by default to avoid hitting API in regular test runs
async fn test_cryptocom_all_public_methods_serial() {
    let client = create_cryptocom_client().await;
    
    // Run all public API method tests in series
    
    // Test 1: get_announcements
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ cryptocom: get_announcements - Success"),
        Err(e) => println!("✗ cryptocom: get_announcements - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 2: get_book
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ cryptocom: get_book - Success"),
        Err(e) => println!("✗ cryptocom: get_book - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 3: get_candlestick
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ cryptocom: get_candlestick - Success"),
        Err(e) => println!("✗ cryptocom: get_candlestick - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 4: get_conversion_rate
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ cryptocom: get_conversion_rate - Success"),
        Err(e) => println!("✗ cryptocom: get_conversion_rate - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 5: get_expired_settlement_price
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ cryptocom: get_expired_settlement_price - Success"),
        Err(e) => println!("✗ cryptocom: get_expired_settlement_price - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 6: get_instruments
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ cryptocom: get_instruments - Success"),
        Err(e) => println!("✗ cryptocom: get_instruments - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 7: get_insurance
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ cryptocom: get_insurance - Success"),
        Err(e) => println!("✗ cryptocom: get_insurance - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 8: get_risk_parameters
    match client.get_risk_parameters().await {
        Ok(_) => println!("✓ cryptocom: get_risk_parameters - Success"),
        Err(e) => println!("✗ cryptocom: get_risk_parameters - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 9: get_tickers
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ cryptocom: get_tickers - Success"),
        Err(e) => println!("✗ cryptocom: get_tickers - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 10: get_trades
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ cryptocom: get_trades - Success"),
        Err(e) => println!("✗ cryptocom: get_trades - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 11: get_valuations
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ cryptocom: get_valuations - Success"),
        Err(e) => println!("✗ cryptocom: get_valuations - Error: {:?}", e),
    }
}

#[tokio::test]
#[ignore]
async fn test_cryptocom_get_risk_parameters_individual() {
    let client = create_cryptocom_client().await;
    
    let result = client.get_risk_parameters().await;
    
    match result {
        Ok(_) => println!("✓ cryptocom: get_risk_parameters - Success"),
        Err(e) => {
            println!("✗ cryptocom: get_risk_parameters - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

