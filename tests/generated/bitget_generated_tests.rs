//! Generated integration tests for bitget venue public REST API methods
//! 
//! This file is auto-generated by the build script.
//! Do not edit manually.
//! 
//! These tests call all public REST API methods for the venue
//! and run in series to avoid rate limiting issues.

use reqwest::Client;
use std::time::Duration;
use tokio::time::sleep;
use std::error::Error;
use chrono::Utc;
use venues::bitget::public::rest::RestClient;
use venues::bitget::RateLimiter;

const RATE_LIMIT_DELAY_MS: u64 = 1000; // 1 second between requests

async fn create_bitget_client() -> RestClient {
    let client = Client::new();
    let rate_limiter = venues::bitget::RateLimiter::new();
    RestClient::new(
        "https://api.bitget.com",
        client,
        rate_limiter,
    )
}

#[tokio::test]
#[ignore] // Ignored by default to avoid hitting API in regular test runs
async fn test_bitget_all_public_methods_serial() {
    let client = create_bitget_client().await;
    
    // Run all public API method tests in series
    
    // Test 1: get_candlestick
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitget: get_candlestick - Success"),
        Err(e) => println!("✗ bitget: get_candlestick - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 2: get_coin_info
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitget: get_coin_info - Success"),
        Err(e) => println!("✗ bitget: get_coin_info - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 3: get_history_candlestick
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitget: get_history_candlestick - Success"),
        Err(e) => println!("✗ bitget: get_history_candlestick - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 4: get_market_trades
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitget: get_market_trades - Success"),
        Err(e) => println!("✗ bitget: get_market_trades - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 5: get_merge_depth
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitget: get_merge_depth - Success"),
        Err(e) => println!("✗ bitget: get_merge_depth - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 6: get_orderbook
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitget: get_orderbook - Success"),
        Err(e) => println!("✗ bitget: get_orderbook - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 7: get_recent_trades
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitget: get_recent_trades - Success"),
        Err(e) => println!("✗ bitget: get_recent_trades - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 8: get_symbol_info
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitget: get_symbol_info - Success"),
        Err(e) => println!("✗ bitget: get_symbol_info - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 9: get_ticker
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitget: get_ticker - Success"),
        Err(e) => println!("✗ bitget: get_ticker - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 10: get_vip_fee_rate
    match client.get_vip_fee_rate().await {
        Ok(_) => println!("✓ bitget: get_vip_fee_rate - Success"),
        Err(e) => println!("✗ bitget: get_vip_fee_rate - Error: {:?}", e),
    }
}

#[tokio::test]
#[ignore]
async fn test_bitget_get_vip_fee_rate_individual() {
    let client = create_bitget_client().await;
    
    let result = client.get_vip_fee_rate().await;
    
    match result {
        Ok(_) => println!("✓ bitget: get_vip_fee_rate - Success"),
        Err(e) => {
            println!("✗ bitget: get_vip_fee_rate - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

