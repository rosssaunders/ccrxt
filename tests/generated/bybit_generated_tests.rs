//! Generated integration tests for bybit venue public REST API methods
//! 
//! This file is auto-generated by the build script.
//! Do not edit manually.
//! 
//! These tests call all public REST API methods for the venue
//! and run in series to avoid rate limiting issues.

use reqwest::Client;
use std::time::Duration;
use tokio::time::sleep;
use std::error::Error;
use chrono::Utc;
use venues::bybit::public::rest::RestClient;
use venues::bybit::RateLimiter;

const RATE_LIMIT_DELAY_MS: u64 = 1000; // 1 second between requests

async fn create_bybit_client() -> RestClient {
    let client = Client::new();
    let rate_limiter = venues::bybit::RateLimiter::new();
    RestClient::new(
        "https://api.bybit.com",
        client,
        rate_limiter,
    )
}

#[tokio::test]
#[ignore] // Ignored by default to avoid hitting API in regular test runs
async fn test_bybit_all_public_methods_serial() {
    let client = create_bybit_client().await;
    
    // Run all public API method tests in series
    
    // Test 1: get_borrowable_coins
    match client.get_borrowable_coins().await {
        Ok(_) => println!("✓ bybit: get_borrowable_coins - Success"),
        Err(e) => println!("✗ bybit: get_borrowable_coins - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 2: get_collateral_coins
    match client.get_collateral_coins().await {
        Ok(_) => println!("✓ bybit: get_collateral_coins - Success"),
        Err(e) => println!("✗ bybit: get_collateral_coins - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 3: get_collateral_ratio
    match client.get_collateral_ratio().await {
        Ok(_) => println!("✓ bybit: get_collateral_ratio - Success"),
        Err(e) => println!("✗ bybit: get_collateral_ratio - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 4: get_delivery_price
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_delivery_price - Success"),
        Err(e) => println!("✗ bybit: get_delivery_price - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 5: get_funding_history
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_funding_history - Success"),
        Err(e) => println!("✗ bybit: get_funding_history - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 6: get_historical_volatility
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_historical_volatility - Success"),
        Err(e) => println!("✗ bybit: get_historical_volatility - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 7: get_index_price_kline
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_index_price_kline - Success"),
        Err(e) => println!("✗ bybit: get_index_price_kline - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 8: get_ins_margin_coin_info
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_ins_margin_coin_info - Success"),
        Err(e) => println!("✗ bybit: get_ins_margin_coin_info - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 9: get_ins_product_info
    match client.get_ins_product_info().await {
        Ok(_) => println!("✓ bybit: get_ins_product_info - Success"),
        Err(e) => println!("✗ bybit: get_ins_product_info - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 10: get_instruments_info
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_instruments_info - Success"),
        Err(e) => println!("✗ bybit: get_instruments_info - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 11: get_insurance
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_insurance - Success"),
        Err(e) => println!("✗ bybit: get_insurance - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 12: get_kline
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_kline - Success"),
        Err(e) => println!("✗ bybit: get_kline - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 13: get_long_short_ratio
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_long_short_ratio - Success"),
        Err(e) => println!("✗ bybit: get_long_short_ratio - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 14: get_mark_price_kline
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_mark_price_kline - Success"),
        Err(e) => println!("✗ bybit: get_mark_price_kline - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 15: get_open_interest
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_open_interest - Success"),
        Err(e) => println!("✗ bybit: get_open_interest - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 16: get_orderbook
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_orderbook - Success"),
        Err(e) => println!("✗ bybit: get_orderbook - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 17: get_premium_index_price_kline
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_premium_index_price_kline - Success"),
        Err(e) => println!("✗ bybit: get_premium_index_price_kline - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 18: get_recent_trades
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_recent_trades - Success"),
        Err(e) => println!("✗ bybit: get_recent_trades - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 19: get_risk_limit
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_risk_limit - Success"),
        Err(e) => println!("✗ bybit: get_risk_limit - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 20: get_server_time
    match client.get_server_time().await {
        Ok(_) => println!("✓ bybit: get_server_time - Success"),
        Err(e) => println!("✗ bybit: get_server_time - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 21: get_tickers
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_tickers - Success"),
        Err(e) => println!("✗ bybit: get_tickers - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 22: get_vip_margin_data
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bybit: get_vip_margin_data - Success"),
        Err(e) => println!("✗ bybit: get_vip_margin_data - Error: {:?}", e),
    }
}

#[tokio::test]
#[ignore]
async fn test_bybit_get_borrowable_coins_individual() {
    let client = create_bybit_client().await;
    
    let result = client.get_borrowable_coins().await;
    
    match result {
        Ok(_) => println!("✓ bybit: get_borrowable_coins - Success"),
        Err(e) => {
            println!("✗ bybit: get_borrowable_coins - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bybit_get_collateral_coins_individual() {
    let client = create_bybit_client().await;
    
    let result = client.get_collateral_coins().await;
    
    match result {
        Ok(_) => println!("✓ bybit: get_collateral_coins - Success"),
        Err(e) => {
            println!("✗ bybit: get_collateral_coins - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bybit_get_collateral_ratio_individual() {
    let client = create_bybit_client().await;
    
    let result = client.get_collateral_ratio().await;
    
    match result {
        Ok(_) => println!("✓ bybit: get_collateral_ratio - Success"),
        Err(e) => {
            println!("✗ bybit: get_collateral_ratio - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bybit_get_ins_product_info_individual() {
    let client = create_bybit_client().await;
    
    let result = client.get_ins_product_info().await;
    
    match result {
        Ok(_) => println!("✓ bybit: get_ins_product_info - Success"),
        Err(e) => {
            println!("✗ bybit: get_ins_product_info - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bybit_get_server_time_individual() {
    let client = create_bybit_client().await;
    
    let result = client.get_server_time().await;
    
    match result {
        Ok(_) => println!("✓ bybit: get_server_time - Success"),
        Err(e) => {
            println!("✗ bybit: get_server_time - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

