//! Generated integration tests for bullish venue public REST API methods
//! 
//! This file is auto-generated by the build script.
//! Do not edit manually.
//! 
//! These tests call all public REST API methods for the venue
//! and run in series to avoid rate limiting issues.

use reqwest::Client;
use std::time::Duration;
use tokio::time::sleep;
use std::error::Error;
use chrono::Utc;
use venues::bullish::public::rest::RestClient;
use venues::bullish::RateLimiter;

const RATE_LIMIT_DELAY_MS: u64 = 1000; // 1 second between requests

async fn create_bullish_client() -> RestClient {
    let client = Client::new();
    let rate_limiter = venues::bullish::RateLimiter::new();
    RestClient::new(
        "https://api.exchange.bullish.com",
        client,
        rate_limiter,
    )
}

#[tokio::test]
#[ignore] // Ignored by default to avoid hitting API in regular test runs
async fn test_bullish_all_public_methods_serial() {
    let client = create_bullish_client().await;
    
    // Run all public API method tests in series
    
    // Test 1: get_asset
    match client.get_asset().await {
        Ok(_) => println!("✓ bullish: get_asset - Success"),
        Err(e) => println!("✗ bullish: get_asset - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 2: get_assets
    match client.get_assets().await {
        Ok(_) => println!("✓ bullish: get_assets - Success"),
        Err(e) => println!("✗ bullish: get_assets - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 3: get_candles
    match client.get_candles().await {
        Ok(_) => println!("✓ bullish: get_candles - Success"),
        Err(e) => println!("✗ bullish: get_candles - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 4: get_index_price_by_symbol
    match client.get_index_price_by_symbol().await {
        Ok(_) => println!("✓ bullish: get_index_price_by_symbol - Success"),
        Err(e) => println!("✗ bullish: get_index_price_by_symbol - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 5: get_index_prices
    match client.get_index_prices().await {
        Ok(_) => println!("✓ bullish: get_index_prices - Success"),
        Err(e) => println!("✗ bullish: get_index_prices - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 6: get_market
    match client.get_market().await {
        Ok(_) => println!("✓ bullish: get_market - Success"),
        Err(e) => println!("✗ bullish: get_market - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 7: get_markets
    match client.get_markets().await {
        Ok(_) => println!("✓ bullish: get_markets - Success"),
        Err(e) => println!("✗ bullish: get_markets - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 8: get_nonce
    match client.get_nonce().await {
        Ok(_) => println!("✓ bullish: get_nonce - Success"),
        Err(e) => println!("✗ bullish: get_nonce - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 9: get_orderbook
    match client.get_orderbook().await {
        Ok(_) => println!("✓ bullish: get_orderbook - Success"),
        Err(e) => println!("✗ bullish: get_orderbook - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 10: get_public_trades
    match client.get_public_trades().await {
        Ok(_) => println!("✓ bullish: get_public_trades - Success"),
        Err(e) => println!("✗ bullish: get_public_trades - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 11: get_server_time
    match client.get_server_time().await {
        Ok(_) => println!("✓ bullish: get_server_time - Success"),
        Err(e) => println!("✗ bullish: get_server_time - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 12: get_ticker
    match client.get_ticker().await {
        Ok(_) => println!("✓ bullish: get_ticker - Success"),
        Err(e) => println!("✗ bullish: get_ticker - Error: {:?}", e),
    }
}

#[tokio::test]
#[ignore]
async fn test_bullish_get_asset_individual() {
    let client = create_bullish_client().await;
    
    let result = client.get_asset().await;
    
    match result {
        Ok(_) => println!("✓ bullish: get_asset - Success"),
        Err(e) => {
            println!("✗ bullish: get_asset - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bullish_get_assets_individual() {
    let client = create_bullish_client().await;
    
    let result = client.get_assets().await;
    
    match result {
        Ok(_) => println!("✓ bullish: get_assets - Success"),
        Err(e) => {
            println!("✗ bullish: get_assets - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bullish_get_candles_individual() {
    let client = create_bullish_client().await;
    
    let result = client.get_candles().await;
    
    match result {
        Ok(_) => println!("✓ bullish: get_candles - Success"),
        Err(e) => {
            println!("✗ bullish: get_candles - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bullish_get_index_price_by_symbol_individual() {
    let client = create_bullish_client().await;
    
    let result = client.get_index_price_by_symbol().await;
    
    match result {
        Ok(_) => println!("✓ bullish: get_index_price_by_symbol - Success"),
        Err(e) => {
            println!("✗ bullish: get_index_price_by_symbol - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bullish_get_index_prices_individual() {
    let client = create_bullish_client().await;
    
    let result = client.get_index_prices().await;
    
    match result {
        Ok(_) => println!("✓ bullish: get_index_prices - Success"),
        Err(e) => {
            println!("✗ bullish: get_index_prices - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bullish_get_market_individual() {
    let client = create_bullish_client().await;
    
    let result = client.get_market().await;
    
    match result {
        Ok(_) => println!("✓ bullish: get_market - Success"),
        Err(e) => {
            println!("✗ bullish: get_market - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bullish_get_markets_individual() {
    let client = create_bullish_client().await;
    
    let result = client.get_markets().await;
    
    match result {
        Ok(_) => println!("✓ bullish: get_markets - Success"),
        Err(e) => {
            println!("✗ bullish: get_markets - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bullish_get_nonce_individual() {
    let client = create_bullish_client().await;
    
    let result = client.get_nonce().await;
    
    match result {
        Ok(_) => println!("✓ bullish: get_nonce - Success"),
        Err(e) => {
            println!("✗ bullish: get_nonce - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bullish_get_orderbook_individual() {
    let client = create_bullish_client().await;
    
    let result = client.get_orderbook().await;
    
    match result {
        Ok(_) => println!("✓ bullish: get_orderbook - Success"),
        Err(e) => {
            println!("✗ bullish: get_orderbook - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bullish_get_public_trades_individual() {
    let client = create_bullish_client().await;
    
    let result = client.get_public_trades().await;
    
    match result {
        Ok(_) => println!("✓ bullish: get_public_trades - Success"),
        Err(e) => {
            println!("✗ bullish: get_public_trades - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bullish_get_server_time_individual() {
    let client = create_bullish_client().await;
    
    let result = client.get_server_time().await;
    
    match result {
        Ok(_) => println!("✓ bullish: get_server_time - Success"),
        Err(e) => {
            println!("✗ bullish: get_server_time - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bullish_get_ticker_individual() {
    let client = create_bullish_client().await;
    
    let result = client.get_ticker().await;
    
    match result {
        Ok(_) => println!("✓ bullish: get_ticker - Success"),
        Err(e) => {
            println!("✗ bullish: get_ticker - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

