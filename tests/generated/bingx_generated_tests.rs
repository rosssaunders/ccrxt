//! Generated integration tests for bingx venue public REST API methods
//! 
//! This file is auto-generated by the build script.
//! Do not edit manually.
//! 
//! These tests call all public REST API methods for the venue
//! and run in series to avoid rate limiting issues.

use reqwest::Client;
use std::time::Duration;
use tokio::time::sleep;
use std::error::Error;
use chrono::Utc;
use venues::bingx::public::rest::RestClient;
use venues::bingx::public::rest::{GetSymbolsRequest, Get24hrTickerRequest, GetServerTimeRequest};
use venues::bingx::RateLimiter;

const RATE_LIMIT_DELAY_MS: u64 = 1000; // 1 second between requests

async fn create_bingx_client() -> RestClient {
    let client = Client::new();
    let rate_limiter = venues::bingx::RateLimiter::new();
    RestClient::new(
        "https://open-api.bingx.com",
        client,
        rate_limiter,
    )
}

#[tokio::test]
#[ignore] // Ignored by default to avoid hitting API in regular test runs
async fn test_bingx_all_public_methods_serial() {
    let client = create_bingx_client().await;
    
    // Run all public API method tests in series
    
    // Test 1: get_24hr_ticker
    match { let timestamp = chrono::Utc::now().timestamp_millis(); let request = Get24hrTickerRequest::new(timestamp); client.get_24hr_ticker(&request).await } {
        Ok(_) => println!("✓ bingx: get_24hr_ticker - Success"),
        Err(e) => println!("✗ bingx: get_24hr_ticker - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 2: get_historical_kline
    match { let timestamp = chrono::Utc::now().timestamp_millis(); let request = GetHistoricalKlineRequest::new(timestamp); client.get_historical_kline(&request).await } {
        Ok(_) => println!("✓ bingx: get_historical_kline - Success"),
        Err(e) => println!("✗ bingx: get_historical_kline - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 3: get_kline
    match { let timestamp = chrono::Utc::now().timestamp_millis(); let request = GetKlineRequest::new(timestamp); client.get_kline(&request).await } {
        Ok(_) => println!("✓ bingx: get_kline - Success"),
        Err(e) => println!("✗ bingx: get_kline - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 4: get_old_trade
    match { let timestamp = chrono::Utc::now().timestamp_millis(); let request = GetOldTradeRequest::new(timestamp); client.get_old_trade(&request).await } {
        Ok(_) => println!("✓ bingx: get_old_trade - Success"),
        Err(e) => println!("✗ bingx: get_old_trade - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 5: get_order_book
    match { let timestamp = chrono::Utc::now().timestamp_millis(); let request = GetOrderBookRequest::new(timestamp); client.get_order_book(&request).await } {
        Ok(_) => println!("✓ bingx: get_order_book - Success"),
        Err(e) => println!("✗ bingx: get_order_book - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 6: get_order_book_aggregation
    match { let timestamp = chrono::Utc::now().timestamp_millis(); let request = GetOrderBookAggregationRequest::new(timestamp); client.get_order_book_aggregation(&request).await } {
        Ok(_) => println!("✓ bingx: get_order_book_aggregation - Success"),
        Err(e) => println!("✗ bingx: get_order_book_aggregation - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 7: get_recent_trades
    match { let timestamp = chrono::Utc::now().timestamp_millis(); let request = GetRecentTradesRequest::new(timestamp); client.get_recent_trades(&request).await } {
        Ok(_) => println!("✓ bingx: get_recent_trades - Success"),
        Err(e) => println!("✗ bingx: get_recent_trades - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 8: get_server_time
    match client.get_server_time().await {
        Ok(_) => println!("✓ bingx: get_server_time - Success"),
        Err(e) => println!("✗ bingx: get_server_time - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 9: get_symbol_order_book_ticker
    match { let timestamp = chrono::Utc::now().timestamp_millis(); let request = GetSymbolOrderBookTickerRequest::new(timestamp); client.get_symbol_order_book_ticker(&request).await } {
        Ok(_) => println!("✓ bingx: get_symbol_order_book_ticker - Success"),
        Err(e) => println!("✗ bingx: get_symbol_order_book_ticker - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 10: get_symbol_price_ticker
    match { let timestamp = chrono::Utc::now().timestamp_millis(); let request = GetSymbolPriceTickerRequest::new(timestamp); client.get_symbol_price_ticker(&request).await } {
        Ok(_) => println!("✓ bingx: get_symbol_price_ticker - Success"),
        Err(e) => println!("✗ bingx: get_symbol_price_ticker - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 11: get_symbols
    match { let timestamp = chrono::Utc::now().timestamp_millis(); let request = GetSymbolsRequest::new(timestamp); client.get_symbols(&request).await } {
        Ok(_) => println!("✓ bingx: get_symbols - Success"),
        Err(e) => println!("✗ bingx: get_symbols - Error: {:?}", e),
    }
}

#[tokio::test]
#[ignore]
async fn test_bingx_get_24hr_ticker_individual() {
    let client = create_bingx_client().await;
    
    let timestamp = chrono::Utc::now().timestamp_millis();
    let request = Get24hrTickerRequest::new(timestamp);
    let result = client.get_24hr_ticker(&request).await;
    
    match result {
        Ok(_) => println!("✓ bingx: get_24hr_ticker - Success"),
        Err(e) => {
            println!("✗ bingx: get_24hr_ticker - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bingx_get_historical_kline_individual() {
    let client = create_bingx_client().await;
    
    let timestamp = chrono::Utc::now().timestamp_millis();
    let request = GetHistoricalKlineRequest::new(timestamp);
    let result = client.get_historical_kline(&request).await;
    
    match result {
        Ok(_) => println!("✓ bingx: get_historical_kline - Success"),
        Err(e) => {
            println!("✗ bingx: get_historical_kline - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bingx_get_kline_individual() {
    let client = create_bingx_client().await;
    
    let timestamp = chrono::Utc::now().timestamp_millis();
    let request = GetKlineRequest::new(timestamp);
    let result = client.get_kline(&request).await;
    
    match result {
        Ok(_) => println!("✓ bingx: get_kline - Success"),
        Err(e) => {
            println!("✗ bingx: get_kline - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bingx_get_old_trade_individual() {
    let client = create_bingx_client().await;
    
    let timestamp = chrono::Utc::now().timestamp_millis();
    let request = GetOldTradeRequest::new(timestamp);
    let result = client.get_old_trade(&request).await;
    
    match result {
        Ok(_) => println!("✓ bingx: get_old_trade - Success"),
        Err(e) => {
            println!("✗ bingx: get_old_trade - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bingx_get_order_book_individual() {
    let client = create_bingx_client().await;
    
    let timestamp = chrono::Utc::now().timestamp_millis();
    let request = GetOrderBookRequest::new(timestamp);
    let result = client.get_order_book(&request).await;
    
    match result {
        Ok(_) => println!("✓ bingx: get_order_book - Success"),
        Err(e) => {
            println!("✗ bingx: get_order_book - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bingx_get_order_book_aggregation_individual() {
    let client = create_bingx_client().await;
    
    let timestamp = chrono::Utc::now().timestamp_millis();
    let request = GetOrderBookAggregationRequest::new(timestamp);
    let result = client.get_order_book_aggregation(&request).await;
    
    match result {
        Ok(_) => println!("✓ bingx: get_order_book_aggregation - Success"),
        Err(e) => {
            println!("✗ bingx: get_order_book_aggregation - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bingx_get_recent_trades_individual() {
    let client = create_bingx_client().await;
    
    let timestamp = chrono::Utc::now().timestamp_millis();
    let request = GetRecentTradesRequest::new(timestamp);
    let result = client.get_recent_trades(&request).await;
    
    match result {
        Ok(_) => println!("✓ bingx: get_recent_trades - Success"),
        Err(e) => {
            println!("✗ bingx: get_recent_trades - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bingx_get_server_time_individual() {
    let client = create_bingx_client().await;
    
    let result = client.get_server_time().await;
    
    match result {
        Ok(_) => println!("✓ bingx: get_server_time - Success"),
        Err(e) => {
            println!("✗ bingx: get_server_time - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bingx_get_symbol_order_book_ticker_individual() {
    let client = create_bingx_client().await;
    
    let timestamp = chrono::Utc::now().timestamp_millis();
    let request = GetSymbolOrderBookTickerRequest::new(timestamp);
    let result = client.get_symbol_order_book_ticker(&request).await;
    
    match result {
        Ok(_) => println!("✓ bingx: get_symbol_order_book_ticker - Success"),
        Err(e) => {
            println!("✗ bingx: get_symbol_order_book_ticker - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bingx_get_symbol_price_ticker_individual() {
    let client = create_bingx_client().await;
    
    let timestamp = chrono::Utc::now().timestamp_millis();
    let request = GetSymbolPriceTickerRequest::new(timestamp);
    let result = client.get_symbol_price_ticker(&request).await;
    
    match result {
        Ok(_) => println!("✓ bingx: get_symbol_price_ticker - Success"),
        Err(e) => {
            println!("✗ bingx: get_symbol_price_ticker - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_bingx_get_symbols_individual() {
    let client = create_bingx_client().await;
    
    let timestamp = chrono::Utc::now().timestamp_millis();
    let request = GetSymbolsRequest::new(timestamp);
    let result = client.get_symbols(&request).await;
    
    match result {
        Ok(_) => println!("✓ bingx: get_symbols - Success"),
        Err(e) => {
            println!("✗ bingx: get_symbols - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

