//! Generated integration tests for bitmart venue public REST API methods
//! 
//! This file is auto-generated by the build script.
//! Do not edit manually.
//! 
//! These tests call all public REST API methods for the venue
//! and run in series to avoid rate limiting issues.

use reqwest::Client;
use std::time::Duration;
use tokio::time::sleep;
use std::error::Error;
use chrono::Utc;
use venues::bitmart::spot::public::rest::RestClient;
use venues::bitmart::RateLimiter;

const RATE_LIMIT_DELAY_MS: u64 = 1000; // 1 second between requests

async fn create_bitmart_client() -> RestClient {
    let client = Client::new();
    let rate_limiter = venues::bitmart::RateLimiter::new();
    RestClient::new(
        "https://api-cloud.bitmart.com",
        client,
        rate_limiter,
    )
}

#[tokio::test]
#[ignore] // Ignored by default to avoid hitting API in regular test runs
async fn test_bitmart_all_public_methods_serial() {
    let client = create_bitmart_client().await;
    
    // Run all public API method tests in series
    
    // Test 1: get_currency_list
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitmart: get_currency_list - Success"),
        Err(e) => println!("✗ bitmart: get_currency_list - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 2: get_depth
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitmart: get_depth - Success"),
        Err(e) => println!("✗ bitmart: get_depth - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 3: get_history_kline
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitmart: get_history_kline - Success"),
        Err(e) => println!("✗ bitmart: get_history_kline - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 4: get_latest_kline
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitmart: get_latest_kline - Success"),
        Err(e) => println!("✗ bitmart: get_latest_kline - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 5: get_recent_trades
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitmart: get_recent_trades - Success"),
        Err(e) => println!("✗ bitmart: get_recent_trades - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 6: get_ticker
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitmart: get_ticker - Success"),
        Err(e) => println!("✗ bitmart: get_ticker - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 7: get_ticker_all_pairs
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitmart: get_ticker_all_pairs - Success"),
        Err(e) => println!("✗ bitmart: get_ticker_all_pairs - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 8: get_trading_pair_details
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitmart: get_trading_pair_details - Success"),
        Err(e) => println!("✗ bitmart: get_trading_pair_details - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 9: get_trading_pairs_list
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ bitmart: get_trading_pairs_list - Success"),
        Err(e) => println!("✗ bitmart: get_trading_pairs_list - Error: {:?}", e),
    }
}

