//! Generated integration tests for okx venue public REST API methods
//! 
//! This file is auto-generated by the build script.
//! Do not edit manually.
//! 
//! These tests call all public REST API methods for the venue
//! and run in series to avoid rate limiting issues.

use reqwest::Client;
use std::time::Duration;
use tokio::time::sleep;
use std::error::Error;
use chrono::Utc;
use venues::okx::public::rest::RestClient;
use venues::okx::RateLimiter;

const RATE_LIMIT_DELAY_MS: u64 = 1000; // 1 second between requests

async fn create_okx_client() -> RestClient {
    let client = Client::new();
    let rate_limiter = venues::okx::RateLimiter::new();
    RestClient::new(
        "https://www.okx.com",
        client,
        rate_limiter,
    )
}

#[tokio::test]
#[ignore] // Ignored by default to avoid hitting API in regular test runs
async fn test_okx_all_public_methods_serial() {
    let client = create_okx_client().await;
    
    // Run all public API method tests in series
    
    // Test 1: convert_contract_coin
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: convert_contract_coin - Success"),
        Err(e) => println!("✗ okx: convert_contract_coin - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 2: get_delivery_exercise_history
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_delivery_exercise_history - Success"),
        Err(e) => println!("✗ okx: get_delivery_exercise_history - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 3: get_discount_rate_interest_free_quota
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_discount_rate_interest_free_quota - Success"),
        Err(e) => println!("✗ okx: get_discount_rate_interest_free_quota - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 4: get_economic_calendar
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_economic_calendar - Success"),
        Err(e) => println!("✗ okx: get_economic_calendar - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 5: get_estimated_price
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_estimated_price - Success"),
        Err(e) => println!("✗ okx: get_estimated_price - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 6: get_estimated_settlement_info
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_estimated_settlement_info - Success"),
        Err(e) => println!("✗ okx: get_estimated_settlement_info - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 7: get_exchange_rate
    match client.get_exchange_rate().await {
        Ok(_) => println!("✓ okx: get_exchange_rate - Success"),
        Err(e) => println!("✗ okx: get_exchange_rate - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 8: get_funding_rate
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_funding_rate - Success"),
        Err(e) => println!("✗ okx: get_funding_rate - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 9: get_funding_rate_history
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_funding_rate_history - Success"),
        Err(e) => println!("✗ okx: get_funding_rate_history - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 10: get_history_index_candles
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_history_index_candles - Success"),
        Err(e) => println!("✗ okx: get_history_index_candles - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 11: get_history_mark_price_candles
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_history_mark_price_candles - Success"),
        Err(e) => println!("✗ okx: get_history_mark_price_candles - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 12: get_index_candles
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_index_candles - Success"),
        Err(e) => println!("✗ okx: get_index_candles - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 13: get_index_components
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_index_components - Success"),
        Err(e) => println!("✗ okx: get_index_components - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 14: get_index_tickers
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_index_tickers - Success"),
        Err(e) => println!("✗ okx: get_index_tickers - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 15: get_instrument_tick_bands
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_instrument_tick_bands - Success"),
        Err(e) => println!("✗ okx: get_instrument_tick_bands - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 16: get_instruments
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_instruments - Success"),
        Err(e) => println!("✗ okx: get_instruments - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 17: get_insurance_fund
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_insurance_fund - Success"),
        Err(e) => println!("✗ okx: get_insurance_fund - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 18: get_interest_rate_loan_quota
    match client.get_interest_rate_loan_quota().await {
        Ok(_) => println!("✓ okx: get_interest_rate_loan_quota - Success"),
        Err(e) => println!("✗ okx: get_interest_rate_loan_quota - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 19: get_mark_price
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_mark_price - Success"),
        Err(e) => println!("✗ okx: get_mark_price - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 20: get_mark_price_candles
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_mark_price_candles - Success"),
        Err(e) => println!("✗ okx: get_mark_price_candles - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 21: get_mark_price_candles_history
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_mark_price_candles_history - Success"),
        Err(e) => println!("✗ okx: get_mark_price_candles_history - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 22: get_open_interest
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_open_interest - Success"),
        Err(e) => println!("✗ okx: get_open_interest - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 23: get_opt_summary
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_opt_summary - Success"),
        Err(e) => println!("✗ okx: get_opt_summary - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 24: get_position_tiers
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_position_tiers - Success"),
        Err(e) => println!("✗ okx: get_position_tiers - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 25: get_premium_history
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_premium_history - Success"),
        Err(e) => println!("✗ okx: get_premium_history - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 26: get_price_limit
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_price_limit - Success"),
        Err(e) => println!("✗ okx: get_price_limit - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 27: get_settlement_history
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_settlement_history - Success"),
        Err(e) => println!("✗ okx: get_settlement_history - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 28: get_time
    match client.get_time().await {
        Ok(_) => println!("✓ okx: get_time - Success"),
        Err(e) => println!("✗ okx: get_time - Error: {:?}", e),
    }
    
    // Rate limiting delay
    sleep(Duration::from_millis(RATE_LIMIT_DELAY_MS)).await;
    
    // Test 29: get_underlying
    match (Ok(serde_json::Value::Null) as Result<serde_json::Value, Box<dyn std::error::Error>>) {
        Ok(_) => println!("✓ okx: get_underlying - Success"),
        Err(e) => println!("✗ okx: get_underlying - Error: {:?}", e),
    }
}

#[tokio::test]
#[ignore]
async fn test_okx_get_exchange_rate_individual() {
    let client = create_okx_client().await;
    
    let result = client.get_exchange_rate().await;
    
    match result {
        Ok(_) => println!("✓ okx: get_exchange_rate - Success"),
        Err(e) => {
            println!("✗ okx: get_exchange_rate - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_okx_get_interest_rate_loan_quota_individual() {
    let client = create_okx_client().await;
    
    let result = client.get_interest_rate_loan_quota().await;
    
    match result {
        Ok(_) => println!("✓ okx: get_interest_rate_loan_quota - Success"),
        Err(e) => {
            println!("✗ okx: get_interest_rate_loan_quota - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

#[tokio::test]
#[ignore]
async fn test_okx_get_time_individual() {
    let client = create_okx_client().await;
    
    let result = client.get_time().await;
    
    match result {
        Ok(_) => println!("✓ okx: get_time - Success"),
        Err(e) => {
            println!("✗ okx: get_time - Error: {:?}", e);
            // Don't fail the test for API errors, just log them
        }
    }
}

