use serde::{Deserialize, Serialize};

use crate::kucoin::spot::{ResponseHeaders, RestResponse, Result};

/// Endpoint URL for Add Margin
const ADD_MARGIN_ENDPOINT: &str = "/api/v1/position/margin/deposit-margin";

/// Request parameters for adding isolated margin to a position.
#[derive(Debug, Clone, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct AddMarginRequest {
    /// Trading symbol (e.g., "XBTUSDTM"). Required parameter.
    pub symbol: String,

    /// Margin amount to add (minimum margin amount â‰¥ 0.00001667XBT). Required parameter.
    pub margin: f64,

    /// A unique ID generated by the user to ensure the operation is processed only once.
    /// Maximum length cannot exceed 36 characters. Optional parameter.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub biz_no: Option<String>,
}

/// Response data from the add isolated margin endpoint.
#[derive(Debug, Clone, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct AddMarginResponse {
    /// Position ID
    pub id: String,

    /// Trading symbol
    pub symbol: String,

    /// Auto deposit margin status (true/false)
    pub auto_deposit: bool,

    /// Maintenance margin requirement
    pub maint_margin_req: f64,

    /// Risk limit
    pub risk_limit: i64,

    /// Real leverage of the position
    pub real_leverage: f64,

    /// Cross mode or not
    pub cross_mode: bool,

    /// ADL ranking percentile
    #[serde(rename = "delevPercentage")]
    pub deleverage_percentage: f64,

    /// Open time timestamp
    pub opening_timestamp: i64,

    /// Current timestamp
    pub current_timestamp: i64,

    /// Current position quantity
    pub current_qty: i64,

    /// Current position value
    pub current_cost: f64,

    /// Current commission
    pub current_comm: f64,

    /// Unrealised value
    pub unrealised_cost: f64,

    /// Accumulated realised gross profit value
    pub realised_gross_cost: f64,

    /// Realised profit and loss
    pub realised_cost: f64,

    /// Open or not
    pub is_open: bool,

    /// Mark price
    pub mark_price: f64,

    /// Mark value
    pub mark_value: f64,

    /// Position value
    pub pos_cost: f64,

    /// Position cross percentage
    pub pos_cross: f64,

    /// Position initial margin
    pub pos_init: f64,

    /// Position commission
    pub pos_comm: f64,

    /// Position loss
    pub pos_loss: f64,

    /// Position margin
    pub pos_margin: f64,

    /// Position maintenance margin
    pub pos_maint: f64,

    /// Maintenance margin
    pub maint_margin: f64,

    /// Realised gross profit and loss
    pub realised_gross_pnl: f64,

    /// Realised profit and loss
    pub realised_pnl: f64,

    /// Unrealised profit and loss
    pub unrealised_pnl: f64,

    /// Unrealised PnL percentage
    pub unrealised_pnl_pcnt: f64,

    /// Unrealised ROE percentage
    pub unrealised_roe_pcnt: f64,

    /// Average entry price
    pub avg_entry_price: f64,

    /// Liquidation price
    pub liquidation_price: f64,

    /// Bankruptcy price
    pub bankrupt_price: f64,

    /// User ID
    pub user_id: i64,

    /// Settlement currency
    pub settle_currency: String,
}

impl super::RestClient {
    /// Add Isolated Margin Manually
    ///
    /// Add isolated margin manually to a position to increase the margin and reduce
    /// the risk of liquidation.
    ///
    /// [docs](https://www.kucoin.com/docs-new/rest/futures-trading/positions/add-isolated-margin)
    ///
    /// Rate limit: 4
    ///
    /// # Arguments
    /// * `request` - The add margin request parameters
    ///
    /// # Returns
    /// Updated position information with the added margin
    pub async fn add_margin(
        &self,
        request: AddMarginRequest,
    ) -> Result<(RestResponse<AddMarginResponse>, ResponseHeaders)> {
        self.post(ADD_MARGIN_ENDPOINT, &request).await
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_add_margin_request_serialization() {
        let request = AddMarginRequest {
            symbol: "XBTUSDTM".to_string(),
            margin: 100.5,
            biz_no: Some("unique-biz-no-123".to_string()),
        };

        let json = serde_json::to_string(&request).unwrap();
        let expected = r#"{"symbol":"XBTUSDTM","margin":100.5,"bizNo":"unique-biz-no-123"}"#;
        assert_eq!(json, expected);
    }

    #[test]
    fn test_add_margin_request_serialization_without_biz_no() {
        let request = AddMarginRequest {
            symbol: "ETHUSDTM".to_string(),
            margin: 50.25,
            biz_no: None,
        };

        let json = serde_json::to_string(&request).unwrap();
        let expected = r#"{"symbol":"ETHUSDTM","margin":50.25}"#;
        assert_eq!(json, expected);
    }

    #[test]
    fn test_add_margin_response_deserialization() {
        let json = r#"{
            "id": "6200c9b83aecfb000152ddcd",
            "symbol": "XBTUSDTM",
            "autoDeposit": false,
            "maintMarginReq": 0.005,
            "riskLimit": 500000,
            "realLeverage": 18.72,
            "crossMode": false,
            "delevPercentage": 0.66,
            "openingTimestamp": 1646287090131,
            "currentTimestamp": 1646295055021,
            "currentQty": 1,
            "currentCost": 43.388,
            "currentComm": 0.0260328,
            "unrealisedCost": 43.388,
            "realisedGrossCost": 0,
            "realisedCost": 0.0260328,
            "isOpen": true,
            "markPrice": 43536.65,
            "markValue": 43.53665,
            "posCost": 43.388,
            "posCross": 0.000024985,
            "posInit": 2.1694,
            "posComm": 0.02733446,
            "posLoss": 0,
            "posMargin": 2.19675944,
            "posMaint": 0.24861326,
            "maintMargin": 2.34540944,
            "realisedGrossPnl": 0,
            "realisedPnl": -0.0260328,
            "unrealisedPnl": 0.14865,
            "unrealisedPnlPcnt": 0.0034,
            "unrealisedRoePcnt": 0.0685,
            "avgEntryPrice": 43388,
            "liquidationPrice": 41440,
            "bankruptPrice": 41218,
            "userId": 1234321123,
            "settleCurrency": "USDT"
        }"#;

        let response: AddMarginResponse = serde_json::from_str(json).unwrap();
        assert_eq!(response.id, "6200c9b83aecfb000152ddcd");
        assert_eq!(response.symbol, "XBTUSDTM");
        assert!(!response.auto_deposit);
        assert_eq!(response.maint_margin_req, 0.005);
        assert_eq!(response.risk_limit, 500000);
        assert_eq!(response.real_leverage, 18.72);
        assert!(!response.cross_mode);
        assert_eq!(response.deleverage_percentage, 0.66);
        assert_eq!(response.opening_timestamp, 1646287090131);
        assert_eq!(response.current_timestamp, 1646295055021);
        assert_eq!(response.current_qty, 1);
        assert_eq!(response.current_cost, 43.388);
        assert_eq!(response.current_comm, 0.0260328);
        assert_eq!(response.unrealised_cost, 43.388);
        assert_eq!(response.realised_gross_cost, 0.0);
        assert_eq!(response.realised_cost, 0.0260328);
        assert!(response.is_open);
        assert_eq!(response.mark_price, 43536.65);
        assert_eq!(response.mark_value, 43.53665);
        assert_eq!(response.pos_cost, 43.388);
        assert_eq!(response.pos_cross, 0.000024985);
        assert_eq!(response.pos_init, 2.1694);
        assert_eq!(response.pos_comm, 0.02733446);
        assert_eq!(response.pos_loss, 0.0);
        assert_eq!(response.pos_margin, 2.19675944);
        assert_eq!(response.pos_maint, 0.24861326);
        assert_eq!(response.maint_margin, 2.34540944);
        assert_eq!(response.realised_gross_pnl, 0.0);
        assert_eq!(response.realised_pnl, -0.0260328);
        assert_eq!(response.unrealised_pnl, 0.14865);
        assert_eq!(response.unrealised_pnl_pcnt, 0.0034);
        assert_eq!(response.unrealised_roe_pcnt, 0.0685);
        assert_eq!(response.avg_entry_price, 43388.0);
        assert_eq!(response.liquidation_price, 41440.0);
        assert_eq!(response.bankrupt_price, 41218.0);
        assert_eq!(response.user_id, 1234321123);
        assert_eq!(response.settle_currency, "USDT");
    }

    #[test]
    fn test_add_margin_endpoint() {
        assert_eq!(
            ADD_MARGIN_ENDPOINT,
            "/api/v1/position/margin/deposit-margin"
        );
    }

    #[test]
    fn test_add_margin_request_minimum_margin() {
        let request = AddMarginRequest {
            symbol: "XBTUSDTM".to_string(),
            margin: 0.00001667, // Minimum margin amount
            biz_no: None,
        };

        let json = serde_json::to_string(&request).unwrap();
        assert!(json.contains("0.00001667"));
        assert!(json.contains("XBTUSDTM"));
    }

    #[test]
    fn test_add_margin_request_field_types() {
        let request = AddMarginRequest {
            symbol: "ETHUSDTM".to_string(),
            margin: 250.123456,
            biz_no: Some("test-123-abc".to_string()),
        };

        // Verify field types through serialization
        let json = serde_json::to_value(&request).unwrap();

        assert!(json["symbol"].is_string());
        assert!(json["margin"].is_number());
        assert!(json["bizNo"].is_string());
    }
}
