name: Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        # Pin to a known stable cargo-llvm-cov version to avoid CI breakages
        run: cargo install cargo-llvm-cov --version 0.21.0

      - name: Generate source code coverage report
        run: |
          # Run library/unit tests coverage using cargo-llvm-cov and write outputs to coverage/source
          cargo llvm-cov --workspace --all-features --lib \
            --output-path ./coverage/source \
            --cobertura --json --lcov \
            --ignore-filename-regex 'venues/examples|tests' \
            --quiet

      - name: Generate integration tests coverage report
        run: |
          # Run integration tests coverage using cargo-llvm-cov and write outputs to coverage/integration
          cargo llvm-cov --workspace --all-features --tests \
            --output-path ./coverage/integration \
            --cobertura --json --lcov \
            --ignore-filename-regex 'venues/examples' \
            --quiet

      - name: Parse coverage and generate badges
        id: coverage
        run: |
          # Parse source coverage
          SOURCE_COVERAGE=$(grep -o 'line-rate="[^"]*"' coverage/source/cobertura.xml | head -1 | sed 's/line-rate="//;s/"//')
          SOURCE_PERCENT=$(echo "$SOURCE_COVERAGE * 100" | bc -l | xargs printf "%.0f")

          # Parse integration coverage  
          INTEGRATION_COVERAGE=$(grep -o 'line-rate="[^"]*"' coverage/integration/cobertura.xml | head -1 | sed 's/line-rate="//;s/"//')
          INTEGRATION_PERCENT=$(echo "$INTEGRATION_COVERAGE * 100" | bc -l | xargs printf "%.0f")

          # Determine source badge color
          if [ "$SOURCE_PERCENT" -ge 80 ]; then
            SOURCE_COLOR="brightgreen"
          elif [ "$SOURCE_PERCENT" -ge 60 ]; then
            SOURCE_COLOR="yellow"
          else
            SOURCE_COLOR="red"
          fi

          # Determine integration badge color
          if [ "$INTEGRATION_PERCENT" -ge 80 ]; then
            INTEGRATION_COLOR="brightgreen"
          elif [ "$INTEGRATION_PERCENT" -ge 60 ]; then
            INTEGRATION_COLOR="yellow"
          else
            INTEGRATION_COLOR="red"
          fi

          echo "source_coverage=$SOURCE_PERCENT" >> $GITHUB_OUTPUT
          echo "source_color=$SOURCE_COLOR" >> $GITHUB_OUTPUT
          echo "integration_coverage=$INTEGRATION_PERCENT" >> $GITHUB_OUTPUT
          echo "integration_color=$INTEGRATION_COLOR" >> $GITHUB_OUTPUT

          # Create coverage summary
          echo "## Coverage Report" > coverage/summary.md
          echo "" >> coverage/summary.md
          echo "**Source Code Coverage: ${SOURCE_PERCENT}%**" >> coverage/summary.md
          echo "**Integration Tests Coverage: ${INTEGRATION_PERCENT}%**" >> coverage/summary.md
          echo "" >> coverage/summary.md
          echo "[![Source Coverage](https://img.shields.io/badge/Source%20Coverage-${SOURCE_PERCENT}%25-${SOURCE_COLOR})](https://github.com/${{ github.repository }}/actions/workflows/coverage.yml)" >> coverage/summary.md
          echo "" >> coverage/summary.md
          echo "[![Integration Coverage](https://img.shields.io/badge/Integration%20Coverage-${INTEGRATION_PERCENT}%25-${INTEGRATION_COLOR})](https://github.com/${{ github.repository }}/actions/workflows/coverage.yml)" >> coverage/summary.md

      - name: Generate coverage badge JSONs
        run: |
          mkdir -p badges

          # Source coverage badge
          cat > badges/source-coverage.json << EOF
          {
            "schemaVersion": 1,
            "label": "source coverage",
            "message": "${{ steps.coverage.outputs.source_coverage }}%",
            "color": "${{ steps.coverage.outputs.source_color }}"
          }
          EOF

          # Integration coverage badge
          cat > badges/integration-coverage.json << EOF
          {
            "schemaVersion": 1,
            "label": "integration coverage",
            "message": "${{ steps.coverage.outputs.integration_coverage }}%",
            "color": "${{ steps.coverage.outputs.integration_color }}"
          }
          EOF

      - name: Deploy coverage badge to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./badges
          destination_dir: badges
          keep_files: true

      - name: Archive coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.run_id }}
          path: |
            coverage/
            !coverage/*.profraw

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const summaryContent = fs.readFileSync('coverage/summary.md', 'utf8');
              
              // Read detailed coverage info
              const sourceCoverageData = JSON.parse(fs.readFileSync('coverage/source/tarpaulin-report.json', 'utf8'));
              const integrationCoverageData = JSON.parse(fs.readFileSync('coverage/integration/tarpaulin-report.json', 'utf8'));
              
              let detailsTable = '\n\n### Source Code Coverage by Module\n\n| Module | Coverage |\n|--------|----------|\n';
              
              if (sourceCoverageData.files) {
                const moduleStats = {};
                
                // Group by module/crate
                for (const [filePath, fileData] of Object.entries(sourceCoverageData.files)) {
                  const moduleName = filePath.split('/')[0] || 'root';
                  if (!moduleStats[moduleName]) {
                    moduleStats[moduleName] = { covered: 0, total: 0 };
                  }
                  moduleStats[moduleName].covered += fileData.covered || 0;
                  moduleStats[moduleName].total += fileData.coverable || 0;
                }
                
                // Add module stats to table
                for (const [module, stats] of Object.entries(moduleStats)) {
                  if (stats.total > 0) {
                    const percent = ((stats.covered / stats.total) * 100).toFixed(1);
                    detailsTable += `| ${module} | ${percent}% (${stats.covered}/${stats.total}) |\n`;
                  }
                }
              }
              
              // Integration test coverage by exchange
              detailsTable += '\n\n### Integration Test Coverage by Exchange\n\n| Exchange | Coverage |\n|----------|----------|\n';
              
              if (integrationCoverageData.files) {
                const exchangeStats = {};
                
                // Group by exchange
                for (const [filePath, fileData] of Object.entries(integrationCoverageData.files)) {
                  const exchangeName = filePath.split('/')[1] || 'unknown';
                  if (!exchangeStats[exchangeName]) {
                    exchangeStats[exchangeName] = { covered: 0, total: 0 };
                  }
                  exchangeStats[exchangeName].covered += fileData.covered || 0;
                  exchangeStats[exchangeName].total += fileData.coverable || 0;
                }
                
                // Add exchange stats to table
                for (const [exchange, stats] of Object.entries(exchangeStats)) {
                  if (stats.total > 0) {
                    const percent = ((stats.covered / stats.total) * 100).toFixed(1);
                    detailsTable += `| ${exchange} | ${percent}% (${stats.covered}/${stats.total}) |\n`;
                  }
                }
              }
              
              const comment = summaryContent + detailsTable + 
                `\n\n[ðŸ“Š View detailed HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post coverage comment:', error.message);
              
              // Fallback simple comment
              const sourceCoverage = '${{ steps.coverage.outputs.source_coverage }}';
              const integrationCoverage = '${{ steps.coverage.outputs.integration_coverage }}';
              const simpleComment = `## Coverage Report\n\n**Source Code Coverage: ${sourceCoverage}%**\n**Integration Tests Coverage: ${integrationCoverage}%**\n\n[ðŸ“Š View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: simpleComment
              });
            }
